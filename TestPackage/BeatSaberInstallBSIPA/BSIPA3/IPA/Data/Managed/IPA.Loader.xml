<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IPA.Loader</name>
    </assembly>
    <members>
        <member name="T:IPA.Config.Config">
            <summary>
            A class to handle updating ConfigProviders automatically
            </summary>
        </member>
        <member name="T:IPA.Config.Config.TypeAttribute">
            <inheritdoc />
            <summary>
            Defines the type of the <see cref="T:IPA.Config.IConfigProvider" />
            </summary>
        </member>
        <member name="P:IPA.Config.Config.TypeAttribute.Extension">
            <summary>
            The extension associated with this type, without the '.'
            </summary>
        </member>
        <member name="M:IPA.Config.Config.TypeAttribute.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Constructs the attribute with a specified extension.
            </summary>
            <param name="ext">the extension associated with this type, without the '.'</param>
        </member>
        <member name="T:IPA.Config.Config.PreferAttribute">
            <inheritdoc />
            <summary>
            Specifies that a particular parameter is preferred to be a specific type of <see cref="T:IPA.Config.IConfigProvider" />. If it is not available, also specifies backups. If none are available, the default is used.
            </summary>
        </member>
        <member name="P:IPA.Config.Config.PreferAttribute.PreferenceOrder">
            <summary>
            The order of preference for the config type. 
            </summary>
        </member>
        <member name="M:IPA.Config.Config.PreferAttribute.#ctor(System.String[])">
            <inheritdoc />
            <summary>
            Constructs the attribute with a specific preference list. Each entry is the extension without a '.'
            </summary>
            <param name="preference">The preferences in order of preference.</param>
        </member>
        <member name="T:IPA.Config.Config.NameAttribute">
            <inheritdoc />
            <summary>
            Specifies a preferred config name, instead of using the plugin's name.
            </summary>
        </member>
        <member name="P:IPA.Config.Config.NameAttribute.Name">
            <summary>
            The name to use for the config.
            </summary>
        </member>
        <member name="M:IPA.Config.Config.NameAttribute.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Constructs the attribute with a specific name.
            </summary>
            <param name="name">the name to use for the config.</param>
        </member>
        <member name="M:IPA.Config.Config.Register``1">
            <summary>
            Registers a <see cref="T:IPA.Config.IConfigProvider"/> to use for configs.
            </summary>
            <typeparam name="T">the type to register</typeparam>
        </member>
        <member name="M:IPA.Config.Config.Register(System.Type)">
            <summary>
            Registers a <see cref="T:IPA.Config.IConfigProvider"/> to use for configs.
            </summary>
            <param name="type">the type to register</param>
        </member>
        <member name="M:IPA.Config.Config.GetProviderFor(System.String,System.String[])">
            <summary>
            Gets an <see cref="T:IPA.Config.IConfigProvider"/> using the specified list pf preferred config types.
            </summary>
            <param name="configName">the name of the mod for this config</param>
            <param name="extensions">the preferred config types to try to get</param>
            <returns>an <see cref="T:IPA.Config.IConfigProvider"/> of the requested type, or of type JSON.</returns>
        </member>
        <member name="M:IPA.Config.Config.MakeLink``1(IPA.Config.IConfigProvider,System.Action{IPA.Config.IConfigProvider,IPA.Utilities.Ref{``0}})">
            <summary>
            Creates a linked <see cref="T:IPA.Utilities.Ref`1"/> for the config provider. This <see cref="T:IPA.Utilities.Ref`1"/> will be automatically updated whenever the file on-disk changes.
            </summary>
            <typeparam name="T">the type of the parsed value</typeparam>
            <param name="config">the <see cref="T:IPA.Config.IConfigProvider"/> to create a link to</param>
            <param name="onChange">an action to perform on value change</param>
            <returns>a <see cref="T:IPA.Utilities.Ref`1"/> to an ever-changing value, mirroring whatever the file contains.</returns>
        </member>
        <member name="M:IPA.Config.Config.RemoveLinks(IPA.Config.IConfigProvider)">
            <summary>
            Removes all linked <see cref="T:IPA.Utilities.Ref`1"/> such that they are no longer updated.
            </summary>
            <param name="config">the <see cref="T:IPA.Config.IConfigProvider"/> to unlink</param>
        </member>
        <member name="T:IPA.Config.IConfigProvider">
            <summary>
            An interface for configuration providers.
            </summary>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Parse``1">
            <summary>
            Loads the data provided by this <see cref="T:IPA.Config.IConfigProvider"/> into an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of the object to parse into</typeparam>
            <returns>the values from the config provider parsed into the object</returns>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Store``1(``0)">
            <summary>
            Stores the data from <paramref name="obj"/> into the <see cref="T:IPA.Config.IConfigProvider"/>.
            </summary>
            <typeparam name="T">the type of <paramref name="obj"/></typeparam>
            <param name="obj">the object containing the data to save</param>
        </member>
        <member name="P:IPA.Config.IConfigProvider.Dynamic">
            <summary>
            Gets a dynamic object providing access to the configuration.
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigProvider.HasChanged">
            <summary>
            Returns <see langword="true"/> if object has changed since the last save
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigProvider.InMemoryChanged">
            <summary>
            Returns <see langword="true"/> if the data in memory has been changed - notably including loads.
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigProvider.Filename">
            <summary>
            Will be set with the filename (no extension) to save to. When saving, the implementation should add the appropriate extension. Should error if set multiple times.
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigProvider.LastModified">
            <summary>
            Gets the last time the config was modified.
            </summary>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Save">
            <summary>
            Saves configuration to file. Should error if not a root object.
            </summary>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Load">
            <summary>
            Loads the state of the file on disk.
            </summary>
        </member>
        <member name="T:IPA.Config.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="M:IPA.Config.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="iniPath"></PARAM>
        </member>
        <member name="M:IPA.Config.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <PARAM name="section"></PARAM>
            Section name
            <PARAM name="key"></PARAM>
            Key Name
            <PARAM name="value"></PARAM>
            Value Name
        </member>
        <member name="M:IPA.Config.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <PARAM name="section"></PARAM>
            <PARAM name="key"></PARAM>
            <returns></returns>
        </member>
        <member name="T:IPA.Config.IModPrefs">
            <summary>
            Allows to get and set preferences for your mod. 
            </summary>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a string from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetInt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an int from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetFloat(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Gets a float from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetBool(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a bool from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.HasKey(System.String,System.String)">
            <summary>
            Checks whether or not a key exists in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetFloat(System.String,System.String,System.Single)">
            <summary>
            Sets a float in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetInt(System.String,System.String,System.Int32)">
            <summary>
            Sets an int in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetBool(System.String,System.String,System.Boolean)">
            <summary>
            Sets a bool in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="T:IPA.Config.ModPrefs">
            <inheritdoc />
            <summary>
            Allows to get and set preferences for your mod. 
            </summary>
        </member>
        <member name="M:IPA.Config.ModPrefs.#ctor(IPA.Loader.PluginLoader.PluginMetadata)">
            <summary>
            Constructs a ModPrefs object for the provide plugin.
            </summary>
            <param name="plugin">the plugin to get the preferences file for</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a string from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetInt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an int from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetFloat(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Gets a float from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetBool(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a bool from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.HasKey(System.String,System.String)">
            <summary>
            Checks whether or not a key exists in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetFloat(System.String,System.String,System.Single)">
            <summary>
            Sets a float in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetInt(System.String,System.String,System.Int32)">
            <summary>
            Sets an int in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetBool(System.String,System.String,System.Boolean)">
            <summary>
            Sets a bool in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="T:IPA.Loader.Features.Feature">
            <summary>
            The root interface for a mod Feature.
            </summary>
            <remarks>
            Avoid storing any data in any subclasses. If you do, it may result in a failure to load the feature.
            </remarks>
        </member>
        <member name="M:IPA.Loader.Features.Feature.Initialize(IPA.Loader.PluginLoader.PluginMetadata,System.String[])">
             <summary>
             Initializes the feature with the parameters provided in the definition.
            
             Note: When no parenthesis are provided, <paramref name="parameters"/> is an empty array.
             </summary>
             <remarks>
             This gets called BEFORE your Init method.
             
             Returning <see langword="false" /> does *not* prevent the plugin from being loaded. It simply prevents the feature from being used.
             </remarks>
             <param name="meta">the metadata of the plugin that is being prepared</param>
             <param name="parameters">the parameters passed to the feature definition, or null</param>
             <returns><see langword="true"/> if the feature is valid for the plugin, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:IPA.Loader.Features.Feature.Evaluate">
             <summary>
             Evaluates the Feature for use in conditional meta-Features. This should be re-calculated on every call, unless it can be proven to not change.
            
             This will be called on every feature that returns <see langword="true" /> from <see cref="M:IPA.Loader.Features.Feature.Initialize(IPA.Loader.PluginLoader.PluginMetadata,System.String[])"/>
             </summary>
             <returns>the truthiness of the Feature.</returns>
        </member>
        <member name="P:IPA.Loader.Features.Feature.InvalidMessage">
            <summary>
            The message to be logged when the feature is not valid for a plugin.
            This should also be set whenever either <see cref="M:IPA.Loader.Features.Feature.BeforeLoad(IPA.Loader.PluginLoader.PluginMetadata)"/> or <see cref="M:IPA.Loader.Features.Feature.BeforeInit(IPA.Loader.PluginLoader.PluginInfo)"/> returns false.
            </summary>
        </member>
        <member name="M:IPA.Loader.Features.Feature.BeforeLoad(IPA.Loader.PluginLoader.PluginMetadata)">
            <summary>
            Called before a plugin is loaded. This should never throw an exception. An exception will abort the loading of the plugin with an error.
            </summary>
            <remarks>
            The assembly will still be loaded, but the plugin will not be constructed if this returns <see langword="false" />.
            Any features it defines, for example, will still be loaded.
            </remarks>
            <param name="plugin">the plugin about to be loaded</param>
            <returns>whether or not the plugin should be loaded</returns>
        </member>
        <member name="M:IPA.Loader.Features.Feature.BeforeInit(IPA.Loader.PluginLoader.PluginInfo)">
            <summary>
            Called before a plugin's Init method is called. This will not be called if there is no Init method. This should never throw an exception. An exception will abort the loading of the plugin with an error.
            </summary>
            <param name="plugin">the plugin to be initialized</param>
            <returns>whether or not to call the Init method</returns>
        </member>
        <member name="M:IPA.Loader.Features.Feature.AfterInit(IPA.Loader.PluginLoader.PluginInfo,IPA.IBeatSaberPlugin)">
            <summary>
            Called after a plugin has been fully initialized, whether or not there is an Init method. This should never throw an exception.
            </summary>
            <param name="plugin">the plugin that was just initialized</param>
            <param name="pluginInstance">the instance of the plugin being initialized</param>
        </member>
        <member name="M:IPA.Loader.Features.Feature.AfterInit(IPA.Loader.PluginLoader.PluginInfo)">
            <summary>
            Called after a plugin has been fully initialized, whether or not there is an Init method. This should never throw an exception.
            </summary>
            <param name="plugin">the plugin that was just initialized</param>
        </member>
        <member name="M:IPA.Loader.Features.Feature.RequireLoaded(IPA.Loader.PluginLoader.PluginMetadata)">
            <summary>
            Ensures a plugin's assembly is loaded. Do not use unless you need to.
            </summary>
            <param name="plugin">the plugin to ensure is loaded.</param>
        </member>
        <member name="P:IPA.Loader.Features.Feature.StoreOnPlugin">
            <summary>
            Defines whether or not this feature will be accessible from the plugin metadata once loaded.
            </summary>
        </member>
        <member name="T:IPA.Loader.PluginInitInjector">
            <summary>
            The type that handles value injecting into a plugin's Init.
            </summary>
        </member>
        <member name="T:IPA.Loader.PluginInitInjector.InjectParameter">
            <summary>
            A typed injector for a plugin's Init method. When registered, called for all associated types. If it returns null, the default for the type will be used.
            </summary>
            <param name="previous">the previous return value of the function, or <see langword="null"/> if never called for plugin.</param>
            <param name="param">the <see cref="T:System.Reflection.ParameterInfo"/> of the parameter being injected.</param>
            <param name="meta">the <see cref="T:IPA.Loader.PluginLoader.PluginMetadata"/> for the plugin being loaded.</param>
            <returns>the value to inject into that parameter.</returns>
        </member>
        <member name="M:IPA.Loader.PluginInitInjector.AddInjector(System.Type,IPA.Loader.PluginInitInjector.InjectParameter)">
            <summary>
            Adds an injector to be used when calling future plugins' Init methods.
            </summary>
            <param name="type">the type of the parameter.</param>
            <param name="injector">the function to call for injection.</param>
        </member>
        <member name="T:IPA.Loader.PluginLoader">
            <summary>
            A type to manage the loading of plugins.
            </summary>
        </member>
        <member name="T:IPA.Loader.PluginLoader.PluginMetadata">
            <summary>
            A class which describes a loaded plugin.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginMetadata.Assembly">
            <summary>
            The assembly the plugin was loaded from.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginMetadata.PluginType">
            <summary>
            The TypeDefinition for the main type of the plugin.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginMetadata.Name">
            <summary>
            The human readable name of the plugin.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginMetadata.Id">
            <summary>
            The BeatMods ID of the plugin, or null if it doesn't have one.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginMetadata.Version">
            <summary>
            The version of the plugin.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginMetadata.File">
            <summary>
            The file the plugin was loaded from.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginMetadata.Features">
            <summary>
            The features this plugin requests.
            </summary>
        </member>
        <member name="M:IPA.Loader.PluginLoader.PluginMetadata.ToString">
            <inheritdoc />
        </member>
        <member name="T:IPA.Loader.PluginLoader.PluginInfo">
            <summary>
            A container object for all the data relating to a plugin.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginLoader.PluginInfo.Metadata">
            <summary>
            Metadata for the plugin.
            </summary>
        </member>
        <member name="T:IPA.Loader.PluginManager">
            <summary>
            The manager class for all plugins.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginManager.BSPlugins">
            <summary>
            An <see cref="T:System.Collections.IEnumerable"/> of new Beat Saber plugins
            </summary>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetPlugin(System.String)">
            <summary>
            Gets info about the plugin with the specified name.
            </summary>
            <param name="name">the name of the plugin to get (must be an exact match)</param>
            <returns>the plugin info for the requested plugin or null</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetPluginFromModSaberName(System.String)">
            <summary>
            Gets info about the plugin with the specified ModSaber name.
            </summary>
            <param name="name">the ModSaber name of the plugin to get (must be an exact match)</param>
            <returns>the plugin info for the requested plugin or null</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetPluginFromId(System.String)">
            <summary>
            Gets info about the plugin with the specified ID.
            </summary>
            <param name="name">the ID name of the plugin to get (must be an exact match)</param>
            <returns>the plugin info for the requested plugin or null</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetDisabledPlugin(System.String)">
            <summary>
            Gets a disabled plugin's metadata by its name.
            </summary>
            <param name="name">the name of the disabled plugin to get</param>
            <returns>the metadata for the corresponding plugin</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetDisabledPluginFromId(System.String)">
            <summary>
            Gets a disabled plugin's metadata by its ID.
            </summary>
            <param name="name">the ID of the disabled plugin to get</param>
            <returns>the metadata for the corresponding plugin</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.DisablePlugin(IPA.Loader.PluginLoader.PluginInfo)">
            <summary>
            Disables a plugin, and all dependents.
            </summary>
            <param name="plugin">the plugin to disable</param>
            <returns>whether or not it needs a restart to enable</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.DisablePlugin(System.String)">
            <summary>
            Disables a plugin, and all dependents.
            </summary>
            <param name="pluginId">the ID, or name if the ID is null, of the plugin to disable</param>
            <returns>whether a restart is needed to activate</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.EnablePlugin(IPA.Loader.PluginLoader.PluginMetadata)">
            <summary>
            Enables a plugin that had been previously disabled.
            </summary>
            <param name="plugin">the plugin to enable</param>
            <returns>whether a restart is needed to activate</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.EnablePlugin(System.String)">
            <summary>
            Enables a plugin that had been previously disabled.
            </summary>
            <param name="pluginId">the ID, or name if the ID is null, of the plugin to enable</param>
            <returns>whether a restart is needed to activate</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.IsDisabled(IPA.Loader.PluginLoader.PluginMetadata)">
            <summary>
            Checks if a given plugin is disabled.
            </summary>
            <param name="meta">the plugin to check</param>
            <returns><see langword="true"/> if the plugin is disabled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.IsEnabled(IPA.Loader.PluginLoader.PluginMetadata)">
            <summary>
            Checks if a given plugin is enabled.
            </summary>
            <param name="meta">the plugin to check</param>
            <returns><see langword="true"/> if the plugin is enabled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:IPA.Loader.PluginManager.DisabledPlugins">
            <summary>
            Gets a list of disabled BSIPA plugins.
            </summary>
        </member>
        <member name="T:IPA.Loader.PluginManager.PluginEnableDelegate">
            <summary>
            An invoker for the <see cref="E:IPA.Loader.PluginManager.PluginEnabled"/> event.
            </summary>
            <param name="plugin">the plugin that was enabled</param>
            <param name="needsRestart">whether it needs a restart to take effect</param>
        </member>
        <member name="T:IPA.Loader.PluginManager.PluginDisableDelegate">
            <summary>
            An invoker for the <see cref="E:IPA.Loader.PluginManager.PluginDisabled"/> event.
            </summary>
            <param name="plugin">the plugin that was disabled</param>
            <param name="needsRestart">whether it needs a restart to take effect</param>
        </member>
        <member name="E:IPA.Loader.PluginManager.PluginEnabled">
            <summary>
            Called whenever a plugin is enabled.
            </summary>
        </member>
        <member name="E:IPA.Loader.PluginManager.PluginDisabled">
            <summary>
            Called whenever a plugin is disabled.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginManager.AllPlugins">
            <summary>
            Gets a list of all BSIPA plugins.
            </summary>
        </member>
        <member name="M:IPA.Loader.PluginManager.InfoFromMetadata(IPA.Loader.PluginLoader.PluginMetadata)">
            <summary>
            Converts a plugin's metadata to a <see cref="T:IPA.Loader.PluginLoader.PluginInfo"/>.
            </summary>
            <param name="meta">the metadata</param>
            <returns>the plugin info</returns>
        </member>
        <member name="P:IPA.Loader.PluginManager.Plugins">
            <summary>
            An <see cref="T:System.Collections.IEnumerable"/> of old IPA plugins.
            </summary>
        </member>
        <member name="T:IPA.Logging.Printers.ColorlessConsolePrinter">
            <summary>
            A colorless version of <see cref="T:IPA.Logging.Printers.ColoredConsolePrinter"/>, that indiscriminantly prints to standard out.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.ColorlessConsolePrinter.Filter">
            <summary>
            A filter for this specific printer.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.ColorlessConsolePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to standard out.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.PluginSubLogPrinter">
            <summary>
            Prints log messages to the file specified by the name.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.PluginSubLogPrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.#ctor(System.String,System.String)">
            <summary>
            Creates a new printer with the given name.
            </summary>
            <param name="mainname">the name of the main logger</param>
            <param name="name">the name of the logger</param>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.ColoredConsolePrinter">
            <summary>
            Prints a pretty message to the console.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.ColoredConsolePrinter.Filter">
            <summary>
            A filter for this specific printer.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.ColoredConsolePrinter.Color">
            <summary>
            The color to print messages as.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.ColoredConsolePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the console window.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.GlobalLogFilePrinter">
            <summary>
            A printer for all messages to a unified log location.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.GlobalLogFilePrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GlobalLogFilePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="M:IPA.Logging.Printers.GlobalLogFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IPA.Logging.Printers.GZFilePrinter">
            <summary>
            A <see cref="T:IPA.Logging.LogPrinter"/> abstract class that provides the utilities to write to a GZip file.
            </summary>
        </member>
        <member name="F:IPA.Logging.Printers.GZFilePrinter.FileWriter">
            <summary>
            The <see cref="T:System.IO.StreamWriter"/> that writes to the GZip file.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the file to write to without the .gz extension.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.StartPrint">
            <summary>
            Called at the start of any print session.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.EndPrint">
            <summary>
            Called at the end of any print session.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.Dispose(System.Boolean)">
            <summary>
            Disposes the file printer.
            </summary>
            <param name="disposing">does nothing</param>
        </member>
        <member name="T:IPA.Logging.Printers.PluginLogFilePrinter">
            <summary>
            Prints log messages to the file specified by the name.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.PluginLogFilePrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.#ctor(System.String)">
            <summary>
            Creates a new printer with the given name.
            </summary>
            <param name="name">the name of the logger</param>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Logger">
            <summary>
            The logger base class. Provides the format for console logs.
            </summary>
        </member>
        <member name="P:IPA.Logging.Logger.LogFormat">
            <summary>
            The standard format for log messages.
            </summary>
        </member>
        <member name="T:IPA.Logging.Logger.Level">
            <summary>
            An enum specifying the level of the message. Resembles Syslog.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.None">
            <summary>
            No associated level. These never get shown.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Debug">
            <summary>
            A debug message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Info">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Notice">
            <summary>
            A notice. More significant than Info, but less than a warning.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Critical">
            <summary>
            A critical error message.
            </summary>
        </member>
        <member name="T:IPA.Logging.Logger.LogLevel">
            <summary>
            An enum providing log level filters.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.None">
            <summary>
            Allow no messages through.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.DebugOnly">
            <summary>
            Only shows Debug messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.InfoOnly">
            <summary>
            Only shows info messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.NoticeOnly">
            <summary>
            Only shows notice messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.WarningOnly">
            <summary>
            Only shows Warning messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.ErrorOnly">
            <summary>
            Only shows Error messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.CriticalOnly">
            <summary>
            Only shows Critical messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.ErrorUp">
            <summary>
            Shows all messages error and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.WarningUp">
            <summary>
            Shows all messages warning and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.NoticeUp">
            <summary>
            Shows all messages Notice and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.InfoUp">
            <summary>
            Shows all messages info and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.All">
            <summary>
            Shows all messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.Undefined">
            <summary>
            Used for when the level is undefined.
            </summary>
        </member>
        <member name="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)">
            <summary>
            A basic log function.
            </summary>
            <param name="level">the level of the message</param>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)">
            <summary>
            A basic log function taking an exception to log.
            </summary>
            <param name="level">the level of the message</param>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Debug(System.String)">
            <summary>
            Sends a debug message.
            Equivalent to Log(Level.Debug, message);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Debug(System.Exception)">
            <summary>
            Sends an exception as a debug message.
            Equivalent to Log(Level.Debug, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Info(System.String)">
            <summary>
            Sends an info message.
            Equivalent to Log(Level.Info, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Info(System.Exception)">
            <summary>
            Sends an exception as an info message.
            Equivalent to Log(Level.Info, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Notice(System.String)">
            <summary>
            Sends a notice message.
            Equivalent to Log(Level.Notice, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Notice(System.Exception)">
            <summary>
            Sends an exception as a notice message.
            Equivalent to Log(Level.Notice, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Warn(System.String)">
            <summary>
            Sends a warning message.
            Equivalent to Log(Level.Warning, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Warn(System.Exception)">
            <summary>
            Sends an exception as a warning message.
            Equivalent to Log(Level.Warning, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Error(System.String)">
            <summary>
            Sends an error message.
            Equivalent to Log(Level.Error, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Error(System.Exception)">
            <summary>
            Sends an exception as an error message.
            Equivalent to Log(Level.Error, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Critical(System.String)">
            <summary>
            Sends a critical message.
            Equivalent to Log(Level.Critical, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Critical(System.Exception)">
            <summary>
            Sends an exception as a critical message.
            Equivalent to Log(Level.Critical, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="T:IPA.Logging.LogPrinter">
            <summary>
            The log printer's base class.
            </summary>
        </member>
        <member name="P:IPA.Logging.LogPrinter.Filter">
            <summary>
            Provides a filter for which log levels to allow through.
            </summary>
        </member>
        <member name="M:IPA.Logging.LogPrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints a provided message from a given log at the specified time.
            </summary>
            <param name="level">the log level</param>
            <param name="time">the time the message was composed</param>
            <param name="logName">the name of the log that created this message</param>
            <param name="message">the message</param>
        </member>
        <member name="M:IPA.Logging.LogPrinter.StartPrint">
            <summary>
            Called before the first print in a group. May be called multiple times.
            Use this to create file handles and the like.
            </summary>
        </member>
        <member name="M:IPA.Logging.LogPrinter.EndPrint">
            <summary>
            Called after the last print in a group. May be called multiple times.
            Use this to dispose file handles and the like.
            </summary>
        </member>
        <member name="T:IPA.Logging.StandardLogger">
             <summary>
             The default (and standard) <see cref="T:IPA.Logging.Logger"/> implementation.
             </summary>
             <remarks>
             <see cref="T:IPA.Logging.StandardLogger"/> uses a multi-threaded approach to logging. All actual I/O is done on another thread,
             where all messaged are guaranteed to be logged in the order they appeared. It is up to the printers to format them.
            
             This logger supports child loggers. Use <see cref="M:IPA.Logging.LoggerExtensions.GetChildLogger(IPA.Logging.Logger,System.String)"/> to safely get a child.
             The modification of printers on a parent are reflected down the chain.
             </remarks>
        </member>
        <member name="P:IPA.Logging.StandardLogger.ConsoleWriter">
            <summary>
            The <see cref="T:System.IO.TextWriter"/> for writing directly to the console window, or stdout if no window open.
            </summary>
        </member>
        <member name="M:IPA.Logging.StandardLogger.AddDefaultPrinter(IPA.Logging.LogPrinter)">
            <summary>
            Adds to the default printer pool that all printers inherit from. Printers added this way will be passed every message from every logger.
            </summary>
            <param name="printer"></param>
        </member>
        <member name="P:IPA.Logging.StandardLogger.PrintFilter">
            <summary>
            All levels defined by this filter will be sent to loggers. All others will be ignored.
            </summary>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Configure(IPA.Config.SelfConfig)">
            <summary>
            Configures internal debug settings based on the config passed in.
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.GetChild(System.String)">
            <summary>
            Gets a child printer with the given name, either constructing a new one or using one that was already made.
            </summary>
            <param name="name"></param>
            <returns>a child <see cref="T:IPA.Logging.StandardLogger"/> with the given sub-name</returns>
        </member>
        <member name="M:IPA.Logging.StandardLogger.AddPrinter(IPA.Logging.LogPrinter)">
            <summary>
            Adds a log printer to the logger.
            </summary>
            <param name="printer">the printer to add</param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Log(IPA.Logging.Logger.Level,System.String)">
            <summary>
            Logs a specific message at a given level.
            </summary>
            <param name="level">the message level</param>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Debug(System.String)">
            <inheritdoc />
            <summary>
            An override to <see cref="M:IPA.Logging.Logger.Debug(System.String)" /> which shows the method that called it.
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.LogThread">
            <summary>
            The log printer thread for <see cref="T:IPA.Logging.StandardLogger"/>.
            </summary>
        </member>
        <member name="M:IPA.Logging.StandardLogger.StopLogThread">
            <summary>
            Stops and joins the log printer thread.
            </summary>
        </member>
        <member name="T:IPA.Logging.LoggerExtensions">
            <summary>
            A class providing extensions for various loggers.
            </summary>
        </member>
        <member name="M:IPA.Logging.LoggerExtensions.GetChildLogger(IPA.Logging.Logger,System.String)">
            <summary>
            Gets a child logger, if supported. Currently the only defined and supported logger is <see cref="T:IPA.Logging.StandardLogger"/>, and most plugins will only ever receive this anyway.
            </summary>
            <param name="logger">the parent <see cref="T:IPA.Logging.Logger"/></param>
            <param name="name">the name of the child</param>
            <returns>the child logger</returns>
        </member>
        <member name="T:IPA.IBeatSaberPlugin">
            <summary>
            Interface for Beat Saber plugins. Every class that implements this will be loaded if the DLL is placed at
            data/Managed/Plugins.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnApplicationStart">
            <summary>
            Gets invoked when the application is started.
            
            THIS EVENT WILL NOT BE GUARANTEED TO FIRE. USE Init OR <see cref="M:IPA.IDisablablePlugin.OnEnable"/> INSTEAD.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnApplicationQuit">
            <summary>
            Gets invoked when the application is closed.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnUpdate">
            <summary>
            Gets invoked on every graphic update.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnFixedUpdate">
            <summary>
            Gets invoked on ever physics update.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnSceneLoaded(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
            Gets invoked whenever a scene is loaded.
            </summary>
            <param name="scene">The scene currently loaded</param>
            <param name="sceneMode">The type of loading</param>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnSceneUnloaded(UnityEngine.SceneManagement.Scene)">
            <summary>
            Gets invoked whenever a scene is unloaded
            </summary>
            <param name="scene">The unloaded scene</param>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnActiveSceneChanged(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
            <summary>
            Gets invoked whenever a scene is changed
            </summary>
            <param name="prevScene">The Scene that was previously loaded</param>
            <param name="nextScene">The Scene being loaded</param>
        </member>
        <member name="T:IPA.IDisablablePlugin">
            <summary>
            Provides methods to allow runtime enabling and disabling of a plugin.
            </summary>
        </member>
        <member name="M:IPA.IDisablablePlugin.OnEnable">
            <summary>
            Called when a plugin is enabled. This is where you should set up Harmony patches and the like.
            </summary>
            <remarks>
            This will be called after Init, and will be called when the plugin loads normally too.
            When a plugin is disabled at startup, neither this nor Init will be called until it is enabled.
            
            Init will only ever be called once.
            </remarks>
        </member>
        <member name="M:IPA.IDisablablePlugin.OnDisable">
            <summary>
            Called when a plugin is disabled at runtime. This should disable things like Harmony patches and unsubscribe
            from events. After this is called there should be no lingering effects of the mod.
            </summary>
            <remarks>
            This will get called at shutdown, after <see cref="M:IPA.IBeatSaberPlugin.OnApplicationQuit"/>, as well as when the
            plugin is disabled at runtime.
            </remarks>
        </member>
        <member name="T:IPA.IEnhancedBeatSaberPlugin">
            <inheritdoc cref="T:IPA.IBeatSaberPlugin" />
            <summary>
            An enhanced version of a standard BeatSaber plugin.
            </summary>
        </member>
        <member name="T:IPA.ModsaberModInfo">
            <summary>
            A class to provide information about a mod on ModSaber.ML
            </summary>
        </member>
        <member name="P:IPA.ModsaberModInfo.InternalName">
            <summary>
            The name the mod uses on ModSaber as an identifier.
            </summary>
        </member>
        <member name="P:IPA.ModsaberModInfo.CurrentVersion">
            <summary>
            The version of the currently installed mod. Used to compare to the version on ModSaber. Should be a valid SemVer version.
            </summary>
        </member>
        <member name="T:IPA.IGenericEnhancedPlugin">
            <summary>
            A generic interface for the modification for enhanced plugins.
            </summary>
        </member>
        <member name="P:IPA.IGenericEnhancedPlugin.Filter">
            <summary>
            Gets a list of executables this plugin should be executed on (without the file ending)
            </summary>
            <example>{ "PlayClub", "PlayClubStudio" }</example>
        </member>
        <member name="M:IPA.IGenericEnhancedPlugin.OnLateUpdate">
            <summary>
            Called after Update.
            </summary>
        </member>
        <member name="T:IPA.Old.IEnhancedPlugin">
            <inheritdoc cref="T:IPA.Old.IPlugin" />
            <summary>
            An enhanced version of the standard IPA plugin.
            </summary>
        </member>
        <member name="P:IPA.Old.IEnhancedPlugin.Filter">
            <summary>
            Gets a list of executables this plugin should be executed on (without the file ending)
            </summary>
            <example>{ "PlayClub", "PlayClubStudio" }</example>
        </member>
        <member name="M:IPA.Old.IEnhancedPlugin.OnLateUpdate">
            <summary>
            Called after Update.
            </summary>
        </member>
        <member name="T:IPA.Old.IPlugin">
            <summary>
            Interface for generic Illusion unity plugins. Every class that implements this will be loaded if the DLL is placed at
            data/Managed/Plugins.
            </summary>
        </member>
        <member name="P:IPA.Old.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:IPA.Old.IPlugin.Version">
            <summary>
            Gets the version of the plugin.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnApplicationStart">
            <summary>
            Gets invoked when the application is started.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnApplicationQuit">
            <summary>
            Gets invoked when the application is closed.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnLevelWasLoaded(System.Int32)">
            <summary>
            Gets invoked whenever a level is loaded.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:IPA.Old.IPlugin.OnLevelWasInitialized(System.Int32)">
            <summary>
            Gets invoked after the first update cycle after a level was loaded.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:IPA.Old.IPlugin.OnUpdate">
            <summary>
            Gets invoked on every graphic update.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnFixedUpdate">
            <summary>
            Gets invoked on ever physics update.
            </summary>
        </member>
        <member name="T:IPA.Utilities.BeatSaber">
            <summary>
            Provides some basic utility methods and properties of Beat Saber
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.GameVersion">
            <summary>
            Provides the current game version
            </summary>
        </member>
        <member name="T:IPA.Utilities.BeatSaber.Release">
            <summary>
            The different types of releases of the game.
            </summary>
        </member>
        <member name="F:IPA.Utilities.BeatSaber.Release.Steam">
            <summary>
            Indicates a Steam release.
            </summary>
        </member>
        <member name="F:IPA.Utilities.BeatSaber.Release.Oculus">
            <summary>
            Indicates an Oculus release.
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.ReleaseType">
            <summary>
            Gets the <see cref="T:IPA.Utilities.BeatSaber.Release"/> type of this installation of Beat Saber
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.InstallPath">
            <summary>
            The path to the Beat Saber install dir
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.LibraryPath">
            <summary>
            The path to the `Libs` folder. Use only if necessary.
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.NativeLibraryPath">
            <summary>
            The path to the `Libs\Native` folder. Use only if necessary.
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.PluginsPath">
            <summary>
            The directory to load plugins from.
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.UserDataPath">
            <summary>
            The path to the `UserData` folder.
            </summary>
        </member>
        <member name="T:IPA.Utilities.Ref">
            <summary>
            Utilities to create <see cref="T:IPA.Utilities.Ref`1"/> using type inference.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Ref.Create``1(``0)">
            <summary>
            Creates a <see cref="T:IPA.Utilities.Ref`1"/>.
            </summary>
            <typeparam name="T">the type to reference.</typeparam>
            <param name="val">the default value.</param>
            <returns>the new <see cref="T:IPA.Utilities.Ref`1"/>.</returns>
        </member>
        <member name="T:IPA.Utilities.Ref`1">
            <summary>
            A class to store a reference for passing to methods which cannot take ref parameters.
            </summary>
            <typeparam name="T">the type of the value</typeparam>
        </member>
        <member name="P:IPA.Utilities.Ref`1.Value">
            <summary>
            The value of the reference
            </summary>
        </member>
        <member name="P:IPA.Utilities.Ref`1.Error">
            <summary>
            An exception that was generated while creating the value.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Ref`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="reference">the initial value of the reference</param>
        </member>
        <member name="M:IPA.Utilities.Ref`1.op_Implicit(IPA.Utilities.Ref{`0})~`0">
            <summary>
            Converts to referenced type, returning the stored reference.
            </summary>
            <param name="self">the object to be de-referenced</param>
            <returns>the value referenced by the object</returns>
        </member>
        <member name="M:IPA.Utilities.Ref`1.op_Implicit(`0)~IPA.Utilities.Ref{`0}">
            <summary>
            Converts a value T to a reference to that object. Will overwrite the reference in the left hand expression if there is one.
            </summary>
            <param name="toConvert">the value to wrap in the Ref</param>
            <returns>the Ref wrapping the value</returns>
        </member>
        <member name="M:IPA.Utilities.Ref`1.Verify">
            <summary>
            Throws error if one was set.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Ref`1.CompareTo(`0)">
            <inheritdoc />
        </member>
        <member name="M:IPA.Utilities.Ref`1.CompareTo(IPA.Utilities.Ref{`0})">
            <inheritdoc />
        </member>
        <member name="T:IPA.Utilities.ReflectionUtil">
            <summary>
            A utility class providing reflection helper methods.
            </summary>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.SetPrivateField(System.Object,System.String,System.Object)">
            <summary>
            Sets a (potentially) private field on the target object.
            </summary>
            <param name="obj">the object instance</param>
            <param name="fieldName">the field to set</param>
            <param name="value">the value to set it to</param>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.GetPrivateField``1(System.Object,System.String)">
            <summary>
            Gets the value of a (potentially) private field.
            </summary>
            <typeparam name="T">the type of te field (result casted)</typeparam>
            <param name="obj">the object instance to pull from</param>
            <param name="fieldName">the name of the field to read</param>
            <returns>the value of the field</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.SetPrivateProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a (potentially) private property on the target object.
            </summary>
            <param name="obj">the target object instance</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value to set it to</param>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.InvokePrivateMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a (potentially) private method.
            </summary>
            <param name="obj">the object to call from</param>
            <param name="methodName">the method name</param>
            <param name="methodParams">the method parameters</param>
            <returns>the return value</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.InvokePrivateMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a (potentially) private method.
            </summary>
            <typeparam name="T">the return type</typeparam>
            <param name="obj">the object to call from</param>
            <param name="methodName">the method name to call</param>
            <param name="methodParams">the method's parameters</param>
            <returns>the return value</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CopyComponent(UnityEngine.Component,System.Type,UnityEngine.GameObject,System.Type)">
            <summary>
            Copies a component of type originalType to a component of overridingType on the destination GameObject.
            </summary>
            <param name="original">the original component</param>
            <param name="overridingType">the new component's type</param>
            <param name="destination">the destination GameObject</param>
            <param name="originalTypeOverride">overrides the source component type (for example, to a superclass)</param>
            <returns>the copied component</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CopyComponent``1(UnityEngine.Component,UnityEngine.GameObject,System.Type)">
            <summary>
            A generic version of CopyComponent. 
            <see cref="M:IPA.Utilities.ReflectionUtil.CopyComponent(UnityEngine.Component,System.Type,UnityEngine.GameObject,System.Type)"/>
            </summary>
            <typeparam name="T">the overriding type</typeparam>
            <param name="original">the original component</param>
            <param name="destination">the destination game object</param>
            <param name="originalTypeOverride">overrides the source component type (for example, to a superclass)</param>
            <returns>the copied component</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.String,System.String,System.String,System.Type[],System.Object[])">
            <summary>
            Calls an instance method on a type specified by functionClass and dependency.
            <seealso cref="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.Type,System.String,System.Type[],System.Object[])"/>
            </summary>
            <param name="functionClass">the type name</param>
            <param name="dependency">the assembly the type is in</param>
            <param name="function">the name of the method to call</param>
            <param name="methodSig">the type signature of the method</param>
            <param name="parameters">the method parameters</param>
            <returns>the result of the call</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            Calls an instance method on a new object.
            </summary>
            <param name="type">the object type</param>
            <param name="function">the name of the method to call</param>
            <param name="methodSig">the type signature</param>
            <param name="parameters">the parameters</param>
            <returns>the result of the call</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod``1(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            Calls an instance method on a new object.
            <seealso cref="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.Type,System.String,System.Type[],System.Object[])"/>
            </summary>
            <typeparam name="T">the return type</typeparam>
            <param name="type">the object type</param>
            <param name="function">the name of the method to call</param>
            <param name="methodSig">the type signature</param>
            <param name="parameters">the parameters</param>
            <returns>the result of the call</returns>
        </member>
        <member name="T:IPA.Utilities.Extensions">
            <summary>
            A class providing various extension methods.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Extensions.GetDefault(System.Type)">
            <summary>
            Gets the default value for a given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">the <see cref="T:System.Type"/> to get the default value for</param>
            <returns>the default value of <paramref name="type"/></returns>
        </member>
        <member name="M:IPA.Utilities.Extensions.Unwrap(System.Nullable{System.Boolean})">
            <summary>
            Unwraps a <see cref="T:System.Nullable`1"/> where T is <see cref="T:System.Boolean"/> such that if the value is null, it gives <see langword="false"/>.
            </summary>
            <param name="self">the bool? to unwrap</param>
            <returns>the unwrapped value, or <see langword="false"/> if it was <see langword="null"/></returns>
        </member>
        <member name="T:IPA.Utilities.Utils">
            <summary>
            A class providing static utility functions that in any other language would just *exist*.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Utils.StringToByteArray(System.String)">
            <summary>
            Converts a hex string to a byte array.
            </summary>
            <param name="hex">the hex stream</param>
            <returns>the corresponding byte array</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.ByteArrayToString(System.Byte[])">
            <summary>
            Converts a byte array to a hex string.
            </summary>
            <param name="ba">the byte array</param>
            <returns>the hex form of the array</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.UnsafeCompare(System.Byte[],System.Byte[])">
            <summary>
            Uses unsafe code to compare 2 byte arrays quickly.
            </summary>
            <param name="a1">array 1</param>
            <param name="a2">array 2</param>
            <returns>whether or not they are byte-for-byte equal</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.GetRelativePath(System.String,System.String)">
            <summary>
            Gets a path relative to the provided folder.
            </summary>
            <param name="file">the file to relativize</param>
            <param name="folder">the source folder</param>
            <returns>a path to get from <paramref name="folder"/> to <paramref name="file"/></returns>
        </member>
        <member name="M:IPA.Utilities.Utils.CopyAll(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Func{System.Exception,System.IO.FileInfo,System.Boolean})">
            <summary>
            Copies all files from <paramref name="source"/> to <paramref name="target"/>.
            </summary>
            <param name="source">the source directory</param>
            <param name="target">the destination directory</param>
            <param name="appendFileName">the filename of the file to append together</param>
            <param name="onCopyException">a delegate called when there is an error copying. Return true to keep going.</param>
        </member>
        <member name="F:IPA.Updating.BeatMods.ApiEndpoint.Mod.Id">
            <summary>
            Will be a useless string of characters. Do not use.
            </summary>
        </member>
        <member name="F:IPA.Updating.BeatMods.ApiEndpoint.Mod.DownloadsObject.Hashes">
            <summary>
            Hashes stored are MD5
            </summary>
        </member>
        <member name="T:IPA.Updating.BeatMods.Updater.InstallFinish">
            <summary>
            This will still be called even if there was an error. Called after all three download/install attempts, or after a successful installation.
            ALWAYS called.
            </summary>
            <param name="obj"></param>
            <param name="didError"></param>
        </member>
        <member name="T:IPA.Updating.BeatMods.Updater.InstallFailed">
            <summary>
            This can be called multiple times
            </summary>
            <param name="obj"></param>
            <param name="error"></param>
        </member>
    </members>
</doc>
