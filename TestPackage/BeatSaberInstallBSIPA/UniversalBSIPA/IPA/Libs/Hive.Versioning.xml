<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hive.Versioning</name>
    </assembly>
    <members>
        <member name="T:Hive.Versioning.Version">
            <summary>
            A version that meets the Semantic Versioning specification.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Version.Zero">
            <summary>
            Gets the zero version (0.0.0).
            </summary>
        </member>
        <member name="M:Hive.Versioning.Version.#ctor(Hive.Utilities.StringView)">
            <summary>
            Parses and creates a version object from a sequence of characters.
            </summary>
            <remarks>
            This is roughly equivalent to <see cref="M:Hive.Versioning.Version.Parse(Hive.Utilities.StringView)"/>.
            </remarks>
            <param name="text">The sequence of characters to parse as a version.</param>
            <exception cref="T:System.ArgumentException">Thrown when the input is not a valid SemVer version.</exception>
        </member>
        <member name="M:Hive.Versioning.Version.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a version object from the component parts of the version.
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="patch">The patch number.</param>
            <param name="prereleaseIds">A sequence of IDs specifying the prerelease.</param>
            <param name="buildIds">A sequence of IDs representing the build.</param>
        </member>
        <member name="M:Hive.Versioning.Version.#ctor(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a version object from the component parts of the version.
            </summary>
            <remarks>
        <para>This interface is provided only for CLS compliance. The actual version number is unsigned.</para>
        <para>Because of this, very large version numbers may cause issues with this interface.</para>
      </remarks>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="patch">The patch number.</param>
            <param name="prereleaseIds">A sequence of IDs specifying the prerelease.</param>
            <param name="buildIds">A sequence of IDs representing the build.</param>
        </member>
        <member name="M:Hive.Versioning.Version.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a version object from the component parts of the version.
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="patch">The patch number.</param>
        </member>
        <member name="M:Hive.Versioning.Version.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a version object from the component parts of the version.
            </summary>
            <remarks>
        <para>This interface is provided only for CLS compliance. The actual version number is unsigned.</para>
        <para>Because of this, very large version numbers may cause issues with this interface.</para>
      </remarks>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="patch">The patch number.</param>
        </member>
        <member name="P:Hive.Versioning.Version.Major">
            <summary>
            Gets the major version number.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Version.Minor">
            <summary>
            Gets the minor version number.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Version.Patch">
            <summary>
            Gets the patch number.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Version.PreReleaseIds">
            <summary>
            Gets the sequence of prerelease IDs.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Version.BuildIds">
            <summary>
            Gets the sequence of build IDs.
            </summary>
        </member>
        <member name="M:Hive.Versioning.Version.GetVersionNumber(System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Vers the version number, as signed integers.
            </summary>
            <remarks>
        <para>This interface is provided only for CLS compliance. The actual version number is unsigned.</para>
        <para>Because of this, very large version numbers may cause issues with this interface.</para>
      </remarks>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="patch">The patch number.</param>
        </member>
        <member name="M:Hive.Versioning.Version.ToString(System.Text.StringBuilder)">
            <summary>
            Appends this <see cref="T:Hive.Versioning.Version"/> to the provided <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to.</param>
            <returns>The provided <see cref="T:System.Text.StringBuilder"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Hive.Versioning.Version.op_Equality(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Compares two versions for equality.
            </summary>
            <param name="a">The first version to compare.</param>
            <param name="b">The second version to compare.</param>
            <returns><see langword="true"/> if they are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.Version.op_Inequality(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Compares two versions for inequality.
            </summary>
            <param name="a">The first version to compare.</param>
            <param name="b">The second version to compare.</param>
            <returns><see langword="true"/> if they are not equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.Version.op_GreaterThan(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Checks if <paramref name="a"/> is greater than <paramref name="b"/>.
            </summary>
            <param name="a">The first version to compare.</param>
            <param name="b">The second version to compare.</param>
            <returns><see langword="true"/> if <paramref name="a"/> is greater than <paramref name="b"/>, <see langword="false"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.op_LessThan(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Checks if <paramref name="a"/> is less than <paramref name="b"/>.
            </summary>
            <param name="a">The first version to compare.</param>
            <param name="b">The second version to compare.</param>
            <returns><see langword="true"/> if <paramref name="a"/> is less than <paramref name="b"/>, <see langword="false"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.op_GreaterThanOrEqual(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Checks if <paramref name="a"/> is greater than or equal to <paramref name="b"/>.
            </summary>
            <param name="a">The first version to compare.</param>
            <param name="b">The second version to compare.</param>
            <returns><see langword="true"/> if <paramref name="a"/> is greater than or equal to <paramref name="b"/>, <see langword="false"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.op_LessThanOrEqual(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Checks if <paramref name="a"/> is less than or equal to <paramref name="b"/>.
            </summary>
            <param name="a">The first version to compare.</param>
            <param name="b">The second version to compare.</param>
            <returns><see langword="true"/> if <paramref name="a"/> is less than or equal to <paramref name="b"/>, <see langword="false"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.Max(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Determines the maximum of two versions.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>The maximum of <paramref name="a"/> and <paramref name="b"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.Min(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Determines the minimum of two versions.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>The minimum of <paramref name="a"/> and <paramref name="b"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.Equals(System.Object)">
            <summary>
            Compares <see langword="this"/> version to <paramref name="obj"/> for equality.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns><see langword="true"/> if they are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.Version.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Hive.Versioning.Version"/>.
            </summary>
            <returns>The hash code for this <see cref="T:Hive.Versioning.Version"/>.</returns>
        </member>
        <member name="M:Hive.Versioning.Version.Equals(Hive.Versioning.Version)">
            <summary>
            Compares this version to another version according to the SemVer specification.
            </summary>
            <param name="other">The version to compare to.</param>
            <returns><see langword="true"/> if the versions are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.Version.CompareTo(Hive.Versioning.Version)">
            <summary>
            Compares this version to another version according to the SemVer specification.
            </summary>
            <param name="other">The version to compare to.</param>
            <returns>Less than zero if <see langword="this"/> is less than <paramref name="other"/>, zero if they are equal, and
            more than zero if <see langword="this"/> is greater than <paramref name="other"/></returns>
        </member>
        <member name="M:Hive.Versioning.Version.Parse(Hive.Utilities.StringView)">
            <summary>
            Parses a sequence of characters into a <see cref="T:Hive.Versioning.Version"/> object.
            </summary>
            <param name="text">The sequence of characters to parse.</param>
            <returns>The parsed version object.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="text"/> is not a valid SemVer version.</exception>
        </member>
        <member name="M:Hive.Versioning.Version.TryParse(Hive.Utilities.StringView,Hive.Versioning.Version@)">
            <summary>
            Attempts to parse a sequence of characters into a version object.
            </summary>
            <param name="text">The sequence of characters to parse.</param>
            <param name="version">The parsed version, if the input is valid.</param>
            <returns><see langword="true"/> if the text is valid and could be parsed, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.Version.TryParse(Hive.Utilities.StringView@,Hive.Versioning.Version@)">
            <summary>
            Attempts to parse a sequence of characters into a version object, as part of a larger parse.
            </summary>
            <remarks>
            When this method returns, <paramref name="text"/> will begin after the end of the parsed version, if it is present, or
            what it initially contained if no version is present and this returns <see langword="false"/>
            </remarks>
            <param name="text">The sequence of characters to parse.</param>
            <param name="version">The parsed version, if the input is valid.</param>
            <returns><see langword="true"/> if the text is valid and could be parsed, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Hive.Versioning.VersionRange">
            <summary>
            An arbitrary range of <see cref="T:Hive.Versioning.Version"/>s, capable of matching any possible set of <see cref="T:Hive.Versioning.Version"/>s.
            </summary>
        </member>
        <member name="M:Hive.Versioning.VersionRange.VersionComparer.Matches(Hive.Versioning.VersionRange.VersionComparer@)">
            <remarks>
            A <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> is considered matching if it is exactly equivalent to this one, in addition to if its comparison
            value matches.
            </remarks>
        </member>
        <member name="M:Hive.Versioning.VersionRange.VersionComparer.ToExactEqualSubrange">
            <summary>
            Converts this <see cref="F:Hive.Versioning.VersionRange.ComparisonType.ExactEqual"/> <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> to an equivalent <see cref="T:Hive.Versioning.VersionRange.Subrange"/>.
            </summary>
            <remarks>
            The returned <see cref="T:Hive.Versioning.VersionRange.Subrange"/> always takes the form <c>&gt;=Version &lt;=Version</c>.
            </remarks>
            <returns>The <see cref="T:Hive.Versioning.VersionRange.Subrange"/> that is equivalent to this <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/></returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.VersionComparer.Invert(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.Subrange@)">
            <summary>
            Inverts this <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> into either another <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> or a <see cref="T:Hive.Versioning.VersionRange.Subrange"/>.
            </summary>
            <remarks>
            The only time this produces a <see cref="T:Hive.Versioning.VersionRange.Subrange"/> is when <see cref="F:Hive.Versioning.VersionRange.VersionComparer.Type"/> is <see cref="F:Hive.Versioning.VersionRange.ComparisonType.ExactEqual"/>.
            </remarks>
            <param name="comparer">The inverted <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/>, if any.</param>
            <param name="range">The <see cref="T:Hive.Versioning.VersionRange.Subrange"/> representing this <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> inverted, if any.</param>
            <returns><see cref="F:Hive.Versioning.VersionRange.CombineResult.OneSubrange"/> if this produces a <see cref="T:Hive.Versioning.VersionRange.Subrange"/>, or <see cref="F:Hive.Versioning.VersionRange.CombineResult.OneComparer"/>
            if it produces a <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/>.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.VersionComparer.TryConjunction(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.Subrange@)">
            <summary>
            Tries to perform a logical conjunction (and) with <paramref name="other"/>.
            </summary>
            <remarks>
            This method will only return one of the following values:
            <list type="table">
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.OneComparer"/></term>
                    <description>A single <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> was produced, and <paramref name="comparer"/> was set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.OneSubrange"/></term>
                    <description>A single <see cref="T:Hive.Versioning.VersionRange.Subrange"/> was produced, and <paramref name="range"/> was set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.Nothing"/></term>
                    <description>The conjunction result matches no possible values.</description>
                </item>
            </list>
            </remarks>
            <param name="other">The other <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> to try to perform conjunction with.</param>
            <param name="comparer">The single <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> the operation produced, if any.</param>
            <param name="range">The single <see cref="T:Hive.Versioning.VersionRange.Subrange"/> the operation produced, if any.</param>
            <returns>A <see cref="T:Hive.Versioning.VersionRange.CombineResult"/> indicating which of the outputs were set, if any.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.VersionComparer.TryConjunctionEqualPart(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.CombineResult@)">
            <summary>
            A part of the implementation of <see cref="M:Hive.Versioning.VersionRange.VersionComparer.TryConjunction(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.Subrange@)"/> that handles
            the cases where exactly one of the inputs are an <see cref="F:Hive.Versioning.VersionRange.ComparisonType.ExactEqual"/> comparer.
            </summary>
        </member>
        <member name="M:Hive.Versioning.VersionRange.VersionComparer.TryDisjunction(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.Subrange@)">
            <summary>
            Tries to perform a logical disjunction (or) with <paramref name="other"/>.
            </summary>
            <remarks>
            This method will only return one of the following values:
            <list type="table">
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.OneComparer"/></term>
                    <description>A single <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> was produced, and <paramref name="comparer"/> was set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.OneSubrange"/></term>
                    <description>A single <see cref="T:Hive.Versioning.VersionRange.Subrange"/> was produced, and <paramref name="range"/> was set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.Everything"/></term>
                    <description>The disjunction result matches every valid value. For convenience,
                        <paramref name="range"/> is set to <see cref="F:Hive.Versioning.VersionRange.Subrange.Everything"/>.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.Unrepresentable"/></term>
                    <description>The disjunction result is not representable with only a <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> and a <see cref="T:Hive.Versioning.VersionRange.Subrange"/>.
                        For example, if the inputs are non-equal <see cref="F:Hive.Versioning.VersionRange.ComparisonType.ExactEqual"/> comparers, this will be returned.</description>
                </item>
            </list>
            </remarks>
            <param name="other">The other <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> to try to perform disjunction with.</param>
            <param name="comparer">The single <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/> the operation produced, if any.</param>
            <param name="range">The single <see cref="T:Hive.Versioning.VersionRange.Subrange"/> the operation produced, if any.</param>
            <returns>A <see cref="T:Hive.Versioning.VersionRange.CombineResult"/> indicating which of the outputs were set, if any.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.VersionComparer.TryDisjunctionEqualPart(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.CombineResult@)">
            <summary>
            A part of the implementation of <see cref="M:Hive.Versioning.VersionRange.VersionComparer.TryDisjunction(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.Subrange@)"/> that handles
            the cases where exactly one of the inputs are an <see cref="F:Hive.Versioning.VersionRange.ComparisonType.ExactEqual"/> comparer.
            </summary>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Subrange.Matches(Hive.Versioning.VersionRange.VersionComparer@)">
            <remarks>
            This is identical to <see cref="M:Hive.Versioning.VersionRange.Subrange.Matches(Hive.Versioning.Version)"/> except that it uses <see cref="M:Hive.Versioning.VersionRange.VersionComparer.Matches(Hive.Versioning.VersionRange.VersionComparer@)"/>
            instead of <see cref="M:Hive.Versioning.VersionRange.VersionComparer.Matches(Hive.Versioning.Version)"/>.
            </remarks>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Subrange.TryConjunction(Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@)">
            <summary>
            Tries to perform a logical conjunction (and) with <paramref name="other"/>.
            </summary>
            <remarks>
            This method will only return one of the following values:
            <list type="table">
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.OneSubrange"/></term>
                    <description>A single <see cref="T:Hive.Versioning.VersionRange.Subrange"/> was produced, and <paramref name="result"/> was set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.TwoSubranges"/></term>
                    <description>Two <see cref="T:Hive.Versioning.VersionRange.Subrange"/>s were produced, and both <paramref name="result"/> and <paramref name="result2"/> were set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.Nothing"/></term>
                    <description>The conjunction result matches no valid values.</description>
                </item>
            </list>
            </remarks>
            <param name="other">The other <see cref="T:Hive.Versioning.VersionRange.Subrange"/> to try to perform conjunction with.</param>
            <param name="result">The single (or first) <see cref="T:Hive.Versioning.VersionRange.Subrange"/> the operation produced, if any.</param>
            <param name="result2">The second <see cref="T:Hive.Versioning.VersionRange.Subrange"/> the operation produced, if any.</param>
            <returns>A <see cref="T:Hive.Versioning.VersionRange.CombineResult"/> indicating which of the outputs were set, if any.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Subrange.TryConjunctionOneInwardPart(Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.CombineResult@)">
            <remarks>
            A part of the implementation of <see cref="M:Hive.Versioning.VersionRange.Subrange.TryConjunction(Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@)"/>, handling the cases where exactly one
            input is an inward-facing <see cref="T:Hive.Versioning.VersionRange.Subrange"/>.
            </remarks>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Subrange.TryDisjunction(Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@)">
            <summary>
            Tries to perform a logical disjunction (or) with <paramref name="other"/>.
            </summary>
            <remarks>
            This method will only return one of the following values:
            <list type="table">
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.OneSubrange"/></term>
                    <description>A single <see cref="T:Hive.Versioning.VersionRange.Subrange"/> was produced, and <paramref name="result"/> was set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.TwoSubranges"/></term>
                    <description>Two <see cref="T:Hive.Versioning.VersionRange.Subrange"/>s were produced, and both <paramref name="result"/> and <paramref name="result2"/> were set.</description>
                </item>
                <item>
                    <term><see cref="F:Hive.Versioning.VersionRange.CombineResult.Everything"/></term>
                    <description>The disjunction result matches every valid value. For convenience,
                        <paramref name="result"/> is set to <see cref="F:Hive.Versioning.VersionRange.Subrange.Everything"/>.</description>
                </item>
            </list>
            </remarks>
            <param name="other">The other <see cref="T:Hive.Versioning.VersionRange.Subrange"/> to try to perform disjunction with.</param>
            <param name="result">The single (or first) <see cref="T:Hive.Versioning.VersionRange.Subrange"/> the operation produced, if any.</param>
            <param name="result2">The second <see cref="T:Hive.Versioning.VersionRange.Subrange"/> the operation produced, if any.</param>
            <returns>A <see cref="T:Hive.Versioning.VersionRange.CombineResult"/> indicating which of the outputs were set, if any.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Subrange.TryDisjunctionOneInwardPart(Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.CombineResult@)">
            <remarks>
            A part of the implementation of <see cref="M:Hive.Versioning.VersionRange.Subrange.TryDisjunction(Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@,Hive.Versioning.VersionRange.Subrange@)"/>, handling the cases where exactly one
            input is an inward-facing <see cref="T:Hive.Versioning.VersionRange.Subrange"/>.
            </remarks>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Subrange.TestExactMeeting(Hive.Versioning.VersionRange.VersionComparer@,Hive.Versioning.VersionRange.VersionComparer@)">
            <summary>
            Checks if two <see cref="T:Hive.Versioning.VersionRange.VersionComparer"/>s are mutually exclusive, but meet exactly leaving no versions that neither matches.
            </summary>
        </member>
        <member name="M:Hive.Versioning.VersionRange.#ctor(Hive.Utilities.StringView)">
            <summary>
            Constructs a new <see cref="T:Hive.Versioning.VersionRange"/> that corresponds to the text provided in <paramref name="text"/>.
            </summary>
            <param name="text">The textual represenation of the <see cref="T:Hive.Versioning.VersionRange"/> to create.</param>
            <seealso cref="M:Hive.Versioning.VersionRange.TryParse(Hive.Utilities.StringView@,Hive.Versioning.VersionRange@)"/>
            <exception cref="T:System.ArgumentException">Thrown when<paramref name="text"/> is not a valid <see cref="T:Hive.Versioning.VersionRange"/>.</exception>
        </member>
        <member name="M:Hive.Versioning.VersionRange.ForVersion(Hive.Versioning.Version)">
            <summary>
            Creates a <see cref="T:Hive.Versioning.VersionRange"/> which matches only the provided <paramref name="version"/>.
            </summary>
            <param name="version">The <see cref="T:Hive.Versioning.Version"/> to match.</param>
            <returns>A <see cref="T:Hive.Versioning.VersionRange"/> matching only the provided <paramref name="version"/>.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Disjunction(Hive.Versioning.VersionRange)">
            <summary>
            Computes the logical disjunction (or) of this <see cref="T:Hive.Versioning.VersionRange"/> and <paramref name="other"/>.
            </summary>
            <param name="other">The other <see cref="T:Hive.Versioning.VersionRange"/> to compute the disjunction of.</param>
            <returns>The logical disjunction of <see langword="this"/> and <paramref name="other"/>.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.op_BitwiseOr(Hive.Versioning.VersionRange,Hive.Versioning.VersionRange)"/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.op_BitwiseOr(Hive.Versioning.VersionRange,Hive.Versioning.VersionRange)">
            <summary>
            Computes the logical disjunction (or) of the two arguments.
            </summary>
            <param name="a">The first argument.</param>
            <param name="b">The second argument.</param>
            <returns>The logical disjunction of <paramref name="a"/> and <paramref name="b"/>.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.Disjunction(Hive.Versioning.VersionRange)"/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Conjunction(Hive.Versioning.VersionRange)">
            <summary>
            Computes the logical conjunction (and) of this <see cref="T:Hive.Versioning.VersionRange"/> and <paramref name="other"/>.
            </summary>
            <param name="other">The other <see cref="T:Hive.Versioning.VersionRange"/> to compute the conjunction of.</param>
            <returns>The logical conjunction of <see langword="this"/> and <paramref name="other"/>.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.op_BitwiseAnd(Hive.Versioning.VersionRange,Hive.Versioning.VersionRange)"/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.op_BitwiseAnd(Hive.Versioning.VersionRange,Hive.Versioning.VersionRange)">
            <summary>
            Computes the logical conjunction (and) of the two arguments.
            </summary>
            <param name="a">The first argument.</param>
            <param name="b">The second argument.</param>
            <returns>The logical conjunction of <paramref name="a"/> and <paramref name="b"/>.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.Conjunction(Hive.Versioning.VersionRange)"/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Invert">
            <summary>
            Gets the compliement of this <see cref="T:Hive.Versioning.VersionRange"/>.
            </summary>
            <returns>The compliement of this <see cref="T:Hive.Versioning.VersionRange"/>.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.op_OnesComplement(Hive.Versioning.VersionRange)"/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.op_OnesComplement(Hive.Versioning.VersionRange)">
            <summary>
            Computes the compliment of the argument.
            </summary>
            <param name="r">The <see cref="T:Hive.Versioning.VersionRange"/> to compute the compliment of.</param>
            <returns>The compliment of <paramref name="r"/>.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.Invert"/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Matches(Hive.Versioning.Version)">
            <summary>
            Determines whether or not a given <see cref="T:Hive.Versioning.Version"/> matches this <see cref="T:Hive.Versioning.VersionRange"/>.
            </summary>
            <param name="version">The <see cref="T:Hive.Versioning.Version"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="version"/> matches, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Hive.Versioning.VersionRange.Everything">
            <summary>
            The <see cref="T:Hive.Versioning.VersionRange"/> that matches all <see cref="T:Hive.Versioning.Version"/>s.
            </summary>
        </member>
        <member name="P:Hive.Versioning.VersionRange.Nothing">
            <summary>
            The <see cref="T:Hive.Versioning.VersionRange"/> that matches no <see cref="T:Hive.Versioning.Version"/>s.
            </summary>
        </member>
        <member name="M:Hive.Versioning.VersionRange.ToString(System.Text.StringBuilder)">
            <summary>
            Appends the string representation of this <see cref="T:Hive.Versioning.VersionRange"/> to the provided <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to.</param>
            <returns>The <see cref="T:System.Text.StringBuilder"/> that was appended to.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.ToString">
            <summary>
            Gets the string representation of this <see cref="T:Hive.Versioning.VersionRange"/>.
            </summary>
            <returns>The string representation of this <see cref="T:Hive.Versioning.VersionRange"/>.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Equals(Hive.Versioning.VersionRange)">
            <summary>
            Determines whether this <see cref="T:Hive.Versioning.VersionRange"/> is equivalent to another range.
            </summary>
            <param name="other">The <see cref="T:Hive.Versioning.VersionRange"/> to compare to.</param>
            <returns><see langword="true"/> if they are equivalent, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Hive.Versioning.VersionRange.op_Equality(Hive.Versioning.VersionRange,Hive.Versioning.VersionRange)">
            <summary>
            Compares two <see cref="T:Hive.Versioning.VersionRange"/>s for equality.
            </summary>
            <param name="a">The first argument.</param>
            <param name="b">The second argument.</param>
            <returns><see langword="true"/> if <paramref name="b"/> and <paramref name="b"/> are equivalent, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.op_Inequality(Hive.Versioning.VersionRange,Hive.Versioning.VersionRange)">
            <summary>
            Determines if two <see cref="T:Hive.Versioning.VersionRange"/>s are not equivalent.
            </summary>
            <param name="a">The first argument.</param>
            <param name="b">The second argument.</param>
            <returns><see langword="true"/> if <paramref name="b"/> and <paramref name="b"/> are not equivalent, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Hive.Versioning.VersionRange.Parse(Hive.Utilities.StringView)">
            <summary>
            Parses a string as a <see cref="T:Hive.Versioning.VersionRange" />.
            </summary>
            <remarks>
            <para>
        A valid <see cref="T:Hive.Versioning.VersionRange" /> string is made up of a set of disjoint regions joined by <c>||</c>. 
        These regions can be either bounded or unbounded.
        <br />A bounded region is a pair of unbounded regions separated by whitespace, such that both unbounded regions overlap, 
        and the unbounded region whose written value is lower comes first.
        <br />An unbounded region is any valid <see cref="T:Hive.Versioning.Version" /> prefixed with one of the following comparison operators:
      </para><list type="table">
        <item>
          <term><c>&gt;=</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> greater than or equal to its specified<see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&lt;=</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> less than or equal to its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&gt;</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> greater than its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&lt;</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> less than its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>=</c></term>
          <description>
            The range matches only the <see cref="T:Hive.Versioning.Version" /> that it is specified with.
          </description>
        </item>
      </list><para>Note that unbounded ranges using the <c>=</c> comparison operator cannot be part of a bounded region.</para><para>Additionally, there are the following shorthand comparison operators that expand to bounded regions:</para><list type="table">
        <item>
          <term><c>^</c></term>
          <description>
            The bounded range matches all versions greater than or equal to its specified <see cref="T:Hive.Versioning.Version" /> and less than the next major incremented
            version. For example, <c>^1.5.4</c> would be equivalent to the bounded range <c>&gt;=1.5.4 &lt;2.0.0</c>, while <c>^0.4.2</c> would be equivalent
            to <c>&gt;=0.4.2 &lt;0.5.0</c>.
          </description>
        </item>
      </list><para>There are also a few special ranges:</para><list type="table">
        <item>
          <term><c>*</c></term>
          <description>
            The <see cref="P:Hive.Versioning.VersionRange.Everything" /> range. This range matches every possible version.
          </description>
        </item>
        <item>
          <term><c>z</c> or <c>Z</c></term>
          <description>
            The <see cref="P:Hive.Versioning.VersionRange.Nothing" /> range. This range matches nothing.
          </description>
        </item>
      </list><para>
        A bounded region may also be specified using star syntax. This takes the form of either a single <c>*</c> alone, matching any version,
        or a version with some numbers substituted with an asterisk. Once an element has been substituted, however, any following elements must
        either not be present or be a star themselves. Prereleases and build ids cannot be specified when using star syntax. For example,
        <c>*</c> is valid, <c>*.3</c> is not. <c>1.*</c> and <c>1.*.*</c> are valid (and equivalent), but <c>1.*.2</c> is not. <c>1.2.*</c> is
        valid, but <c>1.2.*-pre.1</c> is not. Importantly, <c>*.*.*</c> or anything similar is also not valid. Just use <c>*</c>. In all cases
        except the singular <c>*</c>, any <c>*</c> may also be an <c>x</c> or <c>X</c>.
      </para><para>
        A bounded regioon may also be specified using hyphen syntax, though it is generally not recommended, as it is not always clear to a reader
        what exactly is meant, and is remarkably easy to mess up. The syntax for this is <c>1.2.3 - 4.5.6</c>, of course substituting <c>1.2.3</c>
        and <c>4.5.6</c> with any valid version. The space before is <b>required</b>. This is important. the space <i>after the first version,
        before the hyphen, is</i> <b>required</b>. This is because <c>1.2.3-4.5.6</c> is a valid, and <i>complete</i>, version, causing the parser
        to try to read the first version in the hyphen range, then hit the end of input instead of a hyphen and back out, eventually rejecting the
        range altogether, because <b>a version by itself is not a valid version range</b>. <c>1.2.3- 4.5.6</c> is also not valid, because it
        is an <i>incomplete</i> version followed by a complete, simple version. Since incomplete versions are rejected, it means that this attempts
        to parse a first version, fails, and tries other forms a range can take before eventually failing out.
      </para>
            </remarks>
            <param name="text">The string to parse.</param>
            <returns>The parsed <see cref="T:Hive.Versioning.VersionRange" />.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.TryParse(Hive.Utilities.StringView,Hive.Versioning.VersionRange@)" />
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="text" /> is not a valid <see cref="T:Hive.Versioning.VersionRange" />.</exception>
        </member>
        <member name="M:Hive.Versioning.VersionRange.TryParse(Hive.Utilities.StringView,Hive.Versioning.VersionRange@)">
            <summary>
            Attempts to parse a whole string as a <see cref="T:Hive.Versioning.VersionRange" />.
            </summary>
            <remarks>
            <para>
        A valid <see cref="T:Hive.Versioning.VersionRange" /> string is made up of a set of disjoint regions joined by <c>||</c>. 
        These regions can be either bounded or unbounded.
        <br />A bounded region is a pair of unbounded regions separated by whitespace, such that both unbounded regions overlap, 
        and the unbounded region whose written value is lower comes first.
        <br />An unbounded region is any valid <see cref="T:Hive.Versioning.Version" /> prefixed with one of the following comparison operators:
      </para><list type="table">
        <item>
          <term><c>&gt;=</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> greater than or equal to its specified<see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&lt;=</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> less than or equal to its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&gt;</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> greater than its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&lt;</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> less than its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>=</c></term>
          <description>
            The range matches only the <see cref="T:Hive.Versioning.Version" /> that it is specified with.
          </description>
        </item>
      </list><para>Note that unbounded ranges using the <c>=</c> comparison operator cannot be part of a bounded region.</para><para>Additionally, there are the following shorthand comparison operators that expand to bounded regions:</para><list type="table">
        <item>
          <term><c>^</c></term>
          <description>
            The bounded range matches all versions greater than or equal to its specified <see cref="T:Hive.Versioning.Version" /> and less than the next major incremented
            version. For example, <c>^1.5.4</c> would be equivalent to the bounded range <c>&gt;=1.5.4 &lt;2.0.0</c>, while <c>^0.4.2</c> would be equivalent
            to <c>&gt;=0.4.2 &lt;0.5.0</c>.
          </description>
        </item>
      </list><para>There are also a few special ranges:</para><list type="table">
        <item>
          <term><c>*</c></term>
          <description>
            The <see cref="P:Hive.Versioning.VersionRange.Everything" /> range. This range matches every possible version.
          </description>
        </item>
        <item>
          <term><c>z</c> or <c>Z</c></term>
          <description>
            The <see cref="P:Hive.Versioning.VersionRange.Nothing" /> range. This range matches nothing.
          </description>
        </item>
      </list><para>
        A bounded region may also be specified using star syntax. This takes the form of either a single <c>*</c> alone, matching any version,
        or a version with some numbers substituted with an asterisk. Once an element has been substituted, however, any following elements must
        either not be present or be a star themselves. Prereleases and build ids cannot be specified when using star syntax. For example,
        <c>*</c> is valid, <c>*.3</c> is not. <c>1.*</c> and <c>1.*.*</c> are valid (and equivalent), but <c>1.*.2</c> is not. <c>1.2.*</c> is
        valid, but <c>1.2.*-pre.1</c> is not. Importantly, <c>*.*.*</c> or anything similar is also not valid. Just use <c>*</c>. In all cases
        except the singular <c>*</c>, any <c>*</c> may also be an <c>x</c> or <c>X</c>.
      </para><para>
        A bounded regioon may also be specified using hyphen syntax, though it is generally not recommended, as it is not always clear to a reader
        what exactly is meant, and is remarkably easy to mess up. The syntax for this is <c>1.2.3 - 4.5.6</c>, of course substituting <c>1.2.3</c>
        and <c>4.5.6</c> with any valid version. The space before is <b>required</b>. This is important. the space <i>after the first version,
        before the hyphen, is</i> <b>required</b>. This is because <c>1.2.3-4.5.6</c> is a valid, and <i>complete</i>, version, causing the parser
        to try to read the first version in the hyphen range, then hit the end of input instead of a hyphen and back out, eventually rejecting the
        range altogether, because <b>a version by itself is not a valid version range</b>. <c>1.2.3- 4.5.6</c> is also not valid, because it
        is an <i>incomplete</i> version followed by a complete, simple version. Since incomplete versions are rejected, it means that this attempts
        to parse a first version, fails, and tries other forms a range can take before eventually failing out.
      </para>
            </remarks>
            <param name="text">The string to try to parse.</param>
            <param name="range">The parsed <see cref="T:Hive.Versioning.VersionRange" />, if any.</param>
            <returns><see langword="true" /> if <paramref name="text" /> was successfully parsed, <see langword="false" /> otherwise.</returns>
            <seealso cref="M:Hive.Versioning.VersionRange.TryParse(Hive.Utilities.StringView@,Hive.Versioning.VersionRange@)" />
        </member>
        <member name="M:Hive.Versioning.VersionRange.TryParse(Hive.Utilities.StringView@,Hive.Versioning.VersionRange@)">
            <summary>
            Attempts to parse a <see cref="T:Hive.Versioning.VersionRange" /> from the start of the string.
            </summary>
            <remarks>
            <para>When this returns <see langword="true" />, <paramref name="text" /> will begin immediately after the parsed <see cref="T:Hive.Versioning.VersionRange" />.
            When this returns <see langword="false" />, <paramref name="text" /> will remain unchanged.</para>
            <para>
        A valid <see cref="T:Hive.Versioning.VersionRange" /> string is made up of a set of disjoint regions joined by <c>||</c>. 
        These regions can be either bounded or unbounded.
        <br />A bounded region is a pair of unbounded regions separated by whitespace, such that both unbounded regions overlap, 
        and the unbounded region whose written value is lower comes first.
        <br />An unbounded region is any valid <see cref="T:Hive.Versioning.Version" /> prefixed with one of the following comparison operators:
      </para><list type="table">
        <item>
          <term><c>&gt;=</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> greater than or equal to its specified<see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&lt;=</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> less than or equal to its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&gt;</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> greater than its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>&lt;</c></term>
          <description>
            The unbounded range matches any <see cref="T:Hive.Versioning.Version" /> less than its specified <see cref="T:Hive.Versioning.Version" />.
          </description>
        </item>
        <item>
          <term><c>=</c></term>
          <description>
            The range matches only the <see cref="T:Hive.Versioning.Version" /> that it is specified with.
          </description>
        </item>
      </list><para>Note that unbounded ranges using the <c>=</c> comparison operator cannot be part of a bounded region.</para><para>Additionally, there are the following shorthand comparison operators that expand to bounded regions:</para><list type="table">
        <item>
          <term><c>^</c></term>
          <description>
            The bounded range matches all versions greater than or equal to its specified <see cref="T:Hive.Versioning.Version" /> and less than the next major incremented
            version. For example, <c>^1.5.4</c> would be equivalent to the bounded range <c>&gt;=1.5.4 &lt;2.0.0</c>, while <c>^0.4.2</c> would be equivalent
            to <c>&gt;=0.4.2 &lt;0.5.0</c>.
          </description>
        </item>
      </list><para>There are also a few special ranges:</para><list type="table">
        <item>
          <term><c>*</c></term>
          <description>
            The <see cref="P:Hive.Versioning.VersionRange.Everything" /> range. This range matches every possible version.
          </description>
        </item>
        <item>
          <term><c>z</c> or <c>Z</c></term>
          <description>
            The <see cref="P:Hive.Versioning.VersionRange.Nothing" /> range. This range matches nothing.
          </description>
        </item>
      </list><para>
        A bounded region may also be specified using star syntax. This takes the form of either a single <c>*</c> alone, matching any version,
        or a version with some numbers substituted with an asterisk. Once an element has been substituted, however, any following elements must
        either not be present or be a star themselves. Prereleases and build ids cannot be specified when using star syntax. For example,
        <c>*</c> is valid, <c>*.3</c> is not. <c>1.*</c> and <c>1.*.*</c> are valid (and equivalent), but <c>1.*.2</c> is not. <c>1.2.*</c> is
        valid, but <c>1.2.*-pre.1</c> is not. Importantly, <c>*.*.*</c> or anything similar is also not valid. Just use <c>*</c>. In all cases
        except the singular <c>*</c>, any <c>*</c> may also be an <c>x</c> or <c>X</c>.
      </para><para>
        A bounded regioon may also be specified using hyphen syntax, though it is generally not recommended, as it is not always clear to a reader
        what exactly is meant, and is remarkably easy to mess up. The syntax for this is <c>1.2.3 - 4.5.6</c>, of course substituting <c>1.2.3</c>
        and <c>4.5.6</c> with any valid version. The space before is <b>required</b>. This is important. the space <i>after the first version,
        before the hyphen, is</i> <b>required</b>. This is because <c>1.2.3-4.5.6</c> is a valid, and <i>complete</i>, version, causing the parser
        to try to read the first version in the hyphen range, then hit the end of input instead of a hyphen and back out, eventually rejecting the
        range altogether, because <b>a version by itself is not a valid version range</b>. <c>1.2.3- 4.5.6</c> is also not valid, because it
        is an <i>incomplete</i> version followed by a complete, simple version. Since incomplete versions are rejected, it means that this attempts
        to parse a first version, fails, and tries other forms a range can take before eventually failing out.
      </para>
            </remarks>
            <param name="text">The string to try to parse.</param>
            <param name="range">The parsed <see cref="T:Hive.Versioning.VersionRange" />, if any.</param>
            <returns><see langword="true" /> if <paramref name="text" /> was successfully parsed, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="P:Hive.Versioning.Resources.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Resources.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Resources.SR.AssertionFailed">
            <summary>
            Gets a resource string for AssertionFailed similar to ''.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Resources.SR.Range_InputInvalid">
            <summary>
            Gets a resource string for Range_InputInvalid similar to 'Input is not a valid VersionRange'.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Resources.SR.Version_InputInvalid">
            <summary>
            Gets a resource string for Version_InputInvalid similar to 'Input was not a valid SemVer version'.
            </summary>
        </member>
        <member name="P:Hive.Versioning.Resources.SR.Version_InputTooShort">
            <summary>
            Gets a resource string for Version_InputTooShort similar to 'Input too short to be a SemVer version'.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
            the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this
            value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
            <value>The return value condition. If the method returns this value, the
            associated parameter may be null.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter is not <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this
            value, the associated parameter is not null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
            <value>The return value condition. If the method returns this value, the
            associated parameter is not null.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
    </members>
</doc>
