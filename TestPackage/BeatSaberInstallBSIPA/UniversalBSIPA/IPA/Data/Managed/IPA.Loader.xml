<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IPA.Loader</name>
    </assembly>
    <members>
        <member name="T:IPA.AntiMalware.AntiMalwareEngine">
            <summary>
            Provides a way to access BSIPA's Anti-Malware engine.
            </summary>
            <see cref="P:IPA.AntiMalware.AntiMalwareEngine.Engine"/>
            <see cref="T:IPA.AntiMalware.IAntiMalware"/>
        </member>
        <member name="P:IPA.AntiMalware.AntiMalwareEngine.Engine">
            <summary>
            Gets the current Anti-Malware engine. 
            </summary>
        </member>
        <member name="T:IPA.AntiMalware.IAntiMalware">
            <summary>
            An Anti-Malware engine that can be used to scan and detect potentially harmful files.
            </summary>
        </member>
        <member name="M:IPA.AntiMalware.IAntiMalware.ScanFile(System.IO.FileInfo)">
            <summary>
            Scans a particular file for malware.
            </summary>
            <param name="file">The file to scan.</param>
            <returns>A <see cref="T:IPA.AntiMalware.ScanResult"/> indicating whether the file is safe or not.</returns>
        </member>
        <member name="M:IPA.AntiMalware.IAntiMalware.ScanData(System.Byte[],System.String)">
            <summary>
            Scans a particular in-memory blob for malware.
            </summary>
            <param name="data">The binary blob to scan.</param>
            <param name="contentName">The name of the content. If this is left <see langword="null"/>, one will be automatically generated.</param>
            <returns>A <see cref="T:IPA.AntiMalware.ScanResult"/> indicating whether the file is safe or not.</returns>
        </member>
        <member name="T:IPA.AntiMalware.ScanResult">
            <summary>
            The result of an Anti-Malware scan.
            </summary>
        </member>
        <member name="F:IPA.AntiMalware.ScanResult.KnownSafe">
            <summary>
            The object is known to be safe.
            </summary>
        </member>
        <member name="F:IPA.AntiMalware.ScanResult.NotDetected">
            <summary>
            No malware was detected, but it is not known to be safe.
            </summary>
        </member>
        <member name="F:IPA.AntiMalware.ScanResult.Detected">
            <summary>
            Malware was detected, and the content should not be executed.
            </summary>
        </member>
        <member name="F:IPA.AntiMalware.ScanResult.MaybeMalware">
            <summary>
            The malware engine returned a threat level less than the max, so this object may be dangerous.
            Proceed with caution.
            </summary>
        </member>
        <member name="T:IPA.Config.Config">
            <summary>
            An abstraction of a config file on disk, which handles synchronizing between a memory representation and the
            disk representation.
            </summary>
        </member>
        <member name="T:IPA.Config.Config.PreferAttribute">
            <summary>
            Specifies that a particular parameter is preferred to use a particular <see cref="T:IPA.Config.IConfigProvider" />. 
            If it is not available, also specifies backups. If none are available, the default is used.
            </summary>
        </member>
        <member name="P:IPA.Config.Config.PreferAttribute.PreferenceOrder">
            <summary>
            The order of preference for the config type. 
            </summary>
            <value>the list of config extensions in order of preference</value>
        </member>
        <member name="M:IPA.Config.Config.PreferAttribute.#ctor(System.String[])">
            <inheritdoc />
            <summary>
            Constructs the attribute with a specific preference list. Each entry is the extension without a '.'
            </summary>
            <param name="preference">The preferences in order of preference.</param>
        </member>
        <member name="T:IPA.Config.Config.NameAttribute">
            <summary>
            Specifies a preferred config name, instead of using the plugin's name.
            </summary>
        </member>
        <member name="P:IPA.Config.Config.NameAttribute.Name">
            <summary>
            The name to use for the config.
            </summary>
            <value>the name to use for the config</value>
        </member>
        <member name="M:IPA.Config.Config.NameAttribute.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Constructs the attribute with a specific name.
            </summary>
            <param name="name">the name to use for the config.</param>
        </member>
        <member name="M:IPA.Config.Config.Register``1">
            <summary>
            Registers a <see cref="T:IPA.Config.IConfigProvider"/> to use for configs.
            </summary>
            <typeparam name="T">the type to register</typeparam>
        </member>
        <member name="M:IPA.Config.Config.Register(System.Type)">
            <summary>
            Registers a <see cref="T:IPA.Config.IConfigProvider"/> to use for configs.
            </summary>
            <param name="type">the type to register</param>
        </member>
        <member name="M:IPA.Config.Config.GetConfigFor(System.String,System.String[])">
            <summary>
            Gets a <see cref="T:IPA.Config.Config"/> object using the specified list of preferred config types.
            </summary>
            <param name="configName">the name of the mod for this config</param>
            <param name="extensions">the preferred config types to try to get</param>
            <returns>a <see cref="T:IPA.Config.Config"/> using the requested format, or of type JSON.</returns>
        </member>
        <member name="P:IPA.Config.Config.Name">
            <summary>
            Gets the name associated with this <see cref="T:IPA.Config.Config"/> object.
            </summary>
        </member>
        <member name="P:IPA.Config.Config.Provider">
            <summary>
            Gets the <see cref="T:IPA.Config.IConfigProvider"/> associated with this <see cref="T:IPA.Config.Config"/> object.
            </summary>
        </member>
        <member name="M:IPA.Config.Config.SetStore(IPA.Config.IConfigStore)">
            <summary>
            Sets this object's <see cref="T:IPA.Config.IConfigStore"/>. Can only be called once.
            </summary>
            <param name="store">the <see cref="T:IPA.Config.IConfigStore"/> to add to this instance</param>
            <exception cref="T:System.InvalidOperationException">If this was called before.</exception>
        </member>
        <member name="M:IPA.Config.Config.LoadSync">
            <summary>
            Forces a synchronous load from disk.
            </summary>
        </member>
        <member name="M:IPA.Config.Config.LoadAsync">
            <summary>
            Forces an asynchronous load from disk.
            </summary>
        </member>
        <member name="M:IPA.Config.ConfigRuntime.Save(IPA.Config.Config)">
            <summary>
            this is synchronous, unlike <see cref="M:IPA.Config.ConfigRuntime.TriggerFileLoad(IPA.Config.Config)"/>
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:IPA.Config.ConfigRuntime.SaveAll">
            <summary>
            this is synchronous, unlike <see cref="M:IPA.Config.ConfigRuntime.TriggerLoadAll"/>
            </summary>
        </member>
        <member name="T:IPA.Config.Data.List">
            <summary>
            A list of <see cref="T:IPA.Config.Data.Value"/>s for serialization by an <see cref="T:IPA.Config.IConfigProvider"/>.
            Use <see cref="M:IPA.Config.Data.Value.List"/> or <see cref="M:IPA.Config.Data.Value.From(System.Collections.Generic.IEnumerable{IPA.Config.Data.Value})"/> to create.
            </summary>
        </member>
        <member name="P:IPA.Config.Data.List.Item(System.Int32)">
            <summary>
            Gets the value at the given index in this <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <param name="index">the index to retrieve the <see cref="T:IPA.Config.Data.Value"/> at</param>
            <returns>the <see cref="T:IPA.Config.Data.Value"/> at <paramref name="index"/></returns>
            <seealso cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>
        </member>
        <member name="P:IPA.Config.Data.List.Count">
            <summary>
            Gets the number of elements in the <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <seealso cref="P:System.Collections.Generic.ICollection`1.Count"/>
        </member>
        <member name="M:IPA.Config.Data.List.Add(IPA.Config.Data.Value)">
            <summary>
            Adds a <see cref="T:IPA.Config.Data.Value"/> to the end of this <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <param name="item">the <see cref="T:IPA.Config.Data.Value"/> to add</param>
            <seealso cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:IPA.Config.Data.List.AddRange(System.Collections.Generic.IEnumerable{IPA.Config.Data.Value})">
            <summary>
            Adds a range of <see cref="T:IPA.Config.Data.Value"/>s to the end of this <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <param name="vals">the range of <see cref="T:IPA.Config.Data.Value"/>s to add</param>
        </member>
        <member name="M:IPA.Config.Data.List.Clear">
            <summary>
            Clears the <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <seealso cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:IPA.Config.Data.List.Contains(IPA.Config.Data.Value)">
            <summary>
            Checks if the <see cref="T:IPA.Config.Data.List"/> contains a certian item.
            </summary>
            <param name="item">the <see cref="T:IPA.Config.Data.Value"/> to check for</param>
            <returns><see langword="true"/> if the item was founc, otherwise <see langword="false"/></returns>
            <seealso cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:IPA.Config.Data.List.CopyTo(IPA.Config.Data.Value[],System.Int32)">
            <summary>
            Copies the <see cref="T:IPA.Config.Data.Value"/>s in the <see cref="T:IPA.Config.Data.List"/> to the <see cref="T:System.Array"/> in <paramref name="array"/>.
            </summary>
            <param name="array">the <see cref="T:System.Array"/> to copy to</param>
            <param name="arrayIndex">the starting index to copy to</param>
            <seealso cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:IPA.Config.Data.List.GetEnumerator">
            <summary>
            Gets an enumerator to enumerate the <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for this <see cref="T:IPA.Config.Data.List"/></returns>
            <seealso cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:IPA.Config.Data.List.IndexOf(IPA.Config.Data.Value)">
            <summary>
            Gets the index that a given <see cref="T:IPA.Config.Data.Value"/> is in the <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <param name="item">the <see cref="T:IPA.Config.Data.Value"/> to search for</param>
            <returns>the index that the <paramref name="item"/> was at, or -1.</returns>
            <seealso cref="M:System.Collections.Generic.IList`1.IndexOf(`0)"/>
        </member>
        <member name="M:IPA.Config.Data.List.Insert(System.Int32,IPA.Config.Data.Value)">
            <summary>
            Inserts a <see cref="T:IPA.Config.Data.Value"/> at an index.
            </summary>
            <param name="index">the index to insert at</param>
            <param name="item">the <see cref="T:IPA.Config.Data.Value"/> to insert</param>
            <seealso cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>
        </member>
        <member name="M:IPA.Config.Data.List.Remove(IPA.Config.Data.Value)">
            <summary>
            Removes a <see cref="T:IPA.Config.Data.Value"/> from the <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <param name="item">the <see cref="T:IPA.Config.Data.Value"/> to remove</param>
            <returns><see langword="true"/> if the item was removed, <see langword="false"/> otherwise</returns>
            <seealso cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:IPA.Config.Data.List.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:IPA.Config.Data.Value"/> at an index.
            </summary>
            <param name="index">the index to remove a <see cref="T:IPA.Config.Data.Value"/> at</param>
            <seealso cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:IPA.Config.Data.List.ToString">
            <summary>
            Converts this <see cref="T:IPA.Config.Data.Value"/> into a human-readable format.
            </summary>
            <returns>a comma-seperated list of the result of <see cref="M:IPA.Config.Data.Value.ToString"/> wrapped in square brackets</returns>
        </member>
        <member name="T:IPA.Config.Data.Map">
            <summary>
            A ordered map of <see cref="T:System.String"/> to <see cref="T:IPA.Config.Data.Value"/> for serialization by an <see cref="T:IPA.Config.IConfigProvider"/>.
            Use <see cref="M:IPA.Config.Data.Value.Map"/> or <see cref="M:IPA.Config.Data.Value.From(System.Collections.Generic.IDictionary{System.String,IPA.Config.Data.Value})"/> to create.
            </summary>
        </member>
        <member name="P:IPA.Config.Data.Map.Item(System.String)">
            <summary>
            Accesses the <see cref="T:IPA.Config.Data.Value"/> at <paramref name="key"/> in the map.
            </summary>
            <param name="key">the key to get the value associated with</param>
            <returns>the value associated with the <paramref name="key"/></returns>
            <seealso cref="P:System.Collections.Generic.IDictionary`2.Item(`0)"/>
        </member>
        <member name="P:IPA.Config.Data.Map.Keys">
            <summary>
            Gets a collection of the keys for the <see cref="T:IPA.Config.Data.Map"/>.
            </summary>
            <seealso cref="P:System.Collections.Generic.IDictionary`2.Keys"/>
        </member>
        <member name="P:IPA.Config.Data.Map.Values">
            <summary>
            Gets a collection of the values in the <see cref="T:IPA.Config.Data.Map"/>.
            </summary>
            <remarks>
            Unlike all other iterables given by <see cref="T:IPA.Config.Data.Map"/>, this does <i>not</i>
            guarantee that order is maintained.
            </remarks>
            <seealso cref="P:System.Collections.Generic.IDictionary`2.Values"/>
        </member>
        <member name="P:IPA.Config.Data.Map.Count">
            <summary>
            Gets the number of key-value pairs in this <see cref="T:IPA.Config.Data.Map"/>.
            </summary>
            <seealso cref="P:System.Collections.Generic.ICollection`1.Count"/>
        </member>
        <member name="M:IPA.Config.Data.Map.Add(System.String,IPA.Config.Data.Value)">
            <summary>
            Adds a new <see cref="T:IPA.Config.Data.Value"/> with a given key.
            </summary>
            <param name="key">the key to put the value at</param>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to add</param>
            <seealso cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/>
        </member>
        <member name="M:IPA.Config.Data.Map.Clear">
            <summary>
            Clears the <see cref="T:IPA.Config.Data.Map"/> of its key-value pairs.
            </summary>
            <seealso cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:IPA.Config.Data.Map.ContainsKey(System.String)">
            <summary>
            Checks if the <see cref="T:IPA.Config.Data.Map"/> contains a given <paramref name="key"/>.
            </summary>
            <param name="key">the key to check for</param>
            <returns><see langword="true"/> if the key exists, otherwise <see langword="false"/></returns>
            <seealso cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)"/>
        </member>
        <member name="M:IPA.Config.Data.Map.GetEnumerator">
            <summary>
            Enumerates the <see cref="T:IPA.Config.Data.Map"/>'s key-value pairs.
            </summary>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerator`1"/> of key-value pairs in this <see cref="T:IPA.Config.Data.Map"/></returns>
            <seealso cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:IPA.Config.Data.Map.Remove(System.String)">
            <summary>
            Removes the object associated with a key in this <see cref="T:IPA.Config.Data.Map"/>.
            </summary>
            <param name="key">the key to remove</param>
            <returns><see langword="true"/> if the key existed, <see langword="false"/> otherwise</returns>
            <seealso cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)"/>
        </member>
        <member name="M:IPA.Config.Data.Map.TryGetValue(System.String,IPA.Config.Data.Value@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">the key of the value to get</param>
            <param name="value">the target location of the retrieved object</param>
            <returns><see langword="true"/> if the key was found and <paramref name="value"/> set, <see langword="false"/> otherwise</returns>
            <seealso cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:IPA.Config.Data.Map.ToString">
            <summary>
            Converts this <see cref="T:IPA.Config.Data.Value"/> into a human-readable format.
            </summary>
            <returns>a JSON-like set of key-value pairs</returns>
        </member>
        <member name="T:IPA.Config.Data.Text">
            <summary>
            A <see cref="P:IPA.Config.Data.Text.Value"/> representing a piece of text. The only reason this is not named 
            String is so that it doesn't conflict with <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:IPA.Config.Data.Text.Value">
            <summary>
            The actual value of this <see cref="T:IPA.Config.Data.Text"/> object.
            </summary>
        </member>
        <member name="M:IPA.Config.Data.Text.ToString">
            <summary>
            Converts this <see cref="T:IPA.Config.Data.Value"/> into a human-readable format.
            </summary>
            <returns>a quoted, unescaped string form of <see cref="P:IPA.Config.Data.Text.Value"/></returns>
        </member>
        <member name="T:IPA.Config.Data.Integer">
            <summary>
            A <see cref="P:IPA.Config.Data.Integer.Value"/> representing an integer. This may hold a <see cref="T:System.Int64"/>'s 
            worth of data.
            </summary>
        </member>
        <member name="P:IPA.Config.Data.Integer.Value">
            <summary>
            The actual value of the <see cref="T:IPA.Config.Data.Integer"/> object.
            </summary>
        </member>
        <member name="M:IPA.Config.Data.Integer.AsFloat">
            <summary>
            Coerces this <see cref="T:IPA.Config.Data.Integer"/> into a <see cref="T:IPA.Config.Data.FloatingPoint"/>.
            </summary>
            <returns>a <see cref="T:IPA.Config.Data.FloatingPoint"/> representing the closest approximation of <see cref="P:IPA.Config.Data.Integer.Value"/></returns>
        </member>
        <member name="M:IPA.Config.Data.Integer.ToString">
            <summary>
            Converts this <see cref="T:IPA.Config.Data.Value"/> into a human-readable format.
            </summary>
            <returns>the result of <c>Value.ToString()</c></returns>
        </member>
        <member name="T:IPA.Config.Data.FloatingPoint">
            <summary>
            A <see cref="P:IPA.Config.Data.FloatingPoint.Value"/> representing a floating point value. This may hold a 
            <see cref="T:System.Decimal"/>'s  worth of data.
            </summary>
        </member>
        <member name="P:IPA.Config.Data.FloatingPoint.Value">
            <summary>
            The actual value fo this <see cref="T:IPA.Config.Data.FloatingPoint"/> object.
            </summary>
        </member>
        <member name="M:IPA.Config.Data.FloatingPoint.AsInteger">
            <summary>
            Coerces this <see cref="T:IPA.Config.Data.FloatingPoint"/> into an <see cref="T:IPA.Config.Data.Integer"/>.
            </summary>
            <returns>a <see cref="T:IPA.Config.Data.Integer"/> representing the closest approximation of <see cref="P:IPA.Config.Data.FloatingPoint.Value"/></returns>
        </member>
        <member name="M:IPA.Config.Data.FloatingPoint.ToString">
            <summary>
            Converts this <see cref="T:IPA.Config.Data.Value"/> into a human-readable format.
            </summary>
            <returns>the result of <c>Value.ToString()</c></returns>
        </member>
        <member name="T:IPA.Config.Data.Boolean">
            <summary>
            A <see cref="P:IPA.Config.Data.Boolean.Value"/> representing a boolean value.
            </summary>
        </member>
        <member name="P:IPA.Config.Data.Boolean.Value">
            <summary>
            The actual value fo this <see cref="T:IPA.Config.Data.Boolean"/> object.
            </summary>
        </member>
        <member name="M:IPA.Config.Data.Boolean.ToString">
            <summary>
            Converts this <see cref="T:IPA.Config.Data.Value"/> into a human-readable format.
            </summary>
            <returns>the result of <c>Value.ToString().ToLower()</c></returns>
        </member>
        <member name="T:IPA.Config.Data.Value">
            <summary>
            A base value type for config data abstract representations, to be serialized with an
            <see cref="T:IPA.Config.IConfigProvider"/>. If a <see cref="T:IPA.Config.Data.Value"/> is <see langword="null"/>, then
            that represents just that: a <c>null</c> in whatever serialization is being used.
            Also contains factory functions for all derived types.
            </summary>
        </member>
        <member name="M:IPA.Config.Data.Value.ToString">
            <summary>
            Converts this <see cref="T:IPA.Config.Data.Value"/> into a human-readable format.
            </summary>
            <returns>a human-readable string containing the value provided</returns>
        </member>
        <member name="M:IPA.Config.Data.Value.Null">
            <summary>
            Creates a Null <see cref="T:IPA.Config.Data.Value"/>.
            </summary>
            <returns><see langword="null"/></returns>
        </member>
        <member name="M:IPA.Config.Data.Value.List">
            <summary>
            Creates an empty <see cref="M:IPA.Config.Data.Value.List"/>.
            </summary>
            <returns>an empty <see cref="M:IPA.Config.Data.Value.List"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Collections.Generic.IEnumerable{IPA.Config.Data.Value})"/>
        </member>
        <member name="M:IPA.Config.Data.Value.Map">
            <summary>
            Creates an empty <see cref="M:IPA.Config.Data.Value.Map"/>.
            </summary>
            <returns>an empty <see cref="M:IPA.Config.Data.Value.Map"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Collections.Generic.IDictionary{System.String,IPA.Config.Data.Value})"/>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,IPA.Config.Data.Value}})"/>
        </member>
        <member name="M:IPA.Config.Data.Value.From(System.String)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Value"/> representing a <see cref="T:System.String"/>.
            </summary>
            <param name="val">the value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.Text"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.Text(System.String)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.Text(System.String)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Text"/> object wrapping a <see cref="T:System.String"/>.
            </summary>
            <param name="val">the value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.Text"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.From(System.String)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.From(System.Int64)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Value"/> wrapping a <see cref="T:System.Int64"/>.
            </summary>
            <param name="val">the value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.Integer"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.Integer(System.Int64)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.Integer(System.Int64)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Integer"/> wrapping a <see cref="T:System.Int64"/>.
            </summary>
            <param name="val">the value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.Integer"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Int64)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.From(System.Decimal)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Value"/> wrapping a <see cref="T:System.Double"/>.
            </summary>
            <param name="val">the value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.FloatingPoint"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.Float(System.Decimal)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.Float(System.Decimal)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.FloatingPoint"/> wrapping a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="val">the value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.FloatingPoint"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Decimal)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.From(System.Boolean)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Value"/> wrapping a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="val">the  value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.Boolean"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.Bool(System.Boolean)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.Bool(System.Boolean)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Boolean"/> wrapping a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="val">the value to wrap</param>
            <returns>a <see cref="T:IPA.Config.Data.Boolean"/> wrapping <paramref name="val"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Boolean)"/>
        </member>
        <member name="M:IPA.Config.Data.Value.From(System.Collections.Generic.IEnumerable{IPA.Config.Data.Value})">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.List"/> holding the content of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            of <see cref="T:IPA.Config.Data.Value"/>.
            </summary>
            <param name="vals">the <see cref="T:IPA.Config.Data.Value"/>s to initialize the <see cref="T:IPA.Config.Data.List"/> with</param>
            <returns>a <see cref="T:IPA.Config.Data.List"/> containing the content of <paramref name="vals"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.List"/>
        </member>
        <member name="M:IPA.Config.Data.Value.From(System.Collections.Generic.IDictionary{System.String,IPA.Config.Data.Value})">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Map"/> holding the content of an <see cref="T:System.Collections.Generic.IDictionary`2"/>
            of <see cref="T:System.String"/> to <see cref="T:IPA.Config.Data.Value"/>.
            </summary>
            <param name="vals">the dictionary of <see cref="T:IPA.Config.Data.Value"/>s to initialize the <see cref="T:IPA.Config.Data.Map"/> wtih</param>
            <returns>a <see cref="T:IPA.Config.Data.Map"/> containing the content of <paramref name="vals"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.Map"/>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,IPA.Config.Data.Value}})"/>
        </member>
        <member name="M:IPA.Config.Data.Value.From(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,IPA.Config.Data.Value}})">
            <summary>
            Creates a new <see cref="T:IPA.Config.Data.Map"/> holding the content of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <see cref="T:System.String"/> to <see cref="T:IPA.Config.Data.Value"/>.
            </summary>
            <param name="vals">the enumerable of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of name to <see cref="T:IPA.Config.Data.Value"/></param>
            <returns>a <see cref="T:IPA.Config.Data.Map"/> containing the content of <paramref name="vals"/></returns>
            <seealso cref="M:IPA.Config.Data.Value.Map"/>
            <seealso cref="M:IPA.Config.Data.Value.From(System.Collections.Generic.IDictionary{System.String,IPA.Config.Data.Value})"/>
        </member>
        <member name="T:IPA.Config.IConfigProvider">
            <summary>
            An interface for configuration providers.
            </summary>
            <remarks>
            <para>
            Implementers must provide a default constructor. Do not assume that <see cref="T:System.IO.File"/> will ever be set for a given object.
            </para>
            <para>
            Implementers are expected to preserve the typing of values passed to <see cref="M:IPA.Config.IConfigProvider.Store(IPA.Config.Data.Value,System.IO.FileInfo)"/> when returned from <see cref="M:IPA.Config.IConfigProvider.Load(System.IO.FileInfo)"/>.
            The only exceptions to this are the numeric types, <see cref="T:IPA.Config.Data.Integer"/> and <see cref="T:IPA.Config.Data.FloatingPoint"/>, since they can be coerced
            to each other with <see cref="M:IPA.Config.Data.Integer.AsFloat"/> and <see cref="M:IPA.Config.Data.FloatingPoint.AsInteger"/> respectively. The provider <i>should</i>
            however store and recover <see cref="T:IPA.Config.Data.Integer"/> with as much precision as is possible. For example, a JSON provider may decide to
            decode all numbers that have an integral value, even if they were originally <see cref="T:IPA.Config.Data.FloatingPoint"/>, as <see cref="T:IPA.Config.Data.Integer"/>.
            This is reasonable, as <see cref="T:IPA.Config.Data.Integer"/> is more precise, particularly with larger values, than <see cref="T:IPA.Config.Data.FloatingPoint"/>.
            </para>
            </remarks>
        </member>
        <member name="P:IPA.Config.IConfigProvider.Extension">
            <summary>
            Gets the extension <i>without</i> a dot to use for files handled by this provider.
            </summary>
            <remarks>
            This must work immediately, and is used to generate the <see cref="T:System.IO.FileInfo"/> used to set
            <see cref="T:System.IO.File"/>.
            </remarks>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Store(IPA.Config.Data.Value,System.IO.FileInfo)">
            <summary>
            Stores the <see cref="T:IPA.Config.Data.Value"/> given to disk in the format specified.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to store</param>
            <param name="file">the file to write to</param>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Load(System.IO.FileInfo)">
            <summary>
            Loads a <see cref="T:IPA.Config.Data.Value"/> from disk in whatever format this provider provides
            and returns it.
            </summary>
            <param name="file">the file to read from</param>
            <returns>the <see cref="T:IPA.Config.Data.Value"/> loaded</returns>
        </member>
        <member name="T:IPA.Config.ConfigProvider">
            <summary>
            A wrapper for an <see cref="T:IPA.Config.IConfigProvider"/> and the <see cref="T:System.IO.FileInfo"/> to use with it.
            </summary>
        </member>
        <member name="M:IPA.Config.ConfigProvider.Store(IPA.Config.Data.Value)">
            <summary>
            Stores the <see cref="T:IPA.Config.Data.Value"/> given to disk in the format specified.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to store</param>
        </member>
        <member name="M:IPA.Config.ConfigProvider.Load">
            <summary>
            Loads a <see cref="T:IPA.Config.Data.Value"/> from disk in whatever format this provider provides
            and returns it.
            </summary>
            <returns>the <see cref="T:IPA.Config.Data.Value"/> loaded</returns>
        </member>
        <member name="T:IPA.Config.IConfigStore">
            <summary>
            A storage for a config structure.
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigStore.SyncObject">
            <summary>
            A synchronization object for the save thread to wait on for changes. 
            It should be signaled whenever the internal state of the object is changed.
            The writer will never signal this handle. 
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigStore.WriteSyncObject">
            <summary>
            A synchronization object for the load thread and accessors to maintain safe synchronization.
            Any readers should take a read lock with <see cref="M:System.Threading.ReaderWriterLockSlim.EnterReadLock"/> or
            <see cref="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock"/>, and any writers should take a 
            write lock with <see cref="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock"/>.
            </summary>
            <remarks>
            Read and write are read and write to *this object*, not to the file on disk.
            </remarks>
        </member>
        <member name="M:IPA.Config.IConfigStore.WriteTo(IPA.Config.ConfigProvider)">
            <summary>
            Writes the config structure stored by the current <see cref="T:IPA.Config.IConfigStore"/> to the given
            <see cref="T:IPA.Config.IConfigProvider"/>.
            </summary>
            <remarks>
            The calling code will have entered a read lock on <see cref="P:IPA.Config.IConfigStore.WriteSyncObject"/> when
            this is called.
            </remarks>
            <param name="provider">the provider to write to</param>
        </member>
        <member name="M:IPA.Config.IConfigStore.ReadFrom(IPA.Config.ConfigProvider)">
            <summary>
            Reads the config structure from the given <see cref="T:IPA.Config.IConfigProvider"/> into the current 
            <see cref="T:IPA.Config.IConfigStore"/>.
            </summary>
            <remarks>
            The calling code will have entered a write lock on <see cref="P:IPA.Config.IConfigStore.WriteSyncObject"/> when
            this is called.
            </remarks>
            <param name="provider">the provider to read from</param>
        </member>
        <member name="T:IPA.Config.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="M:IPA.Config.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="iniPath"></PARAM>
        </member>
        <member name="M:IPA.Config.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <PARAM name="section"></PARAM>
            Section name
            <PARAM name="key"></PARAM>
            Key Name
            <PARAM name="value"></PARAM>
            Value Name
        </member>
        <member name="M:IPA.Config.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <PARAM name="section"></PARAM>
            <PARAM name="key"></PARAM>
            <returns></returns>
        </member>
        <member name="T:IPA.Config.IModPrefs">
            <summary>
            Allows to get and set preferences for your mod. 
            </summary>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a string from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetInt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an int from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetFloat(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Gets a float from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetBool(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a bool from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.HasKey(System.String,System.String)">
            <summary>
            Checks whether or not a key exists in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetFloat(System.String,System.String,System.Single)">
            <summary>
            Sets a float in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetInt(System.String,System.String,System.Int32)">
            <summary>
            Sets an int in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetBool(System.String,System.String,System.Boolean)">
            <summary>
            Sets a bool in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="T:IPA.Config.ModPrefs">
            <inheritdoc />
            <summary>
            Allows to get and set preferences for your mod. 
            </summary>
        </member>
        <member name="M:IPA.Config.ModPrefs.#ctor(IPA.Loader.PluginMetadata)">
            <summary>
            Constructs a ModPrefs object for the provide plugin.
            </summary>
            <param name="plugin">the plugin to get the preferences file for</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a string from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetInt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an int from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetFloat(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Gets a float from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetBool(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a bool from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.HasKey(System.String,System.String)">
            <summary>
            Checks whether or not a key exists in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetFloat(System.String,System.String,System.Single)">
            <summary>
            Sets a float in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetInt(System.String,System.String,System.Int32)">
            <summary>
            Sets an int in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetBool(System.String,System.String,System.Boolean)">
            <summary>
            Sets a bool in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="T:IPA.Config.Stores.Attributes.NotifyPropertyChangesAttribute">
            <summary>
            Indicates that the generated subclass of the attribute's target should implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            If the type this is applied to already inherits it, this is implied.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.Attributes.IgnoreAttribute">
            <summary>
            Causes a field or property in an object being wrapped by <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/> to be
            ignored during serialization and deserialization.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.Attributes.NonNullableAttribute">
            <summary>
            Indicates that a field or property in an object being wrapped by <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/>
            that would otherwise be nullable (i.e. a reference type or a <see cref="T:System.Nullable`1"/> type) should never be null, and the
            member will be ignored if the deserialized value is <see langword="null"/>.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.Attributes.UseConverterAttribute">
            <summary>
            Indicates that a given field or property in an object being wrapped by <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/>
            should be serialized and deserialized using the provided converter instead of the default mechanism.
            </summary>
        </member>
        <member name="P:IPA.Config.Stores.Attributes.UseConverterAttribute.UseDefaultConverterForType">
            <summary>
            Gets whether or not to use the default converter for the member type instead of the specified type.
            </summary>
        </member>
        <member name="P:IPA.Config.Stores.Attributes.UseConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter to use.
            </summary>
        </member>
        <member name="P:IPA.Config.Stores.Attributes.UseConverterAttribute.ConverterTargetType">
            <summary>
            Gets the target type of the converter if it is avaliable at instantiation time, otherwise
            <see langword="null"/>.
            </summary>
        </member>
        <member name="P:IPA.Config.Stores.Attributes.UseConverterAttribute.IsGenericConverter">
            <summary>
            Gets whether or not this converter is a generic <see cref="T:IPA.Config.Stores.ValueConverter`1"/>.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Attributes.UseConverterAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:IPA.Config.Stores.Attributes.UseConverterAttribute"/> specifying to use the default converter type for the target member.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Attributes.UseConverterAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Stores.Attributes.UseConverterAttribute"/> with a  given <see cref="P:IPA.Config.Stores.Attributes.UseConverterAttribute.ConverterType"/>.
            </summary>
            <param name="converterType">the type to assign to <see cref="P:IPA.Config.Stores.Attributes.UseConverterAttribute.ConverterType"/></param>
        </member>
        <member name="T:IPA.Config.Stores.Attributes.SerializedNameAttribute">
            <summary>
            Specifies a name for the serialized field or property in an object being wrapped by
            <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/> that is different from the member name itself.
            </summary>
            <example>
            <para>
            When serializing the following object, we might get the JSON that follows.
            <code>
            public class PluginConfig
            {
                public virtual bool BooleanField { get; set; } = true;
            }
            </code>
            <code>
            {
                "BooleanField": true
            }
            </code>
            </para>
            <para>
            However, if we were to add a <see cref="T:IPA.Config.Stores.Attributes.SerializedNameAttribute"/> to that field, we would get the following.
            <code>
            public class PluginConfig
            {
                [SerializedName("bool")]
                public virtual bool BooleanField { get; set; } = true;
            }
            </code>
            <code>
            {
                "bool": true
            }
            </code>
            </para>
            </example>
        </member>
        <member name="P:IPA.Config.Stores.Attributes.SerializedNameAttribute.Name">
            <summary>
            Gets the name to replace the member name with.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Attributes.SerializedNameAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:IPA.Config.Stores.Attributes.SerializedNameAttribute"/> with the given <see cref="P:IPA.Config.Stores.Attributes.SerializedNameAttribute.Name"/>.
            </summary>
            <param name="name">the value to assign to <see cref="P:IPA.Config.Stores.Attributes.SerializedNameAttribute.Name"/></param>
        </member>
        <member name="T:IPA.Config.Stores.Converters.CollectionConverter`2">
            <summary>
            A base class for all <see cref="T:System.Collections.Generic.ICollection`1"/> type converters, providing most of the functionality.
            </summary>
            <typeparam name="T">the type of the items in the collection</typeparam>
            <typeparam name="TCollection">the instantiated type of collection</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor">
            <summary>
            Creates a <see cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/> using the default converter for the
            element type. Equivalent to calling <see cref="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
            with <see cref="P:IPA.Config.Stores.Converters.Converter`1.Default"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Creates a <see cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/> using the specified underlying converter.
            </summary>
            <param name="underlying">the <see cref="T:IPA.Config.Stores.ValueConverter`1"/> to use to convert the values</param>
        </member>
        <member name="P:IPA.Config.Stores.Converters.CollectionConverter`2.BaseConverter">
            <summary>
            Gets the converter for the collection's value type.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CollectionConverter`2.Create(System.Int32,System.Object)">
            <summary>
            Creates a collection of type <typeparamref name="TCollection"/> using the <paramref name="size"/> and
            <paramref name="parent"/>.
            </summary>
            <param name="size">the initial size of the collecion</param>
            <param name="parent">the object that will own the new collection</param>
            <returns>a new instance of <typeparamref name="TCollection"/></returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CollectionConverter`2.PopulateFromValue(`1,IPA.Config.Data.List,System.Object)">
            <summary>
            Populates the colleciton <paramref name="col"/> with the deserialized values from <paramref name="list"/>
            with the parent <paramref name="parent"/>.
            </summary>
            <param name="col">the collection to populate</param>
            <param name="list">the values to populate it with</param>
            <param name="parent">the object that will own the new objects</param>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CollectionConverter`2.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Deserializes a <see cref="T:IPA.Config.Data.List"/> in <paramref name="value"/> into a new <typeparamref name="TCollection"/>
            owned by <paramref name="parent"/>.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.List"/> to convert to a <typeparamref name="TCollection"/></param>
            <param name="parent">the object that will own the resulting <typeparamref name="TCollection"/></param>
            <returns>a new <typeparamref name="TCollection"/> holding the deserialized content of <paramref name="value"/></returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CollectionConverter`2.ToValue(`1,System.Object)">
            <summary>
            Serializes a <typeparamref name="TCollection"/> into a <see cref="T:IPA.Config.Data.List"/>.
            </summary>
            <param name="obj">the <typeparamref name="TCollection"/> to serialize</param>
            <param name="parent">the object owning <paramref name="obj"/></param>
            <returns>the <see cref="T:IPA.Config.Data.List"/> that <paramref name="obj"/> was serialized into</returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.ToValue(`0,System.Object)"/>
        </member>
        <member name="T:IPA.Config.Stores.Converters.CollectionConverter`3">
            <summary>
            A <see cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/> which default constructs a converter for use as the value converter.
            </summary>
            <typeparam name="T">the value type of the collection</typeparam>
            <typeparam name="TCollection">the type of the colleciton</typeparam>
            <typeparam name="TConverter">the type of the converter to use for <typeparamref name="T"/></typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CollectionConverter`3.#ctor">
            <summary>
            Creates a <see cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/> using a default constructed <typeparamref name="TConverter"/>
            element type. Equivalent to calling <see cref="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
            with a default-constructed <typeparamref name="TConverter"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
        </member>
        <member name="T:IPA.Config.Stores.Converters.ISetConverter`1">
            <summary>
            A <see cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/> for an <see cref="T:System.Collections.Generic.ISet`1"/>, creating a <see cref="T:System.Collections.Generic.HashSet`1"/> when deserializing.
            </summary>
            <typeparam name="T">the element type of the <see cref="T:System.Collections.Generic.ISet`1"/></typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ISetConverter`1.#ctor">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.ISetConverter`1"/> using the default converter for <typeparamref name="T"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ISetConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.ISetConverter`1"/> using the specified underlying converter for values.
            </summary>
            <param name="underlying">the underlying <see cref="T:IPA.Config.Stores.ValueConverter`1"/> to use for the values</param>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ISetConverter`1.Create(System.Int32,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.ISet`1"/> (a <see cref="T:System.Collections.Generic.HashSet`1"/>) for deserialization.
            </summary>
            <param name="size">the size to initialize it to</param>
            <param name="parent">the object that will own the new object</param>
            <returns>the new <see cref="T:System.Collections.Generic.ISet`1"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.ISetConverter`2">
            <summary>
            An <see cref="T:IPA.Config.Stores.Converters.ISetConverter`1"/> which default constructs a converter for use as the value converter.
            </summary>
            <typeparam name="T">the value type of the collection</typeparam>
            <typeparam name="TConverter">the type of the converter to use for <typeparamref name="T"/></typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.ISetConverter`1"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ISetConverter`2.#ctor">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.ISetConverter`1"/> using a default constructed <typeparamref name="TConverter"/>
            element type. Equivalent to calling <see cref="M:IPA.Config.Stores.Converters.ISetConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
            with a default-constructed <typeparamref name="TConverter"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.ISetConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
        </member>
        <member name="T:IPA.Config.Stores.Converters.ListConverter`1">
            <summary>
            A <see cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/> for a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">the element type of the <see cref="T:System.Collections.Generic.List`1"/></typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ListConverter`1.#ctor">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.ListConverter`1"/> using the default converter for <typeparamref name="T"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ListConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.ListConverter`1"/> using the specified underlying converter for values.
            </summary>
            <param name="underlying">the underlying <see cref="T:IPA.Config.Stores.ValueConverter`1"/> to use for the values</param>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ListConverter`1.Create(System.Int32,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.List`1"/> for deserialization.
            </summary>
            <param name="size">the size to initialize it to</param>
            <param name="parent">the object that will own the new object</param>
            <returns>the new <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.ListConverter`2">
            <summary>
            A <see cref="T:IPA.Config.Stores.Converters.ListConverter`1"/> which default constructs a converter for use as the value converter.
            </summary>
            <typeparam name="T">the value type of the collection</typeparam>
            <typeparam name="TConverter">the type of the converter to use for <typeparamref name="T"/></typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.ListConverter`1"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.ListConverter`2.#ctor">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.ListConverter`1"/> using a default constructed <typeparamref name="TConverter"/>
            element type. Equivalent to calling <see cref="M:IPA.Config.Stores.Converters.ListConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
            with a default-constructed <typeparamref name="TConverter"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.ListConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
        </member>
        <member name="T:IPA.Config.Stores.Converters.IListConverter`1">
            <summary>
            A <see cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/> for an <see cref="T:System.Collections.Generic.IList`1"/>, creating a <see cref="T:System.Collections.Generic.List`1"/> when deserializing.
            </summary>
            <typeparam name="T">the element type of the <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.CollectionConverter`2"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IListConverter`1.#ctor">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.IListConverter`1"/> using the default converter for <typeparamref name="T"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.CollectionConverter`2.#ctor"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IListConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.IListConverter`1"/> using the specified underlying converter for values.
            </summary>
            <param name="underlying">the underlying <see cref="T:IPA.Config.Stores.ValueConverter`1"/> to use for the values</param>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IListConverter`1.Create(System.Int32,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.IList`1"/> (a <see cref="T:System.Collections.Generic.List`1"/>) for deserialization.
            </summary>
            <param name="size">the size to initialize it to</param>
            <param name="parent">the object that will own the new object</param>
            <returns>the new <see cref="T:System.Collections.Generic.IList`1"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.IListConverter`2">
            <summary>
            An <see cref="T:IPA.Config.Stores.Converters.IListConverter`1"/> which default constructs a converter for use as the value converter.
            </summary>
            <typeparam name="T">the value type of the collection</typeparam>
            <typeparam name="TConverter">the type of the converter to use for <typeparamref name="T"/></typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.IListConverter`1"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IListConverter`2.#ctor">
            <summary>
            Creates an <see cref="T:IPA.Config.Stores.Converters.IListConverter`1"/> using a default constructed <typeparamref name="TConverter"/>
            element type. Equivalent to calling <see cref="M:IPA.Config.Stores.Converters.IListConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
            with a default-constructed <typeparamref name="TConverter"/>.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.IListConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
        </member>
        <member name="T:IPA.Config.Stores.Converters.Converter">
            <summary>
            Provides utility functions for custom converters.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.Converter.IntValue(IPA.Config.Data.Value)">
            <summary>
            Gets the integral value of a <see cref="T:IPA.Config.Data.Value"/>, coercing a <see cref="T:IPA.Config.Data.FloatingPoint"/> if necessary,
            or <see langword="null"/> if <paramref name="val"/> is not an <see cref="T:IPA.Config.Data.Integer"/> or <see cref="T:IPA.Config.Data.FloatingPoint"/>.
            </summary>
            <param name="val">the <see cref="T:IPA.Config.Data.Value"/> to get the integral value of</param>
            <returns>the integral value of <paramref name="val"/>, or <see langword="null"/></returns>
        </member>
        <member name="M:IPA.Config.Stores.Converters.Converter.FloatValue(IPA.Config.Data.Value)">
            <summary>
            Gets the floaing point value of a <see cref="T:IPA.Config.Data.Value"/>, coercing an <see cref="T:IPA.Config.Data.Integer"/> if necessary,
            or <see langword="null"/> if <paramref name="val"/> is not an <see cref="T:IPA.Config.Data.Integer"/> or <see cref="T:IPA.Config.Data.FloatingPoint"/>.
            </summary>
            <param name="val">the <see cref="T:IPA.Config.Data.Value"/> to get the floaing point value of</param>
            <returns>the floaing point value of <paramref name="val"/>, or <see langword="null"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.Converter`1">
            <summary>
            Provides generic utilities for converters for certain types.
            </summary>
            <typeparam name="T">the type of the <see cref="T:IPA.Config.Stores.ValueConverter`1"/> that this works on</typeparam>
        </member>
        <member name="P:IPA.Config.Stores.Converters.Converter`1.Default">
            <summary>
            Gets the default <see cref="T:IPA.Config.Stores.ValueConverter`1"/> for the current type.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.Converters.NullableConverter`1">
            <summary>
            A converter for a <see cref="T:System.Nullable`1"/>.
            </summary>
            <typeparam name="T">the underlying type of the <see cref="T:System.Nullable`1"/></typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.NullableConverter`1.#ctor">
            <summary>
            Creates a converter with the default converter for the base type.
            Equivalent to 
            <code>
            new NullableConverter(Converter&lt;T&gt;.Default)
            </code>
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.NullableConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
            <seealso cref="P:IPA.Config.Stores.Converters.Converter`1.Default"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.NullableConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Creates a converter with the given underlying <see cref="T:IPA.Config.Stores.ValueConverter`1"/>.
            </summary>
            <param name="underlying">the undlerlying <see cref="T:IPA.Config.Stores.ValueConverter`1"/> to use</param>
        </member>
        <member name="M:IPA.Config.Stores.Converters.NullableConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Value"/> tree to a value.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> tree to convert</param>
            <param name="parent">the object which will own the created object</param>
            <returns>the object represented by <paramref name="value"/></returns>
        </member>
        <member name="M:IPA.Config.Stores.Converters.NullableConverter`1.ToValue(System.Nullable{`0},System.Object)">
            <summary>
            Converts a nullable <typeparamref name="T"/> to a <see cref="T:IPA.Config.Data.Value"/> tree.
            </summary>
            <param name="obj">the value to serialize</param>
            <param name="parent">the object which owns <paramref name="obj"/></param>
            <returns>a <see cref="T:IPA.Config.Data.Value"/> tree representing <paramref name="obj"/>.</returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.NullableConverter`2">
            <summary>
            A converter for a <see cref="T:System.Nullable`1"/> that default-constructs a converter of type <typeparamref name="TConverter"/>
            to use as the underlying converter. Use this in the <see cref="T:IPA.Config.Stores.Attributes.UseConverterAttribute"/>.
            </summary>
            <typeparam name="T">the underlying type of the <see cref="T:System.Nullable`1"/></typeparam>
            <typeparam name="TConverter">the type to use as an underlying converter</typeparam>
            <seealso cref="T:IPA.Config.Stores.Converters.NullableConverter`1"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.NullableConverter`2.#ctor">
            <summary>
            Creates a converter with a new <typeparamref name="TConverter"/> as the underlying converter.
            </summary>
            <seealso cref="M:IPA.Config.Stores.Converters.NullableConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})"/>
        </member>
        <member name="T:IPA.Config.Stores.Converters.EnumConverter`1">
            <summary>
            A converter for an enum of type <typeparamref name="T"/>, that converts the enum to its string representation and back.
            </summary>
            <typeparam name="T">the enum type</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.EnumConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Value"/> that is a <see cref="T:IPA.Config.Data.Text"/> node to the corresponding enum value.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to convert</param>
            <param name="parent">the object which will own the created object</param>
            <returns>the deserialized enum value</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="value"/> is not a <see cref="T:IPA.Config.Data.Text"/> node</exception>
        </member>
        <member name="M:IPA.Config.Stores.Converters.EnumConverter`1.ToValue(`0,System.Object)">
            <summary>
            Converts an enum of type <typeparamref name="T"/> to a <see cref="T:IPA.Config.Data.Value"/> node corresponding to its value.
            </summary>
            <param name="obj">the value to serialize</param>
            <param name="parent">the object which owns <paramref name="obj"/></param>
            <returns>a <see cref="T:IPA.Config.Data.Text"/> node representing <paramref name="obj"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.CaseInsensitiveEnumConverter`1">
            <summary>
            A converter for an enum of type <typeparamref name="T"/>, that converts the enum to its string representation and back,
            ignoring the case of the serialized value for deseiralization.
            </summary>
            <typeparam name="T">the enum type</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CaseInsensitiveEnumConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Value"/> that is a <see cref="T:IPA.Config.Data.Text"/> node to the corresponding enum value.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to convert</param>
            <param name="parent">the object which will own the created object</param>
            <returns>the deserialized enum value</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="value"/> is not a <see cref="T:IPA.Config.Data.Text"/> node</exception>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CaseInsensitiveEnumConverter`1.ToValue(`0,System.Object)">
            <summary>
            Converts an enum of type <typeparamref name="T"/> to a <see cref="T:IPA.Config.Data.Value"/> node corresponding to its value.
            </summary>
            <param name="obj">the value to serialize</param>
            <param name="parent">the object which owns <paramref name="obj"/></param>
            <returns>a <see cref="T:IPA.Config.Data.Text"/> node representing <paramref name="obj"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.NumericEnumConverter`1">
            <summary>
            A converter for an enum of type <typeparamref name="T"/>, that converts the enum to its underlying value for serialization.
            </summary>
            <typeparam name="T">the enum type</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.NumericEnumConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Value"/> that is a numeric node to the corresponding enum value.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to convert</param>
            <param name="parent">the object which will own the created object</param>
            <returns>the deserialized enum value</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="value"/> is not a numeric node</exception>
        </member>
        <member name="M:IPA.Config.Stores.Converters.NumericEnumConverter`1.ToValue(`0,System.Object)">
            <summary>
            Converts an enum of type <typeparamref name="T"/> to a <see cref="T:IPA.Config.Data.Value"/> node corresponding to its value.
            </summary>
            <param name="obj">the value to serialize</param>
            <param name="parent">the object which owns <paramref name="obj"/></param>
            <returns>an <see cref="T:IPA.Config.Data.Integer"/> node representing <paramref name="obj"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.IDictionaryConverter`1">
            <summary>
            A converter for instances of <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TValue">the value type of the dictionary</typeparam>
        </member>
        <member name="P:IPA.Config.Stores.Converters.IDictionaryConverter`1.BaseConverter">
            <summary>
            Gets the converter for the dictionary's value type.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IDictionaryConverter`1.#ctor">
            <summary>
            Constructs an <see cref="T:IPA.Config.Stores.Converters.IDictionaryConverter`1"/> using the default converter for the value type.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IDictionaryConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Constructs an <see cref="T:IPA.Config.Stores.Converters.IDictionaryConverter`1"/> using the specified converter for the value.
            </summary>
            <param name="converter">the converter for the value</param>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IDictionaryConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Map"/> to an <see cref="T:System.Collections.Generic.IDictionary`2"/> that is represented by it.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Map"/> to convert</param>
            <param name="parent">the parent that will own the resulting object</param>
            <returns>the deserialized dictionary</returns>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IDictionaryConverter`1.ToValue(System.Collections.Generic.IDictionary{System.String,`0},System.Object)">
            <summary>
            Serializes an <see cref="T:System.Collections.Generic.IDictionary`2"/> into a <see cref="T:IPA.Config.Data.Map"/> containing its values.
            </summary>
            <param name="obj">the dictionary to serialize</param>
            <param name="parent">the object that owns the dictionary</param>
            <returns>the dictionary serialized as a <see cref="T:IPA.Config.Data.Map"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.IDictionaryConverter`2">
            <summary>
            A converter for instances of <see cref="T:System.Collections.Generic.IDictionary`2"/>, specifying a value converter as a type parameter.
            </summary>
            <typeparam name="TValue">the value type of the dictionary</typeparam>
            <typeparam name="TConverter">the converter type for values</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IDictionaryConverter`2.#ctor">
            <summary>
            Constructs a new <see cref="T:IPA.Config.Stores.Converters.IDictionaryConverter`2"/> with a new instance of 
            <typeparamref name="TConverter"/> as the value converter.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.Converters.DictionaryConverter`1">
            <summary>
            A converter for instances of <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TValue">the value type of the dictionary</typeparam>
        </member>
        <member name="P:IPA.Config.Stores.Converters.DictionaryConverter`1.BaseConverter">
            <summary>
            Gets the converter for the dictionary's value type.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.DictionaryConverter`1.#ctor">
            <summary>
            Constructs an <see cref="T:IPA.Config.Stores.Converters.IDictionaryConverter`1"/> using the default converter for the value type.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.DictionaryConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Constructs an <see cref="T:IPA.Config.Stores.Converters.IDictionaryConverter`1"/> using the specified converter for the value.
            </summary>
            <param name="converter">the converter for the value</param>
        </member>
        <member name="M:IPA.Config.Stores.Converters.DictionaryConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Map"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/> that is represented by it.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Map"/> to convert</param>
            <param name="parent">the parent that will own the resulting object</param>
            <returns>the deserialized dictionary</returns>
        </member>
        <member name="M:IPA.Config.Stores.Converters.DictionaryConverter`1.ToValue(System.Collections.Generic.Dictionary{System.String,`0},System.Object)">
            <summary>
            Serializes a <see cref="T:System.Collections.Generic.Dictionary`2"/> into a <see cref="T:IPA.Config.Data.Map"/> containing its values.
            </summary>
            <param name="obj">the dictionary to serialize</param>
            <param name="parent">the object that owns the dictionary</param>
            <returns>the dictionary serialized as a <see cref="T:IPA.Config.Data.Map"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.DictionaryConverter`2">
            <summary>
            A converter for instances of <see cref="T:System.Collections.Generic.Dictionary`2"/>, specifying a value converter as a type parameter.
            </summary>
            <typeparam name="TValue">the value type of the dictionary</typeparam>
            <typeparam name="TConverter">the converter type for values</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.DictionaryConverter`2.#ctor">
            <summary>
            Constructs a new <see cref="T:IPA.Config.Stores.Converters.IDictionaryConverter`2"/> with a new instance of 
            <typeparamref name="TConverter"/> as the value converter.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1">
            <summary>
            A converter for instances of <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <typeparam name="TValue">the value type of the dictionary</typeparam>
        </member>
        <member name="P:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1.BaseConverter">
            <summary>
            Gets the converter for the dictionary's value type.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1.#ctor">
            <summary>
            Constructs an <see cref="T:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1"/> using the default converter for the value type.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1.#ctor(IPA.Config.Stores.ValueConverter{`0})">
            <summary>
            Constructs an <see cref="T:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1"/> using the specified converter for the value.
            </summary>
            <param name="converter">the converter for the value</param>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Map"/> to an <see cref="T:System.Collections.Generic.IDictionary`2"/> that is represented by it.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Map"/> to convert</param>
            <param name="parent">the parent that will own the resulting object</param>
            <returns>the deserialized dictionary</returns>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`1.ToValue(System.Collections.Generic.IReadOnlyDictionary{System.String,`0},System.Object)">
            <summary>
            Serializes an <see cref="T:System.Collections.Generic.IDictionary`2"/> into a <see cref="T:IPA.Config.Data.Map"/> containing its values.
            </summary>
            <param name="obj">the dictionary to serialize</param>
            <param name="parent">the object that owns the dictionary</param>
            <returns>the dictionary serialized as a <see cref="T:IPA.Config.Data.Map"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`2">
            <summary>
            A converter for instances of <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>, specifying a value converter as a type parameter.
            </summary>
            <typeparam name="TValue">the value type of the dictionary</typeparam>
            <typeparam name="TConverter">the converter type for values</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`2.#ctor">
            <summary>
            Constructs a new <see cref="T:IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter`2"/> with a new instance of 
            <typeparamref name="TConverter"/> as the value converter.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.Converters.HexColorConverter">
            <summary>
            A converter for <see cref="T:UnityEngine.Color"/> objects.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.Converters.HexColorConverter.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Value"/> that is a <see cref="T:IPA.Config.Data.Text"/> node to the corresponding <see cref="T:UnityEngine.Color" /> object.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to convert</param>
            <param name="parent">the object which will own the created object</param>
            <returns>the deserialized Color object</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="value"/> is not a <see cref="T:IPA.Config.Data.Text"/> node or couldn't be parsed into a Color object</exception>
        </member>
        <member name="M:IPA.Config.Stores.Converters.HexColorConverter.ToValue(UnityEngine.Color,System.Object)">
            <summary>
            Converts color of type <see cref="T:UnityEngine.Color"/> to a <see cref="T:IPA.Config.Data.Value"/> node.
            </summary>
            <param name="obj">the object to serialize</param>
            <param name="parent">the object which owns <paramref name="obj"/></param>
            <returns>a <see cref="T:IPA.Config.Data.Text"/> node representing <paramref name="obj"/></returns>
        </member>
        <member name="T:IPA.Config.Stores.Converters.CustomObjectConverter`1">
            <summary>
            A <see cref="T:IPA.Config.Stores.ValueConverter`1"/> for objects normally serialized to config via <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/>.
            </summary>
            <typeparam name="T">the same type parameter that would be passed into <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/></typeparam>
            <seealso cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomObjectConverter`1.Deserialize(IPA.Config.Data.Value,System.Object)">
            <summary>
            Deserializes <paramref name="value"/> into a <typeparamref name="T"/> with the given <paramref name="parent"/>.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to deserialize</param>
            <param name="parent">the parent object that will own the deserialized value</param>
            <returns>the deserialized value</returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomObjectConverter`1.Serialize(`0,System.Object)">
            <summary>
            Serializes <paramref name="obj"/> into a <see cref="T:IPA.Config.Data.Value"/> structure, given <paramref name="parent"/>.
            </summary>
            <param name="obj">the object to serialize</param>
            <param name="parent">the parent object that owns <paramref name="obj"/></param>
            <returns>the <see cref="T:IPA.Config.Data.Value"/> tree that represents <paramref name="obj"/></returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.ToValue(`0,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomObjectConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Deserializes <paramref name="value"/> into a <typeparamref name="T"/> with the given <paramref name="parent"/>.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to deserialize</param>
            <param name="parent">the parent object that will own the deserialized value</param>
            <returns>the deserialized value</returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomObjectConverter`1.ToValue(`0,System.Object)">
            <summary>
            Serializes <paramref name="obj"/> into a <see cref="T:IPA.Config.Data.Value"/> structure, given <paramref name="parent"/>.
            </summary>
            <param name="obj">the object to serialize</param>
            <param name="parent">the parent object that owns <paramref name="obj"/></param>
            <returns>the <see cref="T:IPA.Config.Data.Value"/> tree that represents <paramref name="obj"/></returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.ToValue(`0,System.Object)"/>
        </member>
        <member name="T:IPA.Config.Stores.Converters.CustomValueTypeConverter`1">
            <summary>
            A <see cref="T:IPA.Config.Stores.ValueConverter`1"/> for custom value types, serialized identically to the reference types serialized with
            <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/>.
            </summary>
            <typeparam name="T">the type of the value to convert</typeparam>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomValueTypeConverter`1.Deserialize(IPA.Config.Data.Value,System.Object)">
            <summary>
            Deserializes <paramref name="value"/> into a <typeparamref name="T"/> with the given <paramref name="parent"/>.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to deserialize</param>
            <param name="parent">the parent object that will own the deserialized value</param>
            <returns>the deserialized value</returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomValueTypeConverter`1.Serialize(`0)">
            <summary>
            Serializes <paramref name="obj"/> into a corresponding <see cref="T:IPA.Config.Data.Value"/> structure.
            </summary>
            <param name="obj">the object to serialize</param>
            <returns>the <see cref="T:IPA.Config.Data.Value"/> tree that represents <paramref name="obj"/></returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.ToValue(`0,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomValueTypeConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Deserializes <paramref name="value"/> into a <typeparamref name="T"/> with the given <paramref name="parent"/>.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to deserialize</param>
            <param name="parent">the parent object that will own the deserialized value</param>
            <returns>the deserialized value</returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.Converters.CustomValueTypeConverter`1.ToValue(`0,System.Object)">
            <summary>
            Serializes <paramref name="obj"/> into a <see cref="T:IPA.Config.Data.Value"/> structure, given <paramref name="parent"/>.
            </summary>
            <param name="obj">the object to serialize</param>
            <param name="parent">the parent object that owns <paramref name="obj"/></param>
            <returns>the <see cref="T:IPA.Config.Data.Value"/> tree that represents <paramref name="obj"/></returns>
            <seealso cref="M:IPA.Config.Stores.ValueConverter`1.ToValue(`0,System.Object)"/>
        </member>
        <member name="T:IPA.Config.Stores.GeneratedStore">
            <summary>
            A class providing an extension for <see cref="T:IPA.Config.Config"/> to make it easy to use generated
            config stores.
            </summary>
        </member>
        <member name="F:IPA.Config.Stores.GeneratedStore.AssemblyVisibilityTarget">
            <summary>
            The name of the assembly that internals must be visible to to allow internal protection.
            </summary>
        </member>
        <member name="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)">
            <summary>
            Creates a generated <see cref="T:IPA.Config.IConfigStore"/> of type <typeparamref name="T"/>, registers it to
            the <see cref="T:IPA.Config.Config"/> object, and returns it. This also forces a synchronous config load via
            <see cref="M:IPA.Config.Config.LoadSync"/> if <paramref name="loadSync"/> is <see langword="true"/>.
            </summary>
            <remarks>
            <para>
            <typeparamref name="T"/> must be a public non-<see langword="sealed"/> class.
            It can also be internal, but in that case, then your assembly must have the following attribute
            to allow the generated code to reference it.
            <code lang="csharp">
            [assembly: InternalsVisibleTo(IPA.Config.Stores.GeneratedStore.AssemblyVisibilityTarget)]
            </code>
            </para>
            <para>
            Only fields and properties that are public or protected will be considered, and only properties
            where both the getter and setter are public or protected are considered. Any fields or properties
            with an <see cref="T:IPA.Config.Stores.Attributes.IgnoreAttribute"/> applied to them are also ignored. Having properties be <see langword="virtual"/> is not strictly
            necessary, however it allows the generated type to keep track of changes and lock around them so that the config will auto-save.
            </para>
            <para>
            All of the attributes in the <see cref="N:IPA.Config.Stores.Attributes"/> namespace are handled as described by them.
            </para>
            <para>
            If the <typeparamref name="T"/> declares a public or protected, <see langword="virtual"/>
            method <c>Changed()</c>, then that method may be called to artificially signal to the runtime that the content of the object 
            has changed. That method will also be called after the write locks are released when a property is set anywhere in the owning
            tree. This will only be called on the outermost generated object of the config structure, even if the change being signaled
            is somewhere deep into the tree.
            </para>
            <para>
            Similarly, <typeparamref name="T"/> can declare a public or protected, <see langword="virtual"/> 
            method <c>OnReload()</c>, which will be called on the filesystem reader thread after the object has been repopulated with new data 
            values. It will be called <i>after</i> the write lock for this object is released. This will only be called on the outermost generated
            object of the config structure.
            </para>
            <para>
            Similarly, <typeparamref name="T"/> can declare a public or protected, <see langword="virtual"/> 
            method <c>CopyFrom(ConfigType)</c> (the first parameter is the type it is defined on), which may be called to copy the properties from
            another object of its type easily, and more importantly, as only one change. Its body will be executed after the values have been copied.
            </para>
            <para>
            Similarly, <typeparamref name="T"/> can declare a public or protected, <see langword="virtual"/> 
            method <c>ChangeTransaction()</c> returning <see cref="T:System.IDisposable"/>, which may be called to get an object representing a transactional
            change. This may be used to change a lot of properties at once without triggering a save multiple times. Ideally, this is used in a
            <see langword="using"/> block or declaration. The <see cref="T:System.IDisposable"/> returned from your implementation will have its
            <see cref="M:System.IDisposable.Dispose"/> called <i>after</i> <c>Changed()</c> is called, but <i>before</i> the write lock is released.
            Unless you have a very good reason to use the nested <see cref="T:System.IDisposable"/>, avoid it.
            </para>
            <para>
            If <typeparamref name="T"/> is marked with <see cref="T:IPA.Config.Stores.Attributes.NotifyPropertyChangesAttribute"/>, the resulting object will implement
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>. Similarly, if <typeparamref name="T"/> implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>,
            the resulting object will implement it and notify it too.
            </para>
            </remarks>
            <typeparam name="T">the type to wrap</typeparam>
            <param name="cfg">the <see cref="T:IPA.Config.Config"/> to register to</param>
            <param name="loadSync">whether to synchronously load the content, or trigger an async load</param>
            <returns>a generated instance of <typeparamref name="T"/> as a special <see cref="T:IPA.Config.IConfigStore"/></returns>
        </member>
        <member name="M:IPA.Config.Stores.GeneratedStore.Create``1">
            <summary>
            Creates a generated store outside of the context of the config system.
            </summary>
            <remarks>
            See <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/> for more information about how it behaves.
            </remarks>
            <typeparam name="T">the type to wrap</typeparam>
            <returns>a generated instance of <typeparamref name="T"/> implementing functionality described by <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/></returns>
            <seealso cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/>
        </member>
        <member name="T:IPA.Config.Stores.IValueConverter">
            <summary>
            The base interface for a value converter for use by objects generated by
            <see cref="M:IPA.Config.Stores.GeneratedStore.Generated``1(IPA.Config.Config,System.Boolean)"/>.
            </summary>
            <remarks>
            <para>
            The object returned from <see cref="M:IPA.Config.Stores.IValueConverter.FromValue(IPA.Config.Data.Value,System.Object)"/>, if fed into <see cref="M:IPA.Config.Stores.IValueConverter.ToValue(System.Object,System.Object)"/>,
            should return equivalent <see cref="T:IPA.Config.Data.Value"/> structures. Similarly, if the result of <see cref="M:IPA.Config.Stores.IValueConverter.ToValue(System.Object,System.Object)"/>
            is fed into <see cref="M:IPA.Config.Stores.IValueConverter.FromValue(IPA.Config.Data.Value,System.Object)"/>, the resulting object should be equivalent to the one passed to 
            <see cref="M:IPA.Config.Stores.IValueConverter.ToValue(System.Object,System.Object)"/>.
            </para>
            <para>
            The <c>parent</c> parameter to <see cref="M:IPA.Config.Stores.IValueConverter.ToValue(System.Object,System.Object)"/> and <see cref="M:IPA.Config.Stores.IValueConverter.FromValue(IPA.Config.Data.Value,System.Object)"/> should
            be (ideally) the the top of the serialization tree, or some other generated object in that tree, rather than some arbitrary
            object in the middle that is not managed by the generatd config system.
            </para>
            <para>
            Converters do <i>not</i> need to perform null checks, as the serializer and deserializer will do that automatically.
            </para>
            </remarks>
        </member>
        <member name="M:IPA.Config.Stores.IValueConverter.ToValue(System.Object,System.Object)">
            <summary>
            Converts the given object to a <see cref="T:IPA.Config.Data.Value"/>.
            </summary>
            <param name="obj">the object to convert</param>
            <param name="parent">the owning object of <paramref name="obj"/></param>
            <returns>a representation of <paramref name="obj"/> as a <see cref="T:IPA.Config.Data.Value"/> structure</returns>
        </member>
        <member name="M:IPA.Config.Stores.IValueConverter.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts the given <see cref="T:IPA.Config.Data.Value"/> to the object type handled by this converter.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to deserialize</param>
            <param name="parent">the object that will own the result</param>
            <returns>the deserialized object</returns>
        </member>
        <member name="P:IPA.Config.Stores.IValueConverter.Type">
            <summary>
            Gets the type that this <see cref="T:IPA.Config.Stores.IValueConverter"/> handles.
            </summary>
        </member>
        <member name="T:IPA.Config.Stores.ValueConverter`1">
            <summary>
            A strongly-typed <see cref="T:IPA.Config.Stores.IValueConverter"/>.
            </summary>
            <typeparam name="T">the type of object to handle</typeparam>
            <seealso cref="T:IPA.Config.Stores.IValueConverter"/>
        </member>
        <member name="M:IPA.Config.Stores.ValueConverter`1.ToValue(`0,System.Object)">
            <summary>
            Converts the given object to a <see cref="T:IPA.Config.Data.Value"/>.
            </summary>
            <param name="obj">the object to convert</param>
            <param name="parent">the owning object of <paramref name="obj"/></param>
            <returns>a representation of <paramref name="obj"/> as a <see cref="T:IPA.Config.Data.Value"/> structure</returns>
            <seealso cref="M:IPA.Config.Stores.IValueConverter.ToValue(System.Object,System.Object)"/>
        </member>
        <member name="M:IPA.Config.Stores.ValueConverter`1.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts the given <see cref="T:IPA.Config.Data.Value"/> to the object type handled by this converter.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Value"/> to deserialize</param>
            <param name="parent">the object that will own the result</param>
            <returns>the deserialized object</returns>
            <seealso cref="M:IPA.Config.Stores.IValueConverter.FromValue(IPA.Config.Data.Value,System.Object)"/>
        </member>
        <member name="T:IPA.Loader.CannotRuntimeDisableException">
            <summary>
            Indicates that a plugin cannot be disabled at runtime. Generally not considered an error, however.
            </summary>
        </member>
        <member name="P:IPA.Loader.CannotRuntimeDisableException.Plugin">
            <summary>
            The plugin that cannot be disabled at runtime.
            </summary>
        </member>
        <member name="M:IPA.Loader.CannotRuntimeDisableException.#ctor(IPA.Loader.PluginMetadata)">
            <summary>
            Creates an exception for the given plugin metadata.
            </summary>
            <param name="plugin">the plugin that cannot be disabled</param>
        </member>
        <member name="M:IPA.Loader.CannotRuntimeDisableException.#ctor(IPA.Loader.PluginMetadata,System.String)">
            <summary>
            Creats an exception with the given plugin metadata and message information.
            </summary>
            <param name="plugin">the plugin that cannot be disabled</param>
            <param name="message">the message to associate with it</param>
        </member>
        <member name="M:IPA.Loader.CannotRuntimeDisableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from a serialization context. Not currently implemented.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:IPA.Loader.Features.Feature">
            <summary>
            The root interface for a mod Feature.
            </summary>
            <remarks>
            Avoid storing any data in any subclasses. If you do, it may result in a failure to load the feature.
            </remarks>
        </member>
        <member name="M:IPA.Loader.Features.Feature.Initialize(IPA.Loader.PluginMetadata,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes the feature with the data provided in the definition.
            </summary>
            <remarks>
            <para>This gets called AFTER your <c>Init</c> method, but BEFORE the target's <c>Init</c> method. If it is applied to the defining plugin, <c>BeforeInit</c> is not called.</para>
            <para>Returning <see langword="false" /> does <i>not</i> prevent the plugin from being loaded. It simply prevents the feature from being used.</para>
            </remarks>
            <param name="meta">the metadata of the plugin that is being prepared</param>
            <param name="featureData">the data provided with the feature</param>
            <returns><see langword="true"/> if the feature is valid for the plugin, <see langword="false"/> otherwise</returns>
        </member>
        <member name="P:IPA.Loader.Features.Feature.InvalidMessage">
            <summary>
            The message to be logged when the feature is not valid for a plugin.
            This should also be set whenever either <see cref="M:IPA.Loader.Features.Feature.BeforeInit(IPA.Loader.PluginMetadata)"/> returns false.
            </summary>
            <value>the message to show when the feature is marked invalid</value>
        </member>
        <member name="M:IPA.Loader.Features.Feature.BeforeInit(IPA.Loader.PluginMetadata)">
            <summary>
            Called before a plugin's `Init` method is called. This will not be called if there is no `Init` method. This should never throw an exception. An exception will abort the loading of the plugin with an error.
            </summary>
            <param name="plugin">the plugin to be initialized</param>
            <returns>whether or not to call the Init method</returns>
        </member>
        <member name="M:IPA.Loader.Features.Feature.AfterInit(IPA.Loader.PluginMetadata,System.Object)">
            <summary>
            Called after a plugin has been fully initialized, whether or not there is an `Init` method. This should never throw an exception.
            </summary>
            <param name="plugin">the plugin that was just initialized</param>
            <param name="pluginInstance">the instance of the plugin being initialized</param>
        </member>
        <member name="M:IPA.Loader.Features.Feature.AfterInit(IPA.Loader.PluginMetadata)">
            <summary>
            Called after a plugin has been fully initialized, whether or not there is an `Init` method. This should never throw an exception.
            </summary>
            <param name="plugin">the plugin that was just initialized</param>
        </member>
        <member name="M:IPA.Loader.Features.Feature.AfterDisable(IPA.Loader.PluginMetadata)">
            <summary>
            Called after a plugin with this feature appplied is disabled.
            </summary>
            <param name="plugin">the plugin that was disabled</param>
        </member>
        <member name="T:IPA.Loader.PluginInitInjector">
            <summary>
            The type that handles value injecting into a plugin's initialization methods.
            </summary>
            <remarks>
            The default injectors and what they provide are shown in this table.
            <list type="table">
            <listheader>
            <term>Parameter Type</term>
            <description>Injected Value</description>
            </listheader>
            <item>
            <term><see cref="T:IPA.Logging.Logger"/></term>
            <description>A <see cref="T:IPA.Logging.StandardLogger"/> specialized for the plugin being injected</description>
            </item>
            <item>
            <term><see cref="T:IPA.Loader.PluginMetadata"/></term>
            <description>The <see cref="T:IPA.Loader.PluginMetadata"/> of the plugin being injected</description>
            </item>
            <item>
            <term><see cref="T:IPA.Config.Config"/></term>
            <description>
            <para>A <see cref="T:IPA.Config.Config"/> object for the plugin being injected.</para>
            <para>
            These parameters may have <see cref="T:IPA.Config.Config.NameAttribute"/> and <see cref="T:IPA.Config.Config.PreferAttribute"/> to control
            how it is constructed.
            </para>
            </description>
            </item>
            </list>
            For all of the default injectors, only one of each will be generated, and any later parameters will recieve the same value as the first one.
            </remarks>
        </member>
        <member name="T:IPA.Loader.PluginInitInjector.InjectParameter">
            <summary>
            A typed injector for a plugin's Init method. When registered, called for all associated types. If it returns null, the default for the type will be used.
            </summary>
            <param name="previous">the previous return value of the function, or <see langword="null"/> if never called for plugin.</param>
            <param name="param">the <see cref="T:System.Reflection.ParameterInfo"/> of the parameter being injected.</param>
            <param name="meta">the <see cref="T:IPA.Loader.PluginMetadata"/> for the plugin being loaded.</param>
            <returns>the value to inject into that parameter.</returns>
        </member>
        <member name="T:IPA.Loader.PluginInitInjector.InjectedValueProvider">
            <summary>
            A provider for parameter injectors to request injected values themselves.
            </summary>
            <remarks>
            Some injectors may look at attributes on the parameter to gain additional information about what it should provide.
            If an injector wants to allow end users to affect the things it requests, it may pass the parameter it is currently
            injecting for to this delegate along with a type override to select some other type.
            </remarks>
            <param name="forParam">the parameter that this is providing for.</param>
            <param name="typeOverride">an optional override for the parameter type.</param>
            <returns>the value that would otherwise be injected.</returns>
        </member>
        <member name="T:IPA.Loader.PluginInitInjector.InjectParameterNested">
            <summary>
            A typed injector for a plugin's Init method. When registered, called for all associated types. If it returns null, the default for the type will be used.
            </summary>
            <param name="previous">the previous return value of the function, or <see langword="null"/> if never called for plugin.</param>
            <param name="param">the <see cref="T:System.Reflection.ParameterInfo"/> of the parameter being injected.</param>
            <param name="meta">the <see cref="T:IPA.Loader.PluginMetadata"/> for the plugin being loaded.</param>
            <param name="provider">an <see cref="T:IPA.Loader.PluginInitInjector.InjectedValueProvider"/> to allow the injector to request injected values.</param>
            <returns>the value to inject into that parameter.</returns>
        </member>
        <member name="M:IPA.Loader.PluginInitInjector.Inject``1(IPA.Loader.PluginInitInjector.InjectedValueProvider,System.Reflection.ParameterInfo)">
            <summary>
            Invokes the provider with <paramref name="param"/> and <typeparamref name="T"/> and casts the result to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of object to be injected</typeparam>
            <param name="provider">the provider to invoke.</param>
            <param name="param">the parameter to provide for</param>
            <returns>the value requested, or <see langword="null"/>.</returns>
        </member>
        <member name="M:IPA.Loader.PluginInitInjector.AddInjector(System.Type,IPA.Loader.PluginInitInjector.InjectParameter)">
            <summary>
            Adds an injector to be used when calling future plugins' Init methods.
            </summary>
            <param name="type">the type of the parameter.</param>
            <param name="injector">the function to call for injection.</param>
        </member>
        <member name="M:IPA.Loader.PluginInitInjector.AddInjector(System.Type,IPA.Loader.PluginInitInjector.InjectParameterNested)">
            <summary>
            Adds an injector to be used when calling future plugins' Init methods.
            </summary>
            <param name="type">the type of the parameter.</param>
            <param name="injector">the function to call for injection.</param>
        </member>
        <member name="T:IPA.Loader.PluginLoader">
            <summary>
            A type to manage the loading of plugins.
            </summary>
        </member>
        <member name="T:IPA.Loader.Reason">
            <summary>
            An enum that represents several categories of ignore reasons that the loader may encounter.
            </summary>
            <seealso cref="T:IPA.Loader.IgnoreReason"/>
        </member>
        <member name="F:IPA.Loader.Reason.Error">
            <summary>
            An error was thrown either loading plugin information from disk, or when initializing the plugin.
            </summary>
            <remarks>
            When this is the set <see cref="T:IPA.Loader.Reason"/> in an <see cref="T:IPA.Loader.IgnoreReason"/> structure, the member
            <see cref="P:IPA.Loader.IgnoreReason.Error"/> will contain the thrown exception.
            </remarks>
        </member>
        <member name="F:IPA.Loader.Reason.Duplicate">
            <summary>
            The plugin this reason is associated with has the same ID as another plugin whose information was
            already loaded.
            </summary>
            <remarks>
            When this is the set <see cref="T:IPA.Loader.Reason"/> in an <see cref="T:IPA.Loader.IgnoreReason"/> structure, the member
            <see cref="P:IPA.Loader.IgnoreReason.RelatedTo"/> will contain the metadata of the already loaded plugin.
            </remarks>
        </member>
        <member name="F:IPA.Loader.Reason.Conflict">
            <summary>
            The plugin this reason is associated with conflicts with another already loaded plugin.
            </summary>
            <remarks>
            When this is the set <see cref="T:IPA.Loader.Reason"/> in an <see cref="T:IPA.Loader.IgnoreReason"/> structure, the member
            <see cref="P:IPA.Loader.IgnoreReason.RelatedTo"/> will contain the metadata of the plugin it conflicts with.
            </remarks>
        </member>
        <member name="F:IPA.Loader.Reason.Dependency">
            <summary>
            The plugin this reason is assiciated with is missing a dependency.
            </summary>
            <remarks>
            Since this is only given when a dependency is missing, <see cref="P:IPA.Loader.IgnoreReason.RelatedTo"/> will
            not be set.
            </remarks>
        </member>
        <member name="F:IPA.Loader.Reason.Released">
            <summary>
            The plugin this reason is associated with was released for a game update, but is still considered
            present for the purposes of updating.
            </summary>
        </member>
        <member name="F:IPA.Loader.Reason.Feature">
            <summary>
            The plugin this reason is associated with was denied from loading by a <see cref="T:IPA.Loader.Features.Feature"/>
            that it marks.
            </summary>
        </member>
        <member name="F:IPA.Loader.Reason.Unsupported">
            <summary>
            The plugin this reason is assoicated with is unsupported.
            </summary>
            <remarks>
            Currently, there is no path in the loader that emits this <see cref="T:IPA.Loader.Reason"/>, however there may
            be in the future.
            </remarks>
        </member>
        <member name="F:IPA.Loader.Reason.MissingFiles">
            <summary>
            One of the files that a plugin declared in its manifest is missing.
            </summary>
        </member>
        <member name="T:IPA.Loader.IgnoreReason">
            <summary>
            A structure describing the reason that a plugin was ignored.
            </summary>
        </member>
        <member name="P:IPA.Loader.IgnoreReason.Reason">
            <summary>
            Gets the ignore reason, as represented by the <see cref="T:IPA.Loader.Reason"/> enum.
            </summary>
        </member>
        <member name="P:IPA.Loader.IgnoreReason.ReasonText">
            <summary>
            Gets the textual description of the particular ignore reason. This will typically
            include details about why the plugin was ignored, if it is present.
            </summary>
        </member>
        <member name="P:IPA.Loader.IgnoreReason.Error">
            <summary>
            Gets the <see cref="T:System.Exception"/> that caused this plugin to be ignored, if any.
            </summary>
        </member>
        <member name="P:IPA.Loader.IgnoreReason.RelatedTo">
            <summary>
            Gets the metadata of the plugin that this ignore was related to, if any.
            </summary>
        </member>
        <member name="M:IPA.Loader.IgnoreReason.#ctor(IPA.Loader.Reason,System.String,System.Exception,IPA.Loader.PluginMetadata)">
            <summary>
            Initializes an <see cref="T:IPA.Loader.IgnoreReason"/> with the provided data.
            </summary>
            <param name="reason">the <see cref="T:IPA.Loader.Reason"/> enum value that describes this reason</param>
            <param name="reasonText">the textual description of this ignore reason, if any</param>
            <param name="error">the <see cref="T:System.Exception"/> that caused this <see cref="T:IPA.Loader.IgnoreReason"/>, if any</param>
            <param name="relatedTo">the <see cref="T:IPA.Loader.PluginMetadata"/> this reason is related to, if any</param>
        </member>
        <member name="M:IPA.Loader.IgnoreReason.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IPA.Loader.IgnoreReason.Equals(IPA.Loader.IgnoreReason)">
            <summary>
            Compares this <see cref="T:IPA.Loader.IgnoreReason"/> with <paramref name="other"/> for equality.
            </summary>
            <param name="other">the reason to compare to</param>
            <returns><see langword="true"/> if the two reasons compare equal, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:IPA.Loader.IgnoreReason.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IPA.Loader.IgnoreReason.op_Equality(IPA.Loader.IgnoreReason,IPA.Loader.IgnoreReason)">
            <summary>
            Checks if two <see cref="T:IPA.Loader.IgnoreReason"/>s are equal.
            </summary>
            <param name="left">the first <see cref="T:IPA.Loader.IgnoreReason"/> to compare</param>
            <param name="right">the second <see cref="T:IPA.Loader.IgnoreReason"/> to compare</param>
            <returns><see langword="true"/> if the two reasons compare equal, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:IPA.Loader.IgnoreReason.op_Inequality(IPA.Loader.IgnoreReason,IPA.Loader.IgnoreReason)">
            <summary>
            Checks if two <see cref="T:IPA.Loader.IgnoreReason"/>s are not equal.
            </summary>
            <param name="left">the first <see cref="T:IPA.Loader.IgnoreReason"/> to compare</param>
            <param name="right">the second <see cref="T:IPA.Loader.IgnoreReason"/> to compare</param>
            <returns><see langword="true"/> if the two reasons are not equal, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:IPA.Loader.PluginManager">
            <summary>
            The manager class for all plugins.
            </summary>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetPlugin(System.String)">
            <summary>
            Gets info about the enabled plugin with the specified name.
            </summary>
            <param name="name">the name of the plugin to get (must be an exact match)</param>
            <returns>the plugin metadata for the requested plugin or <see langword="null"/> if it doesn't exist or is disabled</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetPluginFromId(System.String)">
            <summary>
            Gets info about the enabled plugin with the specified ID.
            </summary>
            <param name="name">the ID name of the plugin to get (must be an exact match)</param>
            <returns>the plugin metadata for the requested plugin or <see langword="null"/> if it doesn't exist or is disabled</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetDisabledPlugin(System.String)">
            <summary>
            Gets a disabled plugin's metadata by its name.
            </summary>
            <param name="name">the name of the disabled plugin to get</param>
            <returns>the metadata for the corresponding plugin</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetDisabledPluginFromId(System.String)">
            <summary>
            Gets a disabled plugin's metadata by its ID.
            </summary>
            <param name="name">the ID of the disabled plugin to get</param>
            <returns>the metadata for the corresponding plugin</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.PluginStateTransaction">
            <summary>
            Creates a new transaction for mod enabling and disabling mods simultaneously.
            </summary>
            <returns>a new <see cref="T:IPA.Loader.StateTransitionTransaction"/> that captures the current state of loaded mods</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.IsDisabled(IPA.Loader.PluginMetadata)">
            <summary>
            Checks if a given plugin is disabled.
            </summary>
            <param name="meta">the plugin to check</param>
            <returns><see langword="true"/> if the plugin is disabled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.IsEnabled(IPA.Loader.PluginMetadata)">
            <summary>
            Checks if a given plugin is enabled.
            </summary>
            <param name="meta">the plugin to check</param>
            <returns><see langword="true"/> if the plugin is enabled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:IPA.Loader.PluginManager.PluginEnableDelegate">
            <summary>
            An invoker for the <see cref="E:IPA.Loader.PluginManager.PluginEnabled"/> event.
            </summary>
            <param name="plugin">the plugin that was enabled</param>
            <param name="needsRestart">whether it needs a restart to take effect</param>
        </member>
        <member name="T:IPA.Loader.PluginManager.PluginDisableDelegate">
            <summary>
            An invoker for the <see cref="E:IPA.Loader.PluginManager.PluginDisabled"/> event.
            </summary>
            <param name="plugin">the plugin that was disabled</param>
            <param name="needsRestart">whether it needs a restart to take effect</param>
        </member>
        <member name="T:IPA.Loader.PluginManager.OnAnyPluginsStateChangedDelegate">
            <summary>
            A delegate representing a state change event for any plugin.
            </summary>
            <param name="changeTask">the <see cref="T:System.Threading.Tasks.Task"/> representing the change</param>
            <param name="enabled">the plugins that were enabled in the change</param>
            <param name="disabled">the plugins that were disabled in the change</param>
        </member>
        <member name="E:IPA.Loader.PluginManager.PluginEnabled">
            <summary>
            Called whenever a plugin is enabled, before the plugin in question is enabled.
            </summary>
        </member>
        <member name="E:IPA.Loader.PluginManager.PluginDisabled">
            <summary>
            Called whenever a plugin is disabled, before the plugin in question is enabled.
            </summary>
        </member>
        <member name="E:IPA.Loader.PluginManager.OnPluginsStateChanged">
            <summary>
            Called whenever any plugins have their state changed at runtime with the <see cref="T:System.Threading.Tasks.Task"/> representing that state change.
            </summary>
            <remarks>
            Note that this is called on the Unity main thread, and cannot therefore block, as the <see cref="T:System.Threading.Tasks.Task"/>
            provided represents operations that also run on the Unity main thread.
            </remarks>
        </member>
        <member name="E:IPA.Loader.PluginManager.OnAnyPluginsStateChanged">
            <summary>
            Called whenever any plugins, regardless of whether or not their change occurs during runtime, have their state changed.
            </summary>
            <remarks>
            Note that this is called on the Unity main thread, and cannot therefore block, as the <see cref="T:System.Threading.Tasks.Task"/>
            provided represents operations that also run on the Unity main thread.
            </remarks>
        </member>
        <member name="P:IPA.Loader.PluginManager.AllPlugins">
            <summary>
            Gets a list of all enabled BSIPA plugins. Use <see cref="P:IPA.Loader.PluginManager.EnabledPlugins"/> instead of this.
            </summary>
            <value>a collection of all enabled plugins as <see cref="T:IPA.Loader.PluginMetadata"/>s</value>
        </member>
        <member name="P:IPA.Loader.PluginManager.EnabledPlugins">
            <summary>
            Gets a collection of all enabled plugins, as represented by <see cref="T:IPA.Loader.PluginMetadata"/>.
            </summary>
            <value>a collection of all enabled plugins</value>
        </member>
        <member name="P:IPA.Loader.PluginManager.DisabledPlugins">
            <summary>
            Gets a list of disabled BSIPA plugins.
            </summary>
            <value>a collection of all disabled plugins as <see cref="T:IPA.Loader.PluginMetadata"/></value>
        </member>
        <member name="P:IPA.Loader.PluginManager.IgnoredPlugins">
            <summary>
            Gets a read-only dictionary of an ignored plugin to the reason it was ignored, as an <see cref="T:IPA.Loader.IgnoreReason"/>.
            </summary>
            <value>a dictionary of <see cref="T:IPA.Loader.PluginMetadata"/> to <see cref="T:IPA.Loader.IgnoreReason"/> of ignored plugins</value>
        </member>
        <member name="P:IPA.Loader.PluginManager.Plugins">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of old IPA plugins.
            </summary>
            <value>all legacy plugin instances</value>
        </member>
        <member name="T:IPA.Loader.PluginMetadata">
            <summary>
            A class which describes a loaded plugin.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.Assembly">
            <summary>
            The assembly the plugin was loaded from.
            </summary>
            <value>the loaded Assembly that contains the plugin main type</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.PluginType">
            <summary>
            The TypeDefinition for the main type of the plugin.
            </summary>
            <value>the Cecil definition for the plugin main type</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.Name">
            <summary>
            The human readable name of the plugin.
            </summary>
            <value>the name of the plugin</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.Id">
            <summary>
            The ID of the plugin.
            </summary>
            <value>the ID of the plugin</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.Author">
            <summary>
            The name of the author that wrote this plugin.
            </summary>
            <value>the name of the plugin's author</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.Description">
            <summary>
            The description of this plugin.
            </summary>
            <value>the description of the plugin</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.Version">
            <summary>
            The version of the plugin.
            </summary>
            <value>the version of the plugin</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.HVersion">
            <summary>
            The version of the plugin.
            </summary>
            <value>the version of the plugin</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.File">
            <summary>
            The file the plugin was loaded from.
            </summary>
            <value>the file the plugin was loaded from</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.Features">
            <summary>
            The features this plugin requests.
            </summary>
            <value>the list of features requested by the plugin</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.AssociatedFiles">
            <summary>
            A list of files (that aren't <see cref="P:IPA.Loader.PluginMetadata.File"/>) that are associated with this plugin.
            </summary>
            <value>a list of associated files</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.IconName">
            <summary>
            The name of the resource in the plugin assembly containing the plugin's icon.
            </summary>
            <value>the name of the plugin's icon</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.PluginHomeLink">
            <summary>
            A link to this plugin's home page, if any.
            </summary>
            <value>the <see cref="T:System.Uri"/> of the plugin's home page</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.PluginSourceLink">
            <summary>
            A link to this plugin's source code, if avaliable.
            </summary>
            <value>the <see cref="T:System.Uri"/> of the plugin's source code</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.DonateLink">
            <summary>
            A link to a donate page for the author of this plugin, if avaliable.
            </summary>
            <value>the <see cref="T:System.Uri"/> of the author's donate page</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.IsBare">
            <summary>
            Whether or not this metadata object represents a bare manifest.
            </summary>
            <value><see langword="true"/> if it is bare, <see langword="false"/> otherwise</value>
        </member>
        <member name="P:IPA.Loader.PluginMetadata.RuntimeOptions">
            <summary>
            The <see cref="T:IPA.RuntimeOptions"/> that the plugin specified in its <see cref="T:IPA.PluginAttribute"/>.
            </summary>
        </member>
        <member name="M:IPA.Loader.PluginMetadata.ToString">
            <summary>
            Gets all of the metadata as a readable string.
            </summary>
            <returns>the readable printable metadata string</returns>
        </member>
        <member name="T:IPA.Loader.StateTransitionTransaction">
            <summary>
            A class to represent a transaction for changing the state of loaded mods.
            </summary>
        </member>
        <member name="P:IPA.Loader.StateTransitionTransaction.WillNeedRestart">
            <summary>
            Gets whether or not a game restart will be necessary to fully apply this transaction.
            </summary>
            <value><see langword="true"/> if any mod who's state is changed cannot be changed at runtime, <see langword="false"/> otherwise</value>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
        </member>
        <member name="P:IPA.Loader.StateTransitionTransaction.HasStateChanged">
            <summary>
            Gets whether or not the current state has changed.
            </summary>
            <value><see langword="true"/> if the current state of the transaction is different from its construction, <see langword="false"/> otherwise</value>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
        </member>
        <member name="P:IPA.Loader.StateTransitionTransaction.EnabledPlugins">
            <summary>
            Gets a list of plugins that are enabled according to this transaction's current state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
        </member>
        <member name="P:IPA.Loader.StateTransitionTransaction.DisabledPlugins">
            <summary>
            Gets a list of plugins that are disabled according to this transaction's current state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.IsEnabled(IPA.Loader.PluginMetadata)">
            <summary>
            Checks if a plugin is enabled according to this transaction's current state.
            </summary>
            <remarks>
            <para>This should be roughly equivalent to <c>EnabledPlugins.Contains(meta)</c>, but more performant.</para>
            <para>This should also always return the inverse of <see cref="M:IPA.Loader.StateTransitionTransaction.IsDisabled(IPA.Loader.PluginMetadata)"/> for valid plugins.</para>
            </remarks>
            <param name="meta">the plugin to check</param>
            <returns><see langword="true"/> if the plugin is enabled, <see langword="false"/> otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
            <seealso cref="P:IPA.Loader.StateTransitionTransaction.EnabledPlugins"/>
            <seealso cref="M:IPA.Loader.StateTransitionTransaction.IsDisabled(IPA.Loader.PluginMetadata)"/>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.IsDisabled(IPA.Loader.PluginMetadata)">
            <summary>
            Checks if a plugin is disabled according to this transaction's current state.
            </summary>
            <remarks>
            <para>This should be roughly equivalent to <c>DisabledPlugins.Contains(meta)</c>, but more performant.</para>
            <para>This should also always return the inverse of <see cref="M:IPA.Loader.StateTransitionTransaction.IsEnabled(IPA.Loader.PluginMetadata)"/> for valid plugins.</para>
            </remarks>
            <param name="meta">the plugin to check</param>
            <returns><see langword="true"/> if the plugin is disabled, <see langword="false"/> otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
            <seealso cref="P:IPA.Loader.StateTransitionTransaction.DisabledPlugins"/>
            <seealso cref="M:IPA.Loader.StateTransitionTransaction.IsEnabled(IPA.Loader.PluginMetadata)"/>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.Enable(IPA.Loader.PluginMetadata,System.Boolean)">
            <summary>
            Enables a plugin in this transaction.
            </summary>
            <param name="meta">the plugin to enable</param>
            <param name="autoDeps">whether or not to automatically enable all dependencies of the plugin</param>
            <returns><see langword="true"/> if the transaction's state was changed, <see langword="false"/> otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="meta"/> is not loadable</exception>
            <seealso cref="M:IPA.Loader.StateTransitionTransaction.Enable(IPA.Loader.PluginMetadata,System.Collections.Generic.IEnumerable{IPA.Loader.PluginMetadata}@,System.Boolean)"/>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.Enable(IPA.Loader.PluginMetadata,System.Collections.Generic.IEnumerable{IPA.Loader.PluginMetadata}@,System.Boolean)">
            <summary>
            Enables a plugin in this transaction.
            </summary>
            <remarks>
            <paramref name="disabledDeps"/> will only be set when <paramref name="autoDeps"/> is <see langword="false"/>.
            </remarks>
            <param name="meta">the plugin to enable</param>
            <param name="disabledDeps"><see langword="null"/> if successful, otherwise a set of plugins that need to be enabled first</param>
            <param name="autoDeps">whether or not to automatically enable all dependencies</param>
            <returns><see langword="true"/> if the transaction's state was changed, <see langword="false"/> otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="meta"/> is not loadable</exception>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.Disable(IPA.Loader.PluginMetadata,System.Boolean)">
            <summary>
            Disables a plugin in this transaction.
            </summary>
            <param name="meta">the plugin to disable</param>
            <param name="autoDependents">whether or not to automatically disable all dependents of the plugin</param>
            <returns><see langword="true"/> if the transaction's state was changed, <see langword="false"/> otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="meta"/> is not loadable</exception>
            <seealso cref="M:IPA.Loader.StateTransitionTransaction.Disable(IPA.Loader.PluginMetadata,System.Collections.Generic.IEnumerable{IPA.Loader.PluginMetadata}@,System.Boolean)"/>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.Disable(IPA.Loader.PluginMetadata,System.Collections.Generic.IEnumerable{IPA.Loader.PluginMetadata}@,System.Boolean)">
            <summary>
            Disables a plugin in this transaction.
            </summary>
            <remarks>
            <paramref name="enabledDependents"/> will only be set when <paramref name="autoDependents"/> is <see langword="false"/>.
            </remarks>
            <param name="meta">the plugin to disable</param>
            <param name="enabledDependents"><see langword="null"/> if successful, otherwise a set of plugins that need to be disabled first</param>
            <param name="autoDependents">whether or not to automatically disable all dependents of the plugin</param>
            <returns><see langword="true"/> if the transaction's state was changed, <see langword="false"/> otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="meta"/> is not loadable</exception>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.Commit">
            <summary>
            Commits this transaction to actual state, enabling and disabling plugins as necessary.
            </summary>
            <remarks>
            <para>After this completes, this transaction will be disposed.</para>
            <para>
            The <see cref="T:System.Threading.Tasks.Task"/> that is returned will error if <b>any</b> of the mods being <b>disabled</b>
            error. It is up to the caller to handle these in a sane way, like logging them. If nothing else, do something like this:
            <code lang="csharp">
            // get your transaction...
            var complete = transaction.Commit();
            await complete.ContinueWith(t => {
                if (t.IsFaulted)
                    Logger.log.Error($"Error disabling plugins: {t.Exception}");
            });
            </code>
            If you are running in a coroutine, you can use <see cref="M:IPA.Utilities.Async.Coroutines.WaitForTask(System.Threading.Tasks.Task)"/> instead of <see langword="await"/>.
            </para>
            <para>
            If you are running on the Unity main thread, this will block until all enabling is done, and will return a task representing the disables.
            Otherwise, the task returned represents both, and <i>will not complete</i> until Unity has done (possibly) several updates, depending on
            the number of plugins being disabled, and the time they take.
            </para>
            </remarks>
            <returns>a <see cref="T:System.Threading.Tasks.Task"/> which completes whenever all disables complete</returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
            <exception cref="T:System.InvalidOperationException">if the plugins' state no longer matches this transaction's original state</exception>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.Clone">
            <summary>
            Clones this transaction to be identical, but with unrelated underlying sets.
            </summary>
            <returns>the new <see cref="T:IPA.Loader.StateTransitionTransaction"/></returns>
            <exception cref="T:System.ObjectDisposedException">if this object has been disposed</exception>
        </member>
        <member name="M:IPA.Loader.StateTransitionTransaction.Dispose">
            <summary>
            Disposes and discards this transaction without committing it.
            </summary>
        </member>
        <member name="T:IPA.Logging.Logger">
            <summary>
            The logger base class. Provides the format for console logs.
            </summary>
        </member>
        <member name="P:IPA.Logging.Logger.LogFormat">
            <summary>
            The standard format for log messages.
            </summary>
            <value>the format for the standard loggers to print in</value>
        </member>
        <member name="T:IPA.Logging.Logger.Level">
            <summary>
            An enum specifying the level of the message. Resembles Syslog.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.None">
            <summary>
            No associated level. These never get shown.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Trace">
            <summary>
            A trace message. These are ignored <i>incredibly</i> early.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Debug">
            <summary>
            A debug message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Info">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Notice">
            <summary>
            A notice. More significant than Info, but less than a warning.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Critical">
            <summary>
            A critical error message.
            </summary>
        </member>
        <member name="T:IPA.Logging.Logger.LogLevel">
            <summary>
            An enum providing log level filters.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.None">
            <summary>
            Allow no messages through.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.TraceOnly">
            <summary>
            Only shows Trace messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.DebugOnly">
            <summary>
            Only shows Debug messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.InfoOnly">
            <summary>
            Only shows info messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.NoticeOnly">
            <summary>
            Only shows notice messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.WarningOnly">
            <summary>
            Only shows Warning messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.ErrorOnly">
            <summary>
            Only shows Error messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.CriticalOnly">
            <summary>
            Only shows Critical messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.ErrorUp">
            <summary>
            Shows all messages error and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.WarningUp">
            <summary>
            Shows all messages warning and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.NoticeUp">
            <summary>
            Shows all messages Notice and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.InfoUp">
            <summary>
            Shows all messages info and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.DebugUp">
            <summary>
            Shows all messages debug and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.All">
            <summary>
            Shows all messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.Undefined">
            <summary>
            Used for when the level is undefined.
            </summary>
        </member>
        <member name="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)">
            <summary>
            A basic log function.
            </summary>
            <param name="level">the level of the message</param>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)">
            <summary>
            A basic log function taking an exception to log.
            </summary>
            <param name="level">the level of the message</param>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Trace(System.String)">
            <summary>
            Sends a trace message.
            Equivalent to <c>Log(Level.Trace, message);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Trace(System.Exception)">
            <summary>
            Sends an exception as a trace message.
            Equivalent to <c>Log(Level.Trace, e);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Debug(System.String)">
            <summary>
            Sends a debug message.
            Equivalent to <c>Log(Level.Debug, message);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Debug(System.Exception)">
            <summary>
            Sends an exception as a debug message.
            Equivalent to <c>Log(Level.Debug, e);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Info(System.String)">
            <summary>
            Sends an info message.
            Equivalent to <c>Log(Level.Info, message);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Info(System.Exception)">
            <summary>
            Sends an exception as an info message.
            Equivalent to <c>Log(Level.Info, e);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Notice(System.String)">
            <summary>
            Sends a notice message.
            Equivalent to <c>Log(Level.Notice, message);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Notice(System.Exception)">
            <summary>
            Sends an exception as a notice message.
            Equivalent to <c>Log(Level.Notice, e);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Warn(System.String)">
            <summary>
            Sends a warning message.
            Equivalent to <c>Log(Level.Warning, message);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Warn(System.Exception)">
            <summary>
            Sends an exception as a warning message.
            Equivalent to <c>Log(Level.Warning, e);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Error(System.String)">
            <summary>
            Sends an error message.
            Equivalent to <c>Log(Level.Error, message);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Error(System.Exception)">
            <summary>
            Sends an exception as an error message.
            Equivalent to <c>Log(Level.Error, e);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Critical(System.String)">
            <summary>
            Sends a critical message.
            Equivalent to <c>Log(Level.Critical, message);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Critical(System.Exception)">
            <summary>
            Sends an exception as a critical message.
            Equivalent to <c>Log(Level.Critical, e);</c>
            </summary>
            <seealso cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            <param name="e">the exception to log</param>
        </member>
        <member name="T:IPA.Logging.LogPrinter">
            <summary>
            The log printer's base class.
            </summary>
        </member>
        <member name="P:IPA.Logging.LogPrinter.Filter">
            <summary>
            Provides a filter for which log levels to allow through.
            </summary>
            <value>the level to filter to</value>
        </member>
        <member name="M:IPA.Logging.LogPrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints a provided message from a given log at the specified time.
            </summary>
            <param name="level">the log level</param>
            <param name="time">the time the message was composed</param>
            <param name="logName">the name of the log that created this message</param>
            <param name="message">the message</param>
        </member>
        <member name="M:IPA.Logging.LogPrinter.StartPrint">
            <summary>
            Called before the first print in a group. May be called multiple times.
            Use this to create file handles and the like.
            </summary>
        </member>
        <member name="M:IPA.Logging.LogPrinter.EndPrint">
            <summary>
            Called after the last print in a group. May be called multiple times.
            Use this to dispose file handles and the like.
            </summary>
        </member>
        <member name="T:IPA.Logging.Printers.ColoredConsolePrinter">
            <summary>
            Prints a pretty message to the console.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.ColoredConsolePrinter.Filter">
            <summary>
            A filter for this specific printer.
            </summary>
            <value>the filter to apply to this printer</value>
        </member>
        <member name="P:IPA.Logging.Printers.ColoredConsolePrinter.Color">
            <summary>
            The color to print messages as.
            </summary>
            <value>the color to print this message as</value>
        </member>
        <member name="M:IPA.Logging.Printers.ColoredConsolePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the console window.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.ColorlessConsolePrinter">
            <summary>
            A colorless version of <see cref="T:IPA.Logging.Printers.ColoredConsolePrinter"/>, that indiscriminantly prints to standard out.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.ColorlessConsolePrinter.Filter">
            <summary>
            A filter for this specific printer.
            </summary>
            <value>the filter level for this printer</value>
        </member>
        <member name="M:IPA.Logging.Printers.ColorlessConsolePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to standard out.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.GlobalLogFilePrinter">
            <summary>
            A printer for all messages to a unified log location.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.GlobalLogFilePrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
            <value>the filter level for this printer</value>
        </member>
        <member name="M:IPA.Logging.Printers.GlobalLogFilePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="M:IPA.Logging.Printers.GlobalLogFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns>the target file to write to</returns>
        </member>
        <member name="T:IPA.Logging.Printers.GZFilePrinter">
            <summary>
            A <see cref="T:IPA.Logging.LogPrinter"/> abstract class that provides the utilities to write to a GZip file.
            </summary>
        </member>
        <member name="F:IPA.Logging.Printers.GZFilePrinter.FileWriter">
            <summary>
            The <see cref="T:System.IO.StreamWriter"/> that writes to the GZip file.
            </summary>
            <value>the writer to the underlying filestream</value>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the file to write to.
            </summary>
            <returns>the file to write to</returns>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.StartPrint">
            <summary>
            Called at the start of any print session.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.EndPrint">
            <summary>
            Called at the end of any print session.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.Dispose(System.Boolean)">
            <summary>
            Disposes the file printer.
            </summary>
            <param name="disposing">does nothing</param>
        </member>
        <member name="T:IPA.Logging.Printers.PluginLogFilePrinter">
            <summary>
            Prints log messages to the file specified by the name.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.PluginLogFilePrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
            <value>the filter level for this printer</value>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns>the file to write to</returns>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.#ctor(System.String)">
            <summary>
            Creates a new printer with the given name.
            </summary>
            <param name="name">the name of the logger</param>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.PluginSubLogPrinter">
            <summary>
            Prints log messages to the file specified by the name.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.PluginSubLogPrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
            <value>the filter for this printer</value>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns>the file to write to</returns>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.#ctor(System.String,System.String)">
            <summary>
            Creates a new printer with the given name.
            </summary>
            <param name="mainname">the name of the main logger</param>
            <param name="name">the name of the logger</param>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.StandardLogger">
             <summary>
             The default (and standard) <see cref="T:IPA.Logging.Logger"/> implementation.
             </summary>
             <remarks>
             <see cref="T:IPA.Logging.StandardLogger"/> uses a multi-threaded approach to logging. All actual I/O is done on another thread,
             where all messaged are guaranteed to be logged in the order they appeared. It is up to the printers to format them.
            
             This logger supports child loggers. Use <see cref="M:IPA.Logging.LoggerExtensions.GetChildLogger(IPA.Logging.Logger,System.String)"/> to safely get a child.
             The modification of printers on a parent are reflected down the chain.
             </remarks>
        </member>
        <member name="P:IPA.Logging.StandardLogger.ConsoleWriter">
            <summary>
            The <see cref="T:System.IO.TextWriter"/> for writing directly to the console window, or stdout if no window open.
            </summary>
            <value>a <see cref="T:System.IO.TextWriter"/> for the current primary text output</value>
        </member>
        <member name="M:IPA.Logging.StandardLogger.AddDefaultPrinter(IPA.Logging.LogPrinter)">
            <summary>
            Adds to the default printer pool that all printers inherit from. Printers added this way will be passed every message from every logger.
            </summary>
            <param name="printer">the printer to add</param>
        </member>
        <member name="P:IPA.Logging.StandardLogger.PrintFilter">
            <summary>
            All levels defined by this filter will be sent to loggers. All others will be ignored.
            </summary>
            <value>the global filter level</value>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Configure">
            <summary>
            Configures internal debug settings based on the config passed in.
            </summary>
        </member>
        <member name="M:IPA.Logging.StandardLogger.GetChild(System.String)">
            <summary>
            Gets a child printer with the given name, either constructing a new one or using one that was already made.
            </summary>
            <param name="name"></param>
            <returns>a child <see cref="T:IPA.Logging.StandardLogger"/> with the given sub-name</returns>
        </member>
        <member name="M:IPA.Logging.StandardLogger.AddPrinter(IPA.Logging.LogPrinter)">
            <summary>
            Adds a log printer to the logger.
            </summary>
            <param name="printer">the printer to add</param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Log(IPA.Logging.Logger.Level,System.String)">
            <summary>
            Logs a specific message at a given level.
            </summary>
            <param name="level">the message level</param>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Debug(System.String)">
            <inheritdoc />
            <summary>
            An override to <see cref="M:IPA.Logging.Logger.Debug(System.String)" /> which shows the method that called it.
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="P:IPA.Logging.StandardLogger.IsOnLoggerThread">
            <summary>
            Whether or not the calling thread is the logger thread.
            </summary>
            <value><see langword="true"/> if the current thread is the logger thread, <see langword="false"/> otherwise</value>
        </member>
        <member name="M:IPA.Logging.StandardLogger.LogThread">
            <summary>
            The log printer thread for <see cref="T:IPA.Logging.StandardLogger"/>.
            </summary>
        </member>
        <member name="M:IPA.Logging.StandardLogger.StopLogThread">
            <summary>
            Stops and joins the log printer thread.
            </summary>
        </member>
        <member name="T:IPA.Logging.LoggerExtensions">
            <summary>
            A class providing extensions for various loggers.
            </summary>
        </member>
        <member name="M:IPA.Logging.LoggerExtensions.GetChildLogger(IPA.Logging.Logger,System.String)">
            <summary>
            Gets a child logger, if supported. Currently the only defined and supported logger is <see cref="T:IPA.Logging.StandardLogger"/>, and most plugins will only ever receive this anyway.
            </summary>
            <param name="logger">the parent <see cref="T:IPA.Logging.Logger"/></param>
            <param name="name">the name of the child</param>
            <returns>the child logger</returns>
        </member>
        <member name="T:IPA.OnEnableAttribute">
            <summary>
            Indicates that the target method should be called when the plugin is enabled.
            </summary>
            <remarks>
            <para>
            This attribute is interchangable with <see cref="T:IPA.OnStartAttribute"/>, and is treated identically.
            They are seperate to allow plugin code to more clearly describe the intent of the methods.
            </para>
            <para>
            Typically, this will be used when the <see cref="T:IPA.RuntimeOptions"/> parameter of the plugins's
            <see cref="T:IPA.PluginAttribute"/> is <see cref="F:IPA.RuntimeOptions.DynamicInit"/>.
            </para>
            <para>
            The method marked by this attribute will always be called from the Unity main thread.
            </para>
            </remarks>
            <seealso cref="T:IPA.PluginAttribute"/>
            <seealso cref="T:IPA.OnStartAttribute"/>
        </member>
        <member name="T:IPA.OnStartAttribute">
            <summary>
            Indicates that the target method should be called when the game starts.
            </summary>
            <remarks>
            <para>
            This attribute is interchangable with <see cref="T:IPA.OnEnableAttribute"/>, and is treated identically.
            They are seperate to allow plugin code to more clearly describe the intent of the methods.
            </para>
            <para>
            Typically, this will be used when the <see cref="T:IPA.RuntimeOptions"/> parameter of the plugins's
            <see cref="T:IPA.PluginAttribute"/> is <see cref="F:IPA.RuntimeOptions.SingleStartInit"/>.
            </para>
            <para>
            The method marked by this attribute will always be called from the Unity main thread.
            </para>
            </remarks>
            <seealso cref="T:IPA.PluginAttribute"/>
            <seealso cref="T:IPA.OnEnableAttribute"/>
        </member>
        <member name="T:IPA.OnDisableAttribute">
            <summary>
            Indicates that the target method should be called when the plugin is disabled.
            </summary>
            <remarks>
            <para>
            This attribute is interchangable with <see cref="T:IPA.OnExitAttribute"/>, and is treated identically.
            They are seperate to allow plugin code to more clearly describe the intent of the methods.
            </para>
            <para>
            Typically, this will be used when the <see cref="T:IPA.RuntimeOptions"/> parameter of the plugins's
            <see cref="T:IPA.PluginAttribute"/> is <see cref="F:IPA.RuntimeOptions.DynamicInit"/>.
            </para>
            <para>
            The method marked by this attribute will always be called from the Unity main thread.
            </para>
            </remarks>
            <seealso cref="T:IPA.PluginAttribute"/>
            <seealso cref="T:IPA.OnExitAttribute"/>
        </member>
        <member name="T:IPA.OnExitAttribute">
            <summary>
            Indicates that the target method should be called when the game exits.
            </summary>
            <remarks>
            <para>
            This attribute is interchangable with <see cref="T:IPA.OnDisableAttribute"/>, and is treated identically.
            They are seperate to allow plugin code to more clearly describe the intent of the methods.
            </para>
            <para>
            Typically, this will be used when the <see cref="T:IPA.RuntimeOptions"/> parameter of the plugins's
            <see cref="T:IPA.PluginAttribute"/> is <see cref="F:IPA.RuntimeOptions.SingleStartInit"/>.
            </para>
            <para>
            The method marked by this attribute will always be called from the Unity main thread.
            </para>
            </remarks>
            <seealso cref="T:IPA.PluginAttribute"/>
            <seealso cref="T:IPA.OnDisableAttribute"/>
        </member>
        <member name="T:IPA.PluginAttribute">
            <summary>
            Marks a class as being a BSIPA plugin.
            </summary>
            <seealso cref="T:IPA.InitAttribute"/>
            <seealso cref="T:IPA.OnEnableAttribute"/>
            <seealso cref="T:IPA.OnDisableAttribute"/>
            <seealso cref="T:IPA.OnStartAttribute"/>
            <seealso cref="T:IPA.OnExitAttribute"/>
        </member>
        <member name="P:IPA.PluginAttribute.RuntimeOptions">
            <summary>
            The <see cref="T:IPA.RuntimeOptions"/> passed into the constructor of this attribute.
            </summary>
        </member>
        <member name="M:IPA.PluginAttribute.#ctor(IPA.RuntimeOptions)">
            <summary>
            Initializes a <see cref="T:IPA.PluginAttribute"/> with the given <see cref="T:IPA.RuntimeOptions"/>
            to indicate the runtime capabilities of the plugin.
            </summary>
            <param name="runtimeOptions">the options to use for this plugin</param>
        </member>
        <member name="T:IPA.RuntimeOptions">
            <summary>
            Options that a plugin must specify to describe how it expects to be run.
            </summary>
            <seealso cref="T:IPA.PluginAttribute"/>
            <seealso cref="T:IPA.InitAttribute"/>
            <seealso cref="T:IPA.OnEnableAttribute"/>
            <seealso cref="T:IPA.OnDisableAttribute"/>
            <seealso cref="T:IPA.OnStartAttribute"/>
            <seealso cref="T:IPA.OnExitAttribute"/>
        </member>
        <member name="F:IPA.RuntimeOptions.SingleStartInit">
            <summary>
            <para>
            Indicates that this plugin expects to be initialized and enabled with the game, and disabled with the game.
            </para>
            <para>
            With this option set, whether or not the plugin is disabled during a given run is constant for that entire run.
            </para>
            </summary>
        </member>
        <member name="F:IPA.RuntimeOptions.DynamicInit">
            <summary>
            <para>
            Indicates that this plugin supports runtime enabling and disabling.
            </para>
            <para>
            When this is set, the plugin may be disabled at reasonable points during runtime. As with <see cref="F:IPA.RuntimeOptions.SingleStartInit"/>,
            it will be initialized and enabled with the game if it is enabled on startup, and disabled with the game if it is enabled
            on shutdown.
            </para>
            <para>
            When a plugin with this set is enabled mid-game, the first time it is enabled, its initialization methods will be called,
            then its enable methods. All subsequent enables will <b>NOT</b> re-initialize, however the enable methods will be called.
            </para>
            <para>
            When a plugin with this set is disabled mid-game, the plugin instance will <b>NOT</b> be destroyed, and will instead be
            re-used for subsequent enables. The plugin is expected to handle this gracefully, and behave in a way that makes sense.
            </para>
            </summary>
        </member>
        <member name="T:IPA.InitAttribute">
            <summary>
            Marks a method or a constructor as an inialization method.
            </summary>
            <remarks>
            <para>
            If more than one constructor is marked with this attribute, the one with the most parameters, whether or not they can be injected, will be used.
            </para>
            <para>
            Parameter injection is done with <see cref="T:IPA.Loader.PluginInitInjector"/>.
            </para>
            </remarks>
            <seealso cref="T:IPA.PluginAttribute"/>
            <seealso cref="T:IPA.Loader.PluginInitInjector"/>
        </member>
        <member name="T:IPA.Old.IEnhancedPlugin">
            <inheritdoc cref="T:IPA.Old.IPlugin" />
            <summary>
            An enhanced version of the standard IPA plugin.
            </summary>
        </member>
        <member name="P:IPA.Old.IEnhancedPlugin.Filter">
            <summary>
            Gets a list of executables this plugin should be executed on (without the file ending)
            </summary>
            <example>{ "PlayClub", "PlayClubStudio" }</example>
        </member>
        <member name="M:IPA.Old.IEnhancedPlugin.OnLateUpdate">
            <summary>
            Called after Update.
            </summary>
        </member>
        <member name="T:IPA.Old.IPlugin">
            <summary>
            Interface for generic Illusion unity plugins. Every class that implements this will be loaded if the DLL is placed in
            Plugins.
            </summary>
        </member>
        <member name="P:IPA.Old.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:IPA.Old.IPlugin.Version">
            <summary>
            Gets the version of the plugin.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnApplicationStart">
            <summary>
            Gets invoked when the application is started.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnApplicationQuit">
            <summary>
            Gets invoked when the application is closed.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnLevelWasLoaded(System.Int32)">
            <summary>
            Gets invoked whenever a level is loaded.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:IPA.Old.IPlugin.OnLevelWasInitialized(System.Int32)">
            <summary>
            Gets invoked after the first update cycle after a level was loaded.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:IPA.Old.IPlugin.OnUpdate">
            <summary>
            Gets invoked on every graphic update.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnFixedUpdate">
            <summary>
            Gets invoked on ever physics update.
            </summary>
        </member>
        <member name="T:IPA.Utilities.FieldAccessor`2">
            <summary>
            A type containing utilities for accessing non-public fields of objects.
            </summary>
            <typeparam name="T">the type that the fields are on</typeparam>
            <typeparam name="U">the type of the field to access</typeparam>
            <seealso cref="T:IPA.Utilities.PropertyAccessor`2"/>
        </member>
        <member name="T:IPA.Utilities.FieldAccessor`2.Accessor">
            <summary>
            A delegate for a field accessor taking a <typeparamref name="T"/> ref and returning a <typeparamref name="U"/> ref.
            </summary>
            <param name="obj">the object to access the field of</param>
            <returns>a reference to the field's value</returns>
        </member>
        <member name="M:IPA.Utilities.FieldAccessor`2.GetAccessor(System.String)">
            <summary>
            Gets an <see cref="T:IPA.Utilities.FieldAccessor`2.Accessor"/> for the field named <paramref name="name"/> on <typeparamref name="T"/>.
            </summary>
            <param name="name">the field name</param>
            <returns>an accessor for the field</returns>
            <exception cref="T:System.MissingFieldException">if the field does not exist on <typeparamref name="T"/></exception>
        </member>
        <member name="M:IPA.Utilities.FieldAccessor`2.Access(`0@,System.String)">
            <summary>
            Accesses a field for an object by name.
            </summary>
            <param name="obj">the object to access the field of</param>
            <param name="name">the name of the field to access</param>
            <returns>a reference to the object at the field</returns>
            <exception cref="T:System.MissingFieldException">if the field does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.GetAccessor(System.String)"/>
        </member>
        <member name="M:IPA.Utilities.FieldAccessor`2.Get(`0@,System.String)">
            <summary>
            Gets the value of a field of an object by name.
            </summary>
            <remarks>
            The only good reason to use this over <see cref="M:IPA.Utilities.FieldAccessor`2.Get(`0,System.String)"/> is when you are working with a value type,
            as it prevents a copy.
            </remarks>
            <param name="obj">the object to access the field of</param>
            <param name="name">the name of the field to access</param>
            <returns>the value of the field</returns>
            <exception cref="T:System.MissingFieldException">if the field does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Get(`0,System.String)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Access(`0@,System.String)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.GetAccessor(System.String)"/>
        </member>
        <member name="M:IPA.Utilities.FieldAccessor`2.Get(`0,System.String)">
            <summary>
            Gets the value of a field of an object by name.
            </summary>
            <param name="obj">the object to access the field of</param>
            <param name="name">the name of the field to access</param>
            <returns>the value of the field</returns>
            <exception cref="T:System.MissingFieldException">if the field does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Get(`0@,System.String)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Access(`0@,System.String)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.GetAccessor(System.String)"/>
        </member>
        <member name="M:IPA.Utilities.FieldAccessor`2.Set(`0@,System.String,`1)">
            <summary>
            Sets the value of a field for an object by name.
            </summary>
            <remarks>
            This overload must be used for value types.
            </remarks>
            <param name="obj">the object to set the field of</param>
            <param name="name">the name of the field</param>
            <param name="value">the value to set it to</param>
            <exception cref="T:System.MissingFieldException">if the field does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Set(`0,System.String,`1)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Access(`0@,System.String)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.GetAccessor(System.String)"/>
        </member>
        <member name="M:IPA.Utilities.FieldAccessor`2.Set(`0,System.String,`1)">
            <summary>
            Sets the value of a field for an object by name.
            </summary>
            <remarks>
            This overload cannot be safely used for value types. Use <see cref="M:IPA.Utilities.FieldAccessor`2.Set(`0@,System.String,`1)"/> instead.
            </remarks>
            <param name="obj">the object to set the field of</param>
            <param name="name">the name of the field</param>
            <param name="value">the value to set it to</param>
            <exception cref="T:System.MissingFieldException">if the field does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Set(`0@,System.String,`1)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Access(`0@,System.String)"/>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.GetAccessor(System.String)"/>
        </member>
        <member name="T:IPA.Utilities.PropertyAccessor`2">
            <summary>
            A type containing utilities for accessing non-public properties of an object.
            </summary>
            <typeparam name="T">the type that the properties are on</typeparam>
            <typeparam name="U">the type of the property to access</typeparam>
        </member>
        <member name="T:IPA.Utilities.PropertyAccessor`2.Getter">
            <summary>
            A getter for a property.
            </summary>
            <param name="obj">the object it is a member of</param>
            <returns>the value of the property</returns>
        </member>
        <member name="T:IPA.Utilities.PropertyAccessor`2.Setter">
            <summary>
            A setter for a property.
            </summary>
            <param name="obj">the object it is a member of</param>
            <param name="val">the new property value</param>
        </member>
        <member name="M:IPA.Utilities.PropertyAccessor`2.GetGetter(System.String)">
            <summary>
            Gets a <see cref="T:IPA.Utilities.PropertyAccessor`2.Getter"/> for the property identified by <paramref name="name"/>.
            </summary>
            <param name="name">the name of the property</param>
            <returns>a <see cref="T:IPA.Utilities.PropertyAccessor`2.Getter"/> that can access that property</returns>
            <exception cref="T:System.MissingMemberException">if the property does not exist</exception>
        </member>
        <member name="M:IPA.Utilities.PropertyAccessor`2.GetSetter(System.String)">
            <summary>
            Gets a <see cref="T:IPA.Utilities.PropertyAccessor`2.Setter"/> for the property identified by <paramref name="name"/>.
            </summary>
            <param name="name">the name of the property</param>
            <returns>a <see cref="T:IPA.Utilities.PropertyAccessor`2.Setter"/> that can access that property</returns>
            <exception cref="T:System.MissingMemberException">if the property does not exist</exception>
        </member>
        <member name="M:IPA.Utilities.PropertyAccessor`2.Get(`0@,System.String)">
            <summary>
            Gets the value of the property identified by <paramref name="name"/> on <paramref name="obj"/>.
            </summary>
            <remarks>
            The only reason to use this over <see cref="M:IPA.Utilities.PropertyAccessor`2.Get(`0,System.String)"/> is if you are using a value type because 
            it avoids a copy.
            </remarks>
            <param name="obj">the instance to access</param>
            <param name="name">the name of the property</param>
            <returns>the value of the property</returns>
            <exception cref="T:System.MissingMemberException">if the property does not exist</exception>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.Get(`0,System.String)"/>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.GetGetter(System.String)"/>
        </member>
        <member name="M:IPA.Utilities.PropertyAccessor`2.Get(`0,System.String)">
            <summary>
            Gets the value of the property identified by <paramref name="name"/> on <paramref name="obj"/>.
            </summary>
            <param name="obj">the instance to access</param>
            <param name="name">the name of the property</param>
            <returns>the value of the property</returns>
            <exception cref="T:System.MissingMemberException">if the property does not exist</exception>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.Get(`0@,System.String)"/>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.GetGetter(System.String)"/>
        </member>
        <member name="M:IPA.Utilities.PropertyAccessor`2.Set(`0@,System.String,`1)">
            <summary>
            Sets the value of the property identified by <paramref name="name"/> on <paramref name="obj"/>.
            </summary>
            <remarks>
            This overload must be used for value types.
            </remarks>
            <param name="obj">the instance to access</param>
            <param name="name">the name of the property</param>
            <param name="val">the new value of the property</param>
            <exception cref="T:System.MissingMemberException">if the property does not exist</exception>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.Set(`0,System.String,`1)"/>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.GetSetter(System.String)"/>
        </member>
        <member name="M:IPA.Utilities.PropertyAccessor`2.Set(`0,System.String,`1)">
            <summary>
            Sets the value of the property identified by <paramref name="name"/> on <paramref name="obj"/>.
            </summary>
            <remarks>
            This overload cannot be safely used for value types. Use <see cref="M:IPA.Utilities.PropertyAccessor`2.Set(`0@,System.String,`1)"/> instead.
            </remarks>
            <param name="obj">the instance to access</param>
            <param name="name">the name of the property</param>
            <param name="val">the new value of the property</param>
            <exception cref="T:System.MissingMemberException">if the property does not exist</exception>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.Set(`0@,System.String,`1)"/>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.GetSetter(System.String)"/>
        </member>
        <member name="T:IPA.Utilities.MethodAccessor`2">
            <summary>
            A type containing utilities for calling non-public methods on an object.
            </summary>
            <typeparam name="T">the type to find the methods on</typeparam>
            <typeparam name="TDelegate">the delegate type to create, and to use as a signature to search for</typeparam>
        </member>
        <member name="M:IPA.Utilities.MethodAccessor`2.GetDelegate(System.String)">
            <summary>
            Gets a delegate to the named method with the signature specified by <typeparamref name="TDelegate"/>.
            </summary>
            <param name="name">the name of the method to get</param>
            <returns>a delegate that can call the specified method</returns>
            <exception cref="T:System.MissingMethodException">if <paramref name="name"/> does not represent the name of a method with the given signature</exception>
            <exception cref="T:System.ArgumentException">if the method found returns a type incompatable with the return type of <typeparamref name="TDelegate"/></exception>
        </member>
        <member name="T:IPA.Utilities.AlmostVersion">
            <summary>
            A type that wraps <see cref="T:Hive.Versioning.Version"/> so that the string of the version is stored when the string is 
            not a valid <see cref="T:Hive.Versioning.Version"/>.
            </summary>
        </member>
        <member name="T:IPA.Utilities.AlmostVersion.StoredAs">
            <summary>
            Represents a storage type of either parsed <see cref="T:Hive.Versioning.Version"/> object or raw <see cref="F:IPA.Utilities.AlmostVersion.StoredAs.String"/>.
            </summary>
        </member>
        <member name="F:IPA.Utilities.AlmostVersion.StoredAs.SemVer">
            <summary>
            The version was stored as a <see cref="T:SemVer.Version"/>.
            </summary>
        </member>
        <member name="F:IPA.Utilities.AlmostVersion.StoredAs.String">
            <summary>
            The version was stored as a <see cref="F:IPA.Utilities.AlmostVersion.StoredAs.String"/>.
            </summary>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:IPA.Utilities.AlmostVersion"/> with the version string provided in <paramref name="vertext"/>.
            </summary>
            <param name="vertext">the version string to store</param>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.#ctor(Hive.Versioning.Version)">
            <summary>
            Creates an <see cref="T:IPA.Utilities.AlmostVersion"/> from the <see cref="T:Hive.Versioning.Version"/> provided in <paramref name="ver"/>.
            </summary>
            <param name="ver">the <see cref="T:Hive.Versioning.Version"/> to store</param>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.#ctor(SemVer.Version)">
            <summary>
            Creates an <see cref="T:IPA.Utilities.AlmostVersion"/> from the <see cref="T:SemVer.Version"/> provided in <paramref name="ver"/>.
            </summary>
            <param name="ver">the <see cref="T:SemVer.Version"/> to store</param>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.#ctor(System.String,IPA.Utilities.AlmostVersion.StoredAs)">
            <summary>
            Creates an <see cref="T:IPA.Utilities.AlmostVersion"/> from the version string in <paramref name="vertext"/> stored using 
            the storage mode specified in <paramref name="mode"/>.
            </summary>
            <param name="vertext">the text to parse as an <see cref="T:IPA.Utilities.AlmostVersion"/></param>
            <param name="mode">the storage mode to store the version in</param>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.#ctor(System.String,IPA.Utilities.AlmostVersion)">
            <summary>
            Creates a new <see cref="T:IPA.Utilities.AlmostVersion"/> from the version string in <paramref name="vertext"/> stored the
            same way as the <see cref="T:IPA.Utilities.AlmostVersion"/> passed in <paramref name="copyMode"/>.
            </summary>
            <param name="vertext">the text to parse as an <see cref="T:IPA.Utilities.AlmostVersion"/></param>
            <param name="copyMode">an <see cref="T:IPA.Utilities.AlmostVersion"/> to copy the storage mode of</param>
        </member>
        <member name="P:IPA.Utilities.AlmostVersion.StringValue">
            <summary>
            The value of the <see cref="T:IPA.Utilities.AlmostVersion"/> if it was stored as a <see cref="T:System.String"/>.
            </summary>
            <value>the stored value as a <see cref="T:System.String"/>, or <see langword="null"/> if not stored as a string.</value>
        </member>
        <member name="P:IPA.Utilities.AlmostVersion.SemverValue">
            <summary>
            The value of the <see cref="T:IPA.Utilities.AlmostVersion"/> if it was stored as a <see cref="T:Hive.Versioning.Version"/>.
            </summary>
            <value>the stored value as a <see cref="T:Hive.Versioning.Version"/>, or <see langword="null"/> if not stored as a version.</value>
        </member>
        <member name="P:IPA.Utilities.AlmostVersion.StorageMode">
            <summary>
            The way the value is stored, whether it be as a <see cref="T:Hive.Versioning.Version"/> or a <see cref="T:System.String"/>.
            </summary>
            <value>the storage mode used to store this value</value>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.ToString">
            <summary>
            Gets a string representation of the current version. If the value is stored as a string, this returns it. If it is
            stored as a <see cref="T:Hive.Versioning.Version"/>, it is equivalent to calling <see cref="M:Hive.Versioning.Version.ToString"/>.
            </summary>
            <returns>a string representation of the current version</returns>
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.CompareTo(IPA.Utilities.AlmostVersion)">
            <summary>
            Compares <see langword="this"/> to the <see cref="T:IPA.Utilities.AlmostVersion"/> in <paramref name="other"/> using <see cref="M:Hive.Versioning.Version.CompareTo(Hive.Versioning.Version)"/>
            or <see cref="M:System.String.CompareTo(System.String)"/>, depending on the current store.
            </summary>
            <remarks>
            The storage methods of the two objects must be the same, or this will throw an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
            <param name="other">the <see cref="T:IPA.Utilities.AlmostVersion"/> to compare to</param>
            <returns>less than 0 if <paramref name="other"/> is considered bigger than <see langword="this"/>, 0 if equal, and greater than zero if smaller</returns>
            <seealso cref="M:IPA.Utilities.AlmostVersion.CompareTo(Hive.Versioning.Version)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.CompareTo(Hive.Versioning.Version)">
            <summary>
            Compares <see langword="this"/> to the <see cref="T:Hive.Versioning.Version"/> in <paramref name="other"/> using <see cref="M:Hive.Versioning.Version.CompareTo(Hive.Versioning.Version)"/>.
            </summary>
            <remarks>
            The storage method of <see langword="this"/> must be <see cref="F:IPA.Utilities.AlmostVersion.StoredAs.SemVer"/>, else an <see cref="T:System.InvalidOperationException"/> will
            be thrown.
            </remarks>
            <param name="other">the <see cref="T:Hive.Versioning.Version"/> to compare to</param>
            <returns>less than 0 if <paramref name="other"/> is considered bigger than <see langword="this"/>, 0 if equal, and greater than zero if smaller</returns>
            <seealso cref="M:IPA.Utilities.AlmostVersion.CompareTo(IPA.Utilities.AlmostVersion)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.CompareTo(SemVer.Version)">
            <summary>
            Compares <see langword="this"/> to the <see cref="T:SemVer.Version"/> in <paramref name="other"/> using <see cref="M:Hive.Versioning.Version.CompareTo(Hive.Versioning.Version)"/>.
            </summary>
            <remarks>
            The storage method of <see langword="this"/> must be <see cref="F:IPA.Utilities.AlmostVersion.StoredAs.SemVer"/>, else an <see cref="T:System.InvalidOperationException"/> will
            be thrown.
            </remarks>
            <param name="other">the <see cref="T:SemVer.Version"/> to compare to</param>
            <returns>less than 0 if <paramref name="other"/> is considered bigger than <see langword="this"/>, 0 if equal, and greater than zero if smaller</returns>
            <seealso cref="M:IPA.Utilities.AlmostVersion.CompareTo(IPA.Utilities.AlmostVersion)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.Equals(System.Object)">
            <summary>
            Performs a strict equality check between <see langword="this"/> and <paramref name="obj"/>.
            </summary>
            <remarks>
            This may return <see langword="false"/> where <see cref="M:IPA.Utilities.AlmostVersion.op_Equality(IPA.Utilities.AlmostVersion,IPA.Utilities.AlmostVersion)"/> returns <see langword="true"/>
            </remarks>
            <param name="obj">the object to compare to</param>
            <returns><see langword="true"/> if they are equal, <see langword="false"/> otherwise</returns>
            <seealso cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.GetHashCode">
            <summary>
            Default generated hash code function generated by VS.
            </summary>
            <returns>a value unique to each object, except those that are considered equal by <see cref="M:IPA.Utilities.AlmostVersion.Equals(System.Object)"/></returns>
            <seealso cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.op_Equality(IPA.Utilities.AlmostVersion,IPA.Utilities.AlmostVersion)">
            <summary>
            Compares two versions, only taking into account the numeric part of the version if they are stored as <see cref="T:Hive.Versioning.Version"/>s,
            or strict equality if they are stored as <see cref="T:System.String"/>s.
            </summary>
            <remarks>
            This is a looser equality than <see cref="M:IPA.Utilities.AlmostVersion.Equals(System.Object)"/>, meaning that this may return <see langword="true"/> where <see cref="M:IPA.Utilities.AlmostVersion.Equals(System.Object)"/>
            does not.
            </remarks>
            <param name="l">the first value to compare</param>
            <param name="r">the second value to compare</param>
            <returns><see langword="true"/> if they are mostly equal, <see langword="false"/> otherwise</returns>
            <seealso cref="M:IPA.Utilities.AlmostVersion.Equals(System.Object)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.op_Inequality(IPA.Utilities.AlmostVersion,IPA.Utilities.AlmostVersion)">
            <summary>
            The opposite of <see cref="M:IPA.Utilities.AlmostVersion.op_Equality(IPA.Utilities.AlmostVersion,IPA.Utilities.AlmostVersion)"/>. Equivalent to <c>!(l == r)</c>.
            </summary>
            <param name="l">the first value to compare</param>
            <param name="r">the second value to compare</param>
            <returns><see langword="true"/> if they are not mostly equal, <see langword="false"/> otherwise</returns>
            <seealso cref="M:IPA.Utilities.AlmostVersion.op_Equality(IPA.Utilities.AlmostVersion,IPA.Utilities.AlmostVersion)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.op_Implicit(SemVer.Version)~IPA.Utilities.AlmostVersion">
            <summary>
            Implicitly converts a <see cref="T:SemVer.Version"/> to <see cref="T:IPA.Utilities.AlmostVersion"/> using <see cref="M:IPA.Utilities.AlmostVersion.#ctor(SemVer.Version)"/>.
            </summary>
            <param name="ver">the <see cref="T:SemVer.Version"/> to convert</param>
            <seealso cref="M:IPA.Utilities.AlmostVersion.#ctor(SemVer.Version)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.op_Implicit(IPA.Utilities.AlmostVersion)~SemVer.Version">
            <summary>
            Implicitly converts an <see cref="T:IPA.Utilities.AlmostVersion"/> to <see cref="T:SemVer.Version"/>, if applicable, using <see cref="P:IPA.Utilities.AlmostVersion.SemverValue"/>.
            If not applicable, returns <see langword="null"/>
            </summary>
            <param name="av">the <see cref="T:IPA.Utilities.AlmostVersion"/> to convert to a <see cref="T:SemVer.Version"/></param>
            <seealso cref="P:IPA.Utilities.AlmostVersion.SemverValue"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.op_Implicit(Hive.Versioning.Version)~IPA.Utilities.AlmostVersion">
            <summary>
            Implicitly converts a <see cref="T:SemVer.Version"/> to <see cref="T:IPA.Utilities.AlmostVersion"/> using <see cref="M:IPA.Utilities.AlmostVersion.#ctor(SemVer.Version)"/>.
            </summary>
            <param name="ver">the <see cref="T:SemVer.Version"/> to convert</param>
            <seealso cref="M:IPA.Utilities.AlmostVersion.#ctor(SemVer.Version)"/>
        </member>
        <member name="M:IPA.Utilities.AlmostVersion.op_Implicit(IPA.Utilities.AlmostVersion)~Hive.Versioning.Version">
            <summary>
            Implicitly converts an <see cref="T:IPA.Utilities.AlmostVersion"/> to <see cref="T:SemVer.Version"/>, if applicable, using <see cref="P:IPA.Utilities.AlmostVersion.SemverValue"/>.
            If not applicable, returns <see langword="null"/>
            </summary>
            <param name="av">the <see cref="T:IPA.Utilities.AlmostVersion"/> to convert to a <see cref="T:SemVer.Version"/></param>
            <seealso cref="P:IPA.Utilities.AlmostVersion.SemverValue"/>
        </member>
        <member name="T:IPA.Utilities.AlmostVersionConverter">
            <summary>
            A <see cref="T:IPA.Config.Stores.ValueConverter`1"/> for <see cref="T:IPA.Utilities.AlmostVersion"/>s.
            </summary>
        </member>
        <member name="M:IPA.Utilities.AlmostVersionConverter.FromValue(IPA.Config.Data.Value,System.Object)">
            <summary>
            Converts a <see cref="T:IPA.Config.Data.Text"/> node into an <see cref="T:IPA.Utilities.AlmostVersion"/>.
            </summary>
            <param name="value">the <see cref="T:IPA.Config.Data.Text"/> node to convert</param>
            <param name="parent">the owner of the new object</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Utilities.AlmostVersionConverter.ToValue(IPA.Utilities.AlmostVersion,System.Object)">
            <summary>
            Converts an <see cref="T:IPA.Utilities.AlmostVersion"/> to a <see cref="T:IPA.Config.Data.Text"/> node.
            </summary>
            <param name="obj">the <see cref="T:IPA.Utilities.AlmostVersion"/> to convert</param>
            <param name="parent">the parent of <paramref name="obj"/></param>
            <returns>a <see cref="T:IPA.Config.Data.Text"/> node representing <paramref name="obj"/></returns>
        </member>
        <member name="T:IPA.Utilities.Async.Coroutines">
            <summary>
            A class providing coroutine helpers.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Async.Coroutines.WaitForTask(System.Threading.Tasks.Task)">
            <summary>
            Stalls the coroutine until <paramref name="task"/> completes, faults, or is canceled.
            </summary>
            <param name="task">the <see cref="T:System.Threading.Tasks.Task"/> to wait for</param>
            <returns>a coroutine waiting for the given task</returns>
        </member>
        <member name="M:IPA.Utilities.Async.Coroutines.WaitForTask(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Stalls the coroutine until <paramref name="task"/> completes, faults, or is canceled.
            </summary>
            <param name="task">the <see cref="T:System.Threading.Tasks.Task"/> to wait for</param>
            <param name="throwOnFault">whether or not to throw if the task faulted</param>
            <returns>a coroutine waiting for the given task</returns>
        </member>
        <member name="M:IPA.Utilities.Async.Coroutines.AsTask(System.Collections.IEnumerator)">
            <summary>
            Binds a <see cref="T:System.Threading.Tasks.Task"/> to a Unity coroutine, capturing exceptions as well as the coroutine call stack.
            </summary>
            <remarks>
            <para>
            This may be called off of the Unity main thread. If it is, the coroutine start will be scheduled using the default
            <see cref="T:IPA.Utilities.Async.UnityMainThreadTaskScheduler"/> and will be run on the main thread as required by Unity.
            </para>
            <para>
            Unity provides a handful of coroutine helpers that are not <see cref="T:System.Collections.IEnumerable"/>s. Most of these are not terribly
            helpful on their own, however <see cref="T:UnityEngine.WaitForSeconds"/> may be. Instead, prefer to use the typical .NET
            <see cref="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)"/> or similar overloads, or use <see cref="T:UnityEngine.WaitForSecondsRealtime"/>.
            </para>
            </remarks>
            <param name="coroutine">the coroutine to bind to a task</param>
            <returns>a <see cref="T:System.Threading.Tasks.Task"/> that completes when <paramref name="coroutine"/> completes, and fails when it throws</returns>
        </member>
        <member name="T:IPA.Utilities.Async.SingleCreationValueCache`2">
            <summary>
            A dictionary-like type intended for thread-safe value caches whose values are created only once ever.
            </summary>
            <typeparam name="TKey">the key type of the cache</typeparam>
            <typeparam name="TValue">the value type of the cache</typeparam>
            <remarks>
            This object basically wraps a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> with some special handling
            to ensure that values are only created once ever, without having multiple parallel constructions.
            </remarks>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IPA.Utilities.Async.SingleCreationValueCache`2"/>
            class that is empty, has the default concurrency level, has the default initial
            capacity, and uses the default comparer for the key type.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:IPA.Utilities.Async.SingleCreationValueCache`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            has the default concurrency level, has the default initial capacity, and uses
            the default comparer for the key type.
            </summary>
            <param name="collection">the <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose element are to be used for the new cache</param>
            <exception cref="T:System.ArgumentNullException">when any arguments are null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> contains duplicate keys</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IPA.Utilities.Async.SingleCreationValueCache`2"/>
            class that is empty, has the default concurrency level and capacity, and uses
            the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">the equality comparer to use when comparing keys</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IPA.Utilities.Async.SingleCreationValueCache`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            has the default concurrency level, has the default initial capacity, and uses
            the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="collection">the <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are to be used for the new cache</param>
            <param name="comparer">the equality comparer to use when comparing keys</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is null</exception>
        </member>
        <member name="P:IPA.Utilities.Async.SingleCreationValueCache`2.IsEmpty">
            <summary>
            Gets a value that indicates whether this cache is empty. 
            </summary>
        </member>
        <member name="P:IPA.Utilities.Async.SingleCreationValueCache`2.Count">
            <summary>
            Gets the number of elements that this cache contains.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.ContainsKey(`0)">
            <summary>
            Gets a value indicating whether or not this cache contains <paramref name="key"/>.
            </summary>
            <param name="key">the key to search for</param>
            <returns><see langword="true"/> if the cache contains the key, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.ToArray">
            <summary>
            Copies the key-value pairs stored by the cache to a new array, filtering all elements that are currently being
            created.
            </summary>
            <returns>an array containing a snapshot of the key-value pairs contained in this cache</returns>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key from the cache.
            </summary>
            <param name="key">the key to search for</param>
            <param name="value">the value retrieved, if any</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:IPA.Utilities.Async.SingleCreationValueCache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Gets the value associated with the specified key from the cache. If it does not exist, and
            no creators are currently running for this key, then the creator is called to create the value
            and the value is added to the cache. If there is a creator currently running for the key, then
            this waits for the creator to finish and retrieves the value.
            </summary>
            <param name="key">the key to search for</param>
            <param name="creator">the delegate to use to create the value if it does not exist</param>
            <returns>the value that was found, or the result of <paramref name="creator"/></returns>
        </member>
        <member name="T:IPA.Utilities.Async.SingleThreadTaskScheduler">
            <summary>
            A single-threaded task scheduler that runs all of its tasks on the same thread.
            </summary>
        </member>
        <member name="P:IPA.Utilities.Async.SingleThreadTaskScheduler.IsRunning">
            <summary>
            Gets whether or not the underlying thread has been started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.Start">
            <summary>
            Starts the thread that executes tasks scheduled with this <see cref="T:System.Threading.Tasks.TaskScheduler"/>
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.Exit">
            <summary>
            Terminates the runner thread, and waits for the currently running task to complete.
            </summary>
            <remarks>
            After this method returns, this object has been disposed and is no longer in a valid state.
            </remarks>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/>s that did not execute</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.Join">
            <summary>
            Waits for the runner thread to complete all tasks in the queue, then exits.
            </summary>
            <remarks>
            After this method returns, this object has been disposed and is no longer in a valid state.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.GetScheduledTasks">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>nothing</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a given <see cref="T:System.Threading.Tasks.Task"/> to this scheduler. The <see cref="T:System.Threading.Tasks.Task"/> <i>must></i> be
            scheduled for this <see cref="T:System.Threading.Tasks.TaskScheduler"/> by the runtime.
            </summary>
            <param name="task">the <see cref="T:System.Threading.Tasks.Task"/> to queue</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Rejects any attempts to execute a task inline.
            </summary>
            <remarks>
            This task scheduler <i>always</i> runs its tasks on the thread that it manages, therefore it doesn't
            make sense to run it inline.
            </remarks>
            <param name="task">the task to attempt to execute</param>
            <param name="taskWasPreviouslyQueued">whether the task was previously queued to this scheduler</param>
            <returns><see langword="false"/></returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing">whether or not to dispose managed objects</param>
        </member>
        <member name="M:IPA.Utilities.Async.SingleThreadTaskScheduler.Dispose">
            <summary>
            Disposes this object. This puts the object into an unusable state.
            </summary>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization">
            <summary>
            Utilities for inter-thread synchronization. All Locker method acquire their object immediately,
            and should only be used with <see langword="using"/> to automatically release them.
            </summary>
            <example>
            <para>
            The canonical usage of *all* of the member functions is as follows, substituting <see cref="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.Mutex)"/>
            with whichever member you want to use, according to your lock type.
            </para>
            <code>
            using var _locker = Synchronization.Lock(mutex);
            </code>
            </example>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization.MutexLocker">
            <summary>
            A locker for a <see cref="T:System.Threading.Mutex"/> that automatically releases when it is disposed.
            Create this with <see cref="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.Mutex)"/>.
            </summary>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
            <seealso cref="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.Mutex)"/>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization.SemaphoreLocker">
            <summary>
            A locker for a <see cref="T:System.Threading.Semaphore"/> that automatically releases when it is disposed.
            Create this with <see cref="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.Semaphore)"/>.
            </summary>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
            <seealso cref="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.Semaphore)"/>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization.SemaphoreSlimLocker">
            <summary>
            A locker for a <see cref="T:System.Threading.SemaphoreSlim"/> that automatically releases when it is disposed.
            Create this with <see cref="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.SemaphoreSlim)"/>.
            </summary>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
            <seealso cref="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.SemaphoreSlim)"/>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization.SemaphoreSlimAsyncLocker">
            <summary>
            A locker for a <see cref="T:System.Threading.SemaphoreSlim"/> that was created asynchronously and automatically releases
            when it is disposed. Create this with <see cref="M:IPA.Utilities.Async.Synchronization.LockAsync(System.Threading.SemaphoreSlim)"/>.
            </summary>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
            <seealso cref="M:IPA.Utilities.Async.Synchronization.LockAsync(System.Threading.SemaphoreSlim)"/>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimWriteLocker">
            <summary>
            A locker for a write lock on a <see cref="T:System.Threading.ReaderWriterLockSlim"/> that automatically releases when
            it is disposed. Create this with <see cref="M:IPA.Utilities.Async.Synchronization.LockWrite(System.Threading.ReaderWriterLockSlim)"/>.
            </summary>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
            <seealso cref="M:IPA.Utilities.Async.Synchronization.LockWrite(System.Threading.ReaderWriterLockSlim)"/>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimReadLocker">
            <summary>
            A locker for a read lock on a <see cref="T:System.Threading.ReaderWriterLockSlim"/> that automatically releases when
            it is disposed. Create this with <see cref="M:IPA.Utilities.Async.Synchronization.LockRead(System.Threading.ReaderWriterLockSlim)"/>.
            </summary>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
            <seealso cref="M:IPA.Utilities.Async.Synchronization.LockRead(System.Threading.ReaderWriterLockSlim)"/>
        </member>
        <member name="T:IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimUpgradableReadLocker">
            <summary>
            A locker for an upgradable read lock on a <see cref="T:System.Threading.ReaderWriterLockSlim"/> that automatically releases
            when it is disposed. Create this with <see cref="M:IPA.Utilities.Async.Synchronization.LockReadUpgradable(System.Threading.ReaderWriterLockSlim)"/>.
            </summary>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
            <seealso cref="M:IPA.Utilities.Async.Synchronization.LockReadUpgradable(System.Threading.ReaderWriterLockSlim)"/>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimUpgradableReadLocker.Upgrade">
            <summary>
            Creates a locker for a write lock on the <see cref="T:System.Threading.ReaderWriterLockSlim"/> associated with this locker,
            upgrading the current thread's lock.
            </summary>
            <returns>a locker for the new write lock</returns>
            <seealso cref="T:IPA.Utilities.Async.Synchronization"/>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.Mutex)">
            <summary>
            Creates a locker for a mutex.
            </summary>
            <param name="mut">the mutex to acquire</param>
            <returns>the locker to use with <see langword="using"/></returns>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.Semaphore)">
            <summary>
            Creates a locker for a semaphore.
            </summary>
            <param name="sem">the semaphore to acquire</param>
            <returns>the locker to use with <see langword="using"/></returns>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.Lock(System.Threading.SemaphoreSlim)">
            <summary>
            Creates a locker for a slim semaphore.
            </summary>
            <param name="sem">the slim semaphore to acquire</param>
            <returns>the locker to use with <see langword="using"/></returns>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.LockAsync(System.Threading.SemaphoreSlim)">
            <summary>
            Creates a locker for a slim semaphore asynchronously.
            </summary>
            <param name="sem">the slim semaphore to acquire async</param>
            <returns>the locker to use with <see langword="using"/></returns>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.LockWrite(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates a locker for a write lock <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
            <param name="rwl">the lock to acquire in write mode</param>
            <returns>the locker to use with <see langword="using"/></returns>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.LockRead(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates a locker for a read lock on a <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
            <param name="rwl">the lock to acquire in read mode</param>
            <returns>the locker to use with <see langword="using"/></returns>
        </member>
        <member name="M:IPA.Utilities.Async.Synchronization.LockReadUpgradable(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates a locker for an upgradable read lock on a <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
            <param name="rwl">the lock to acquire in upgradable read mode</param>
            <returns>the locker to use with <see langword="using"/></returns>
        </member>
        <member name="T:IPA.Utilities.Async.UnityMainThreadTaskScheduler">
            <summary>
            A task scheduler that runs tasks on the Unity main thread via coroutines.
            </summary>
        </member>
        <member name="P:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Default">
            <summary>
            Gets the default main thread scheduler that is managed by BSIPA.
            </summary>
            <value>a scheduler that is managed by BSIPA</value>
        </member>
        <member name="P:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Factory">
            <summary>
            Gets a factory for creating tasks on <see cref="P:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Default"/>.
            </summary>
            <value>a factory for creating tasks on the default scheduler</value>
        </member>
        <member name="P:IPA.Utilities.Async.UnityMainThreadTaskScheduler.IsRunning">
            <summary>
            Gets whether or not this scheduler is currently executing tasks.
            </summary>
            <value><see langword="true"/> if the scheduler is running, <see langword="false"/> otherwise</value>
        </member>
        <member name="P:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Cancelling">
            <summary>
            Gets whether or not this scheduler is in the process of shutting down.
            </summary>
            <value><see langword="true"/> if the scheduler is shutting down, <see langword="false"/> otherwise</value>
        </member>
        <member name="P:IPA.Utilities.Async.UnityMainThreadTaskScheduler.YieldAfterTasks">
            <summary>
            Gets or sets the number of tasks to execute before yielding back to Unity.
            </summary>
            <value>the number of tasks to execute per resume</value>
        </member>
        <member name="P:IPA.Utilities.Async.UnityMainThreadTaskScheduler.YieldAfterTime">
            <summary>
            Gets or sets the amount of time to execute tasks for before yielding back to Unity. Default is 0.5ms.
            </summary>
            <value>the amount of time to execute tasks for before yielding back to Unity</value>
        </member>
        <member name="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Coroutine">
            <summary>
            When used as a Unity coroutine, runs the scheduler. Otherwise, this is an invalid call.
            </summary>
            <remarks>
            <para>
            Do not ever call <see cref="M:UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator)"/> on this
            coroutine, nor <see cref="M:UnityEngine.MonoBehaviour.StopAllCoroutines"/> on the behaviour hosting
            this coroutine. This has no way to detect this, and this object will become invalid.
            </para>
            <para>
            If you need to stop this coroutine, first call <see cref="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Cancel"/>, then wait for it to
            exit on its own.
            </para>
            </remarks>
            <returns>a Unity coroutine</returns>
            <exception cref="T:System.ObjectDisposedException">if this scheduler is disposed</exception>
            <exception cref="T:System.InvalidOperationException">if the scheduler is already running</exception>
        </member>
        <member name="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Cancel">
            <summary>
            Cancels the scheduler. If the scheduler is currently executing tasks, that batch will finish first.
            All remaining tasks will be left in the queue.
            </summary>
            <exception cref="T:System.ObjectDisposedException">if this scheduler is disposed</exception>
            <exception cref="T:System.InvalidOperationException">if the scheduler is not running</exception>
        </member>
        <member name="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.GetScheduledTasks">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>nothing</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a given <see cref="T:System.Threading.Tasks.Task"/> to this scheduler. The <see cref="T:System.Threading.Tasks.Task"/> <i>must</i> be
            scheduled for this <see cref="T:System.Threading.Tasks.TaskScheduler"/> by the runtime.
            </summary>
            <param name="task">the <see cref="T:System.Threading.Tasks.Task"/> to queue</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Runs the task inline if the current thread is the Unity main thread.
            </summary>
            <param name="task">the task to attempt to execute</param>
            <param name="taskWasPreviouslyQueued">whether the task was previously queued to this scheduler</param>
            <returns><see langword="false"/> if the task could not be run, <see langword="true"/> if it was</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object has already been disposed.</exception>
        </member>
        <member name="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing">whether or not to dispose managed objects</param>
        </member>
        <member name="M:IPA.Utilities.Async.UnityMainThreadTaskScheduler.Dispose">
            <summary>
            Disposes this object. This puts the object into an unusable state.
            </summary>
        </member>
        <member name="T:IPA.Utilities.CriticalSection">
            <summary>
            Provides utilities for managing various critical sections.
            </summary>
        </member>
        <member name="T:IPA.Utilities.CriticalSection.AutoExecuteSection">
            <summary>
            A struct that allows <c>using</c> blocks to manage an execute section.
            </summary>
        </member>
        <member name="M:IPA.Utilities.CriticalSection.ExecuteSection">
            <summary>
            Creates an <see cref="T:IPA.Utilities.CriticalSection.AutoExecuteSection"/> for automated management of an execute section.
            </summary>
            <returns>the new <see cref="T:IPA.Utilities.CriticalSection.AutoExecuteSection"/> that manages the section</returns>
        </member>
        <member name="M:IPA.Utilities.CriticalSection.EnterExecuteSection">
            <summary>
            Enters a critical execution section. Does not nest.
            </summary>
            <note>
            During a critical execution section, the program must execute until the end of the section before
            exiting. If an exit signal is recieved during the section, it will be canceled, and the process
            will terminate at the end of the section.
            </note>
        </member>
        <member name="M:IPA.Utilities.CriticalSection.ExitExecuteSection">
            <summary>
            Exits a critical execution section. Does not nest.
            </summary>
            <note>
            During a critical execution section, the program must execute until the end of the section before
            exiting. If an exit signal is recieved during the section, it will be canceled, and the process
            will terminate at the end of the section.
            </note>
        </member>
        <member name="T:IPA.Utilities.EnumerableExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/> that don't currently exist in <c>System.Linq</c>.
            </summary>
        </member>
        <member name="M:IPA.Utilities.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            LINQ-style extension method that filters <see langword="null"/> elements out of an enumeration.
            </summary>
            <typeparam name="T">the type of the enumeration</typeparam>
            <param name="self">the enumeration to filter</param>
            <returns>a filtered enumerable</returns>
        </member>
        <member name="M:IPA.Utilities.EnumerableExtensions.NonNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            LINQ-style extension method that filters <see langword="null"/> elements out of an enumeration based on a converter.
            </summary>
            <typeparam name="T">the type of the enumeration</typeparam>
            <typeparam name="U">the type to compare to null</typeparam>
            <param name="self">the enumeration to filter</param>
            <param name="pred">the predicate to select for filtering</param>
            <returns>a filtered enumerable</returns>
        </member>
        <member name="M:IPA.Utilities.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            LINQ-style extension method that filters <see langword="null"/> elements from an enumeration of nullable types.
            </summary>
            <typeparam name="T">the underlying type of the nullable enumeration</typeparam>
            <param name="self">the enumeration to filter</param>
            <returns>a filtered enumerable</returns>
        </member>
        <member name="M:IPA.Utilities.EnumerableExtensions.NonNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            LINQ-style extension method that filters <see langword="null"/> elements out of an enumeration based on a converter to a nullable type.
            </summary>
            <typeparam name="T">the type of the enumeration</typeparam>
            <typeparam name="U">the type of the predicate's resulting nullable</typeparam>
            <param name="self">the enumeration to filter</param>
            <param name="pred">the predicate to select for filtering</param>
            <returns>a filtered enumerable</returns>
        </member>
        <member name="T:IPA.Utilities.Extensions">
            <summary>
            A class providing various extension methods.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Extensions.GetDefault(System.Type)">
            <summary>
            Gets the default value for a given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">the <see cref="T:System.Type"/> to get the default value for</param>
            <returns>the default value of <paramref name="type"/></returns>
        </member>
        <member name="M:IPA.Utilities.Extensions.Unwrap(System.Nullable{System.Boolean})">
            <summary>
            Unwraps a <see cref="T:System.Nullable`1"/> where T is <see cref="T:System.Boolean"/> such that if the value is null, it gives <see langword="false"/>.
            </summary>
            <param name="self">the bool? to unwrap</param>
            <returns>the unwrapped value, or <see langword="false"/> if it was <see langword="null"/></returns>
        </member>
        <member name="M:IPA.Utilities.Extensions.IsSubPathOf(System.String,System.String)">
            <summary>
            Returns true if <paramref name="path"/> starts with the path <paramref name="baseDirPath"/>.
            The comparison is case-insensitive, handles / and \ slashes as folder separators and
            only matches if the base dir folder name is matched exactly ("c:\foobar\file.txt" is not a sub path of "c:\foo").
            </summary>
        </member>
        <member name="M:IPA.Utilities.Extensions.WithEnding(System.String,System.String)">
            <summary>
            Returns <paramref name="str"/> with the minimal concatenation of <paramref name="ending"/> (starting from end) that
            results in satisfying .EndsWith(ending).
            </summary>
            <example>"hel".WithEnding("llo") returns "hello", which is the result of "hel" + "lo".</example>
        </member>
        <member name="M:IPA.Utilities.Extensions.Right(System.String,System.Int32)">
            <summary>Gets the rightmost <paramref name="length" /> characters from a string.</summary>
            <param name="value">The string to retrieve the substring from.</param>
            <param name="length">The number of characters to retrieve.</param>
            <returns>The substring.</returns>
        </member>
        <member name="T:IPA.Utilities.Ref">
            <summary>
            Utilities to create <see cref="T:IPA.Utilities.Ref`1"/> using type inference.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Ref.Create``1(``0)">
            <summary>
            Creates a <see cref="T:IPA.Utilities.Ref`1"/>.
            </summary>
            <typeparam name="T">the type to reference.</typeparam>
            <param name="val">the default value.</param>
            <returns>the new <see cref="T:IPA.Utilities.Ref`1"/>.</returns>
        </member>
        <member name="T:IPA.Utilities.Ref`1">
            <summary>
            A class to store a reference for passing to methods which cannot take ref parameters.
            </summary>
            <typeparam name="T">the type of the value</typeparam>
        </member>
        <member name="P:IPA.Utilities.Ref`1.Value">
            <summary>
            The value of the reference
            </summary>
            <value>the value wrapped by this <see cref="T:IPA.Utilities.Ref`1"/></value>
        </member>
        <member name="P:IPA.Utilities.Ref`1.Error">
            <summary>
            An exception that was generated while creating the value.
            </summary>
            <value>the error held in this <see cref="T:IPA.Utilities.Ref`1"/></value>
        </member>
        <member name="M:IPA.Utilities.Ref`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="reference">the initial value of the reference</param>
        </member>
        <member name="M:IPA.Utilities.Ref`1.op_Implicit(IPA.Utilities.Ref{`0})~`0">
            <summary>
            Converts to referenced type, returning the stored reference.
            </summary>
            <param name="self">the object to be de-referenced</param>
            <returns>the value referenced by the object</returns>
        </member>
        <member name="M:IPA.Utilities.Ref`1.op_Implicit(`0)~IPA.Utilities.Ref{`0}">
            <summary>
            Converts a value T to a reference to that object. Will overwrite the reference in the left hand expression if there is one.
            </summary>
            <param name="toConvert">the value to wrap in the Ref</param>
            <returns>the Ref wrapping the value</returns>
        </member>
        <member name="M:IPA.Utilities.Ref`1.Verify">
            <summary>
            Throws error if one was set.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Ref`1.CompareTo(`0)">
            <summary>
            Compares the wrapped object to the other object.
            </summary>
            <param name="other">the object to compare to</param>
            <returns>the value of the comparison</returns>
        </member>
        <member name="M:IPA.Utilities.Ref`1.CompareTo(IPA.Utilities.Ref{`0})">
            <summary>
            Compares the wrapped object to the other wrapped object.
            </summary>
            <param name="other">the wrapped object to compare to</param>
            <returns>the value of the comparison</returns>
        </member>
        <member name="T:IPA.Utilities.ReflectionUtil">
            <summary>
            A utility class providing reflection helper methods.
            </summary>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.SetField``2(``0,System.String,``1)">
            <summary>
            Sets a field on the target object, as gotten from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type to get the field from</typeparam>
            <typeparam name="U">the type of the field to set</typeparam>
            <param name="obj">the object instance</param>
            <param name="fieldName">the field to set</param>
            <param name="value">the value to set it to</param>
            <exception cref="T:System.MissingFieldException">if <paramref name="fieldName"/> does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Set(`0@,System.String,`1)"/>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.GetField``2(``1,System.String)">
            <summary>
            Gets the value of a field.
            </summary>
            <typeparam name="T">the type to get the field from</typeparam>
            <typeparam name="U">the type of the field (result casted)</typeparam>
            <param name="obj">the object instance to pull from</param>
            <param name="fieldName">the name of the field to read</param>
            <returns>the value of the field</returns>
            <exception cref="T:System.MissingFieldException">if <paramref name="fieldName"/> does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.FieldAccessor`2.Get(`0@,System.String)"/>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.SetProperty``2(``0,System.String,``1)">
            <summary>
            Sets a property on the target object, as gotten from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type to get the property from</typeparam>
            <typeparam name="U">the type of the property to set</typeparam>
            <param name="obj">the object instance</param>
            <param name="propertyName">the property to set</param>
            <param name="value">the value to set it to</param>
            <exception cref="T:System.MissingMemberException">if <paramref name="propertyName"/> does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.Set(`0@,System.String,`1)"/>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.GetProperty``2(``1,System.String)">
            <summary>
            Gets a property on the target object, as gotten from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type to get the property from</typeparam>
            <typeparam name="U">the type of the property to get</typeparam>
            <param name="obj">the object instance</param>
            <param name="propertyName">the property to get</param>
            <returns>the value of the property</returns>
            <exception cref="T:System.MissingMemberException">if <paramref name="propertyName"/> does not exist on <typeparamref name="T"/></exception>
            <seealso cref="M:IPA.Utilities.PropertyAccessor`2.Get(`0@,System.String)"/>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.InvokeMethod``2(``1,System.String,System.Object[])">
            <summary>
            Invokes a method from <typeparamref name="T"/> on an object.
            </summary>
            <typeparam name="U">the type that the method returns</typeparam>
            <typeparam name="T">the type to search for the method on</typeparam>
            <param name="obj">the object instance</param>
            <param name="methodName">the method's name</param>
            <param name="args">the method arguments</param>
            <returns>the return value</returns>
            <exception cref="T:System.MissingMethodException">if <paramref name="methodName"/> does not exist on <typeparamref name="T"/></exception>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CopyComponent(UnityEngine.Component,System.Type,UnityEngine.GameObject,System.Type)">
            <summary>
            Copies a component <paramref name="original"/> to a component of <paramref name="overridingType"/> on the destination <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="original">the original component</param>
            <param name="overridingType">the new component's type</param>
            <param name="destination">the destination GameObject</param>
            <param name="originalTypeOverride">overrides the source component type (for example, to a superclass)</param>
            <returns>the copied component</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CopyComponent``1(UnityEngine.Component,UnityEngine.GameObject,System.Type)">
            <summary>
            A generic version of <see cref="M:IPA.Utilities.ReflectionUtil.CopyComponent(UnityEngine.Component,System.Type,UnityEngine.GameObject,System.Type)"/>. 
            </summary>
            <seealso cref="M:IPA.Utilities.ReflectionUtil.CopyComponent(UnityEngine.Component,System.Type,UnityEngine.GameObject,System.Type)"/>
            <typeparam name="T">the overriding type</typeparam>
            <param name="original">the original component</param>
            <param name="destination">the destination game object</param>
            <param name="originalTypeOverride">overrides the source component type (for example, to a superclass)</param>
            <returns>the copied component</returns>
        </member>
        <member name="T:IPA.Utilities.UnityGame">
            <summary>
            Provides some basic utility methods and properties of Beat Saber
            </summary>
        </member>
        <member name="P:IPA.Utilities.UnityGame.GameVersion">
            <summary>
            Provides the current game version.
            </summary>
            <value>the SemVer version of the game</value>
        </member>
        <member name="P:IPA.Utilities.UnityGame.OnMainThread">
            <summary>
            Checks if the currently running code is running on the Unity main thread.
            </summary>
            <value><see langword="true"/> if the curent thread is the Unity main thread, <see langword="false"/> otherwise</value>
        </member>
        <member name="T:IPA.Utilities.UnityGame.Release">
            <summary>
            The different types of releases of the game.
            </summary>
        </member>
        <member name="F:IPA.Utilities.UnityGame.Release.Steam">
            <summary>
            Indicates a Steam release.
            </summary>
        </member>
        <member name="F:IPA.Utilities.UnityGame.Release.Other">
            <summary>
            Indicates a non-Steam release.
            </summary>
        </member>
        <member name="P:IPA.Utilities.UnityGame.ReleaseType">
            <summary>
            Gets the <see cref="T:IPA.Utilities.UnityGame.Release"/> type of this installation of Beat Saber
            </summary>
            <remarks>
            This only gives a
            </remarks>
            <value>the type of release this is</value>
        </member>
        <member name="P:IPA.Utilities.UnityGame.InstallPath">
            <summary>
            Gets the path to the game's install directory.
            </summary>
            <value>the path of the game install directory</value>
        </member>
        <member name="P:IPA.Utilities.UnityGame.LibraryPath">
            <summary>
            The path to the `Libs` folder. Use only if necessary.
            </summary>
            <value>the path to the library directory</value>
        </member>
        <member name="P:IPA.Utilities.UnityGame.NativeLibraryPath">
            <summary>
            The path to the `Libs\Native` folder. Use only if necessary.
            </summary>
            <value>the path to the native library directory</value>
        </member>
        <member name="P:IPA.Utilities.UnityGame.PluginsPath">
            <summary>
            The directory to load plugins from.
            </summary>
            <value>the path to the plugin directory</value>
        </member>
        <member name="P:IPA.Utilities.UnityGame.UserDataPath">
            <summary>
            The path to the `UserData` folder.
            </summary>
            <value>the path to the user data directory</value>
        </member>
        <member name="T:IPA.Utilities.Utils">
            <summary>
            A class providing static utility functions that in any other language would just *exist*.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Utils.StringToByteArray(System.String)">
            <summary>
            Converts a hex string to a byte array.
            </summary>
            <param name="hex">the hex stream</param>
            <returns>the corresponding byte array</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.ByteArrayToString(System.Byte[])">
            <summary>
            Converts a byte array to a hex string.
            </summary>
            <param name="ba">the byte array</param>
            <returns>the hex form of the array</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.UnsafeCompare(System.Byte[],System.Byte[])">
            <summary>
            Uses unsafe code to compare 2 byte arrays quickly.
            </summary>
            <param name="a1">array 1</param>
            <param name="a2">array 2</param>
            <returns>whether or not they are byte-for-byte equal</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.GetRelativePath(System.String,System.String)">
            <summary>
            Gets a path relative to the provided folder.
            </summary>
            <param name="file">the file to relativize</param>
            <param name="folder">the source folder</param>
            <returns>a path to get from <paramref name="folder"/> to <paramref name="file"/></returns>
        </member>
        <member name="M:IPA.Utilities.Utils.CopyAll(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Func{System.Exception,System.IO.FileInfo,System.Boolean})">
            <summary>
            Copies all files from <paramref name="source"/> to <paramref name="target"/>.
            </summary>
            <param name="source">the source directory</param>
            <param name="target">the destination directory</param>
            <param name="appendFileName">the filename of the file to append together</param>
            <param name="onCopyException">a delegate called when there is an error copying. Return true to keep going.</param>
        </member>
        <member name="P:IPA.Utilities.Utils.CanUseDateTimeNowSafely">
            <summary>
            Whether you can safely use <see cref="P:System.DateTime.Now"/> without Mono throwing a fit.
            </summary>
            <value><see langword="true"/> if you can use <see cref="P:System.DateTime.Now"/> safely, <see langword="false"/> otherwise</value>
        </member>
        <member name="M:IPA.Utilities.Utils.CurrentTime">
            <summary>
            Returns <see cref="P:System.DateTime.Now"/> if supported, otherwise <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <returns>the current <see cref="T:System.DateTime"/> if supported, otherwise some indeterminant increasing value.</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.VersionCompareNoPrerelease(SemVer.Version,SemVer.Version)">
            <summary>
            Compares a pair of <see cref="T:SemVer.Version"/>s ignoring both the prerelease and build fields.
            </summary>
            <param name="l">the left value</param>
            <param name="r">the right value</param>
            <returns>&lt; 0 if l is less than r, 0 if they are equal in the numeric portion, or &gt; 0 if l is greater than r</returns>
        </member>
        <member name="M:IPA.Utilities.Utils.VersionCompareNoPrerelease(Hive.Versioning.Version,Hive.Versioning.Version)">
            <summary>
            Compares a pair of <see cref="T:Hive.Versioning.Version"/>s ignoring both the prerelease and build fields.
            </summary>
            <param name="l">the left value</param>
            <param name="r">the right value</param>
            <returns>&lt; 0 if l is less than r, 0 if they are equal in the numeric portion, or &gt; 0 if l is greater than r</returns>
        </member>
        <member name="T:IPA.Utilities.Utils.ScopeGuardObject">
            <summary>
            An object used to manage scope guards.
            </summary>
            <example>
            <code>
            using var _ = new Utils.ScopeGuardObject(() => RunOnScopeExit(value));
            </code>
            </example>
            <seealso cref="M:IPA.Utilities.Utils.ScopeGuard(System.Action)"/>
        </member>
        <member name="M:IPA.Utilities.Utils.ScopeGuardObject.#ctor(System.Action)">
            <summary>
            Creates a new scope guard that will invoke <paramref name="action"/> when disposed.
            </summary>
            <param name="action">the action to run on dispose</param>
        </member>
        <member name="M:IPA.Utilities.Utils.ScopeGuard(System.Action)">
            <summary>
            Creates a scope guard for a given <see cref="T:System.Action"/>.
            </summary>
            <param name="action">the <see cref="T:System.Action"/> to run on dispose</param>
            <returns>a <see cref="T:IPA.Utilities.Utils.ScopeGuardObject"/> that will run <paramref name="action"/> on disposal</returns>
            <example>
            <code>
            using var _ = Utils.ScopeGuard(() => RunOnScopeExit(value));
            </code>
            </example>
        </member>
        <member name="M:IPA.Utilities.Utils.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> as its key and value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="kvp">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to deconstruct.</param>
            <param name="key">The key in <paramref name="kvp"/>.</param>
            <param name="value">The value in <paramref name="kvp"/>.</param>
        </member>
        <member name="T:IPA.Utilities.Win32">
            <summary>
            Defines helpers for working with Win32 APIs
            </summary>
        </member>
        <member name="T:IPA.Utilities.Win32.ConsoleCtrlDelegate">
            <summary>
            Delegate type to be used as the Handler Routine for SCCH
            </summary>
        </member>
        <member name="T:IPA.Utilities.Win32.CtrlTypes">
            <summary>
            Enumerated type for the control messages sent to the handler routine
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.CtrlTypes.CTRL_C_EVENT">
            <summary>
            The user pressed Ctrl+C
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.CtrlTypes.CTRL_BREAK_EVENT">
            <summary>
            The user pressed Ctrl+Break
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.CtrlTypes.CTRL_CLOSE_EVENT">
            <summary>
            The user pressed Ctrl+Close
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.CtrlTypes.CTRL_LOGOFF_EVENT">
            <summary>
            The user logged off
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.CtrlTypes.CTRL_SHUTDOWN_EVENT">
            <summary>
            The computer shut dowm
            </summary>
        </member>
        <member name="T:IPA.Utilities.Win32.POINT">
            <summary>
            A point.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Win32.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:IPA.Utilities.Win32.WM">
            <summary>
            Windows Messages
            Defined in winuser.h from Windows SDK v6.1
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. 
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window. 
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed. 
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. 
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application. 
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_ACCESSIBILITYSTATE">
            <summary>
            The accessibility state has changed.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_ACTIVATESHELLWINDOW">
            <summary>
            The shell should activate its main window.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_APPCOMMAND">
            <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_GETMINRECT">
            <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_LANGUAGE">
            <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_REDRAW">
            <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_TASKMAN">
            <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_WINDOWCREATED">
            <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_WINDOWDESTROYED">
            <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_WINDOWACTIVATED">
            <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:IPA.Utilities.Win32.WM.HSHELL_WINDOWREPLACED">
            <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
            the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this
            value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
            <value>The return value condition. If the method returns this value, the
            associated parameter may be null.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter is not <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this
            value, the associated parameter is not null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
            <value>The return value condition. If the method returns this value, the
            associated parameter is not null.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
    </members>
</doc>
